from WsmanSoapLib import WsmanSoap, Eventsink
import inspect
from Queue import Queue
class __ResultObject__:
    def __init__(self,data):
        try:
            setattr(self,"xmlrequest",data[0])
            setattr(self,"xmlresponse",data[1])
            setattr(self,"prettyresponse",data[2])
            setattr(self,"hasfault",data[3])
            setattr(self,"timetaken",data[4])
            setattr(self,"instancecount",data[5])
        except:
            pass
class __InvokeResponse__:
    def __init__(self,data):
        if data.hasfault == True:
            raise Exception("Something went wrong. Please try again.")
        else:
            setattr(self,"instance",data.prettyresponse)
            for line in data.prettyresponse.splitlines():
                try:
                    key,value = line.split('=',1)
                    key = key.strip().lower()
                    value = value.strip()
                    setattr(self,key,value)
                except:
                    pass
class __AttributeClass__:
    def __init__(self,selector,getterFunc,setterFunc):
        #self.__data__ = self.getterFunc(selector)
        self.__selector__ = selector
        self.__getterFunction__ = getterFunc
        if setterFunc:
            self.__setterFunction__ = setterFunc
            self.setInstance = lambda value : self.__set__(value)
            
        self.refreshInstance()
    def __set__(self,value):
        argsSpec = inspect.getargspec(self.__setterFunction__)
        instanceid = self.__selector__.split('Name="InstanceID">',1)[-1].split('</wsman:Selector>')[0]
        if 'Target' in argsSpec.args:
            if instanceid.find('#') >= 0:
                target,attributename = instanceid.split("#",1)
            else:
                target,attributename = instanceid.split(":",1)
            return self.__setterFunction__(Target=target,AttributeName=attributename,AttributeValue=value)

        else:
            attributename = self.attributename
            '''if instanceid.find('#') >= 0:
                attributename = instanceid.rsplit('#',1)[-1]
            else:
                attributename = instanceid.rsplit(':',1)[-1]'''
            return self.__setterFunction__(AttributeName=attributename,AttributeValue=value)

    def addSetterFunction(self,setterFunc):
        self.__setterFunction__ = setterFunc
        self.setInstance = lambda value : self.__set__(value)
    def refreshInstance(self):
        for var in [v for v in self.__dict__.keys() if not (v.startswith('_') or v in ['setInstance', 'refreshInstance', 'addSetterFunction'])]:
            delattr(self,var)
        self.__data__ = self.__getterFunction__(self.__selector__)
        self.instance = self.__data__.prettyresponse
        for line in self.instance.splitlines():    
            line = line.strip()
            if line.lower().find('cim_') in [0,1]:
                self.classname = line
                if line.lower().endswith('enumeration'):
                    self.attributetype = 'Enumeration'
                elif line.lower().endswith('string'):
                    self.attributetype = 'String'
                elif line.lower().endswith('integer'):
                    self.attributetype = 'Integer'
                elif line.lower().endswith('password'):
                    self.attributetype = 'Password'
            else:
                try:
                    key,value = line.split('=',1)
                    key = key.strip().lower()
                    value = value.strip()
                    if not hasattr(self,key):
                        value = value.strip()
                        setattr(self,key,value)
                    else:
                        tmp = getattr(self,key)
                        if type(tmp) == list:
                            tmp.append(value)
                            setattr(self,key,tmp)
                        else:
                            setattr(self,key,[tmp,value])
                except:
                    pass
                
class __Attributes__:
    def __init__(self):
        pass
    def __addAttr__(self,selector,attrObj):
        instanceid = selector.split('Name="InstanceID">',1)[-1].split('</wsman:Selector>')[0].replace('#','_').replace(':','_').replace('.','').replace('-','_')
        setattr(self,instanceid,attrObj)
class __SubscriptionClass__:
    def __init__(self,soaplib,cimns,resuri):
        self.__soaplib__ = soaplib
        self.__cimns__ = cimns
        self.__resuri__ = resuri
        pass
    def subscribe(self,responseURL,expiry=None,heartBeat=None,jid=None):
        return __ResultObject__(self.__soaplib__.subscribe(self.__resuri__.rsplit('/')[-1],self.__cimns__,responseURL,heartBeat,expiry,jid))
class __WSEventing__:
    def __init__(self,soaplib,cimns="root/dcim"):
        self.__cimns__ = cimns
        self.__soaplib__ = soaplib
        self.cim_indication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Indication')
        self.cim_processindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ProcessIndication')
        self.cim_alertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AlertIndication')
        self.dcim_lifecyclejobalertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobAlertIndication')
        self.dcim_alertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AlertIndication')
        self.dcim_lifecyclejobgarbagecollectionalertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobGarbageCollectionAlertIndication')
        self.dcim_lifecyclejobcreatealertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobCreateAlertIndication')
        self.dcim_lifecyclejobupdatealertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobUpdateAlertIndication')
        self.dcim_lifecyclejobdeletealertindication = __SubscriptionClass__(self.__soaplib__,'root/dcim','http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobDeleteAlertIndication')

    def unsubscribe(self,subscriptionID):
        return __ResultObject__(self.__soaplib__.unsubscribe(subscriptionID,self.__cimns__))
    def renewSubscription(self,subscriptionID,expiry):
        return __ResultObject__(self.__soaplib__.renewSubscription(subscriptionID,expiry,self.__cimns__))
class __BaseClass__:
    def __init__(self):
        self.__soaplib__ = None
        self.__resuri__ = ''
        self.__parent__ = ''
        self.__cimns__ = ''
        self.__invokeMethodsMap__ = {}
        self.__selectorsCached__ = False
        self.__attrs__ = []
        self.__association__ = False
        self.name=''
    def isAssociationClass(self):
        '''Returns True if class is an Association Class, False otherwise'''
        return True if self.__association__ else False
    def initAttributes(self, setterFunc=None):
        ''''''
        if self.name.lower().endswith('attribute') or self.name.lower().endswith('enumeration') or self.name.lower().endswith('integer') or self.name.lower().endswith('string') or self.name.lower().endswith('password'):
            self.__attrs__ = []
            self.attribute = __Attributes__()
            for selector in self.selectors():
                attrObj = __AttributeClass__(selector,self.get,setterFunc)
                self.__attrs__.append(attrObj)
                self.attribute.__addAttr__(selector,attrObj)
    def attributes(self, setterFunc=None, getCached=False):
        ''''''
        if getCached == False:
            self.initAttributes(setterFunc)
        try:
            for attribute in self.__attrs__:
                yield attribute            
        except:
            yield None
    def getparent(self):
        '''Returns the parent ClassName from which this Class is inherited'''
        return self.__parent__
    def getcimnamespace(self):
        '''Returns the parent ClassName from which this Class is inherited'''
        return self.__cimns__
    def getresourceuri(self):
        '''Returns the parent ClassName from which this Class is inherited'''
        return self.__resuri__
    def enumerate(self,fragment='',filterQuery='',dialect=None):
        '''Returns the enumeration of all the instances of this class'''
        return __ResultObject__(self.__soaplib__.enum(self.__cimns__, self.__resuri__,fragment,filterQuery,dialect))
    def associations(self):
        '''Returns the associations of this class'''
        return __ResultObject__(self.__soaplib__.associations(self.__cimns__, self.__resuri__, 'association'))
    def references(self):
        '''Returns the references of this class'''
        return __ResultObject__(self.__soaplib__.associations(self.__cimns__, self.__resuri__, 'references'))
    def enumerateEPR(self):
        '''Returns the End Point References of the instances of this class'''
        return __ResultObject__(self.__soaplib__.getEPR(self.__cimns__, self.__resuri__))
    def createSelectorSetXML(self,**kwargs):
        if kwargs is None:
            return None
        else:
            selSet = ''
            gotCIMNS = False
            for key, value in kwargs.iteritems():
                if key.lower() == '__cimnamespace':
                    gotCIMNS = True
                selSet += '<wsman:Selector Name="%s">%s</wsman:Selector>' %(key,value)
            if not gotCIMNS:
                selSet += '<wsman:Selector Name="%s">%s</wsman:Selector>' %("__cimnamespace",self.__cimns__)
            return '<wsa:ReferenceParameters xmlns:wsa="http://schemas.xmlsoap.org/ws/2004/08/addressing" xmlns:wsman="http://schemas.dmtf.org/wbem/wsman/1/wsman.xsd"><wsman:ResourceURI>%s</wsman:ResourceURI><wsman:SelectorSet>%s</wsman:SelectorSet></wsa:ReferenceParameters>' %(self.__resuri__,selSet)
    #def getInstanceList(self):
        #'''Returns a list of selector sets for the instances of this class. Each element of the returned list may be used in 'get' and to execute methods.'''
        #self.__selectorSets__ = self.__soaplib__.getSelectorSets(self.__cimns__, self.__resuri__).values()
        #return self.__selectorSets__
    def selectors(self,getCached=False):
        '''Generator for all the End Point Reference Parameters for instances of this class'''
        if not self.__selectorsCached__ or not getCached:
            self.__selectors__ = self.__soaplib__.getSelectorSets(self.__cimns__, self.__resuri__)
            self.__selectorsCached__ = True
        for selector in self.__selectors__:
            yield selector
    def get(self,instance,fragmentname=''):
        '''Returns the enumeration of the requested instances of this class'''
        return __ResultObject__(self.__soaplib__.get(self.__resuri__,instance,fragmentname))
    #def getAll(self):
        #'''Performs Get operation on all the instances of this class'''
        #try:
        #    selectorSets = self.__selectorSets__
        #except:
        #    selectorSets = self.getInstanceList()
        #instances = []
        #for selectorSet in selectorSets:
        #    instances.append(self.get(selectorSet))
        #return instances
    def getMethodsDictionary(self):
        '''Returns a dictionary of all the methods of this class identified by method name'''
        return self.__invokeMethodsMap__
    def invokeMethods(self):
        '''Generator for all the methods implemented in this class'''
        for method in self.__invokeMethodsMap__.values():
            yield method
    def set(self,instance,property,value):
        '''If settable, sets the specified property with the value specified for the specified instance of this class'''
        return __ResultObject__(self.__soaplib__.Set(self.__resuri__, instance, {property:value}))

class __CIM_AssignedIdentity__(__BaseClass__):
    '''This relationship associates an Identity to a specific ManagedElement, whose trust and account information is represented. )

Class Properties:
    CIM_Identity REF IdentityInfo           :    An Identity of the referenced ManagedElement.
    CIM_ManagedElement REF ManagedElement   :    The ManagedElement assigned to or representing a specific Identity.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AssignedIdentity'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_Component__(__BaseClass__):
    '''CIM_Component is a generic association used to establish part of relationships between Managed Elements. For example, it could be used to define the components or parts of a System. )

Class Properties:
    CIM_ManagedElement REF GroupComponent   :    The parent element in the association.
    CIM_ManagedElement REF PartComponent    :    The child element in the association.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Component'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_Dependency__(__BaseClass__):
    '''CIM_Dependency is a generic association used to establish dependency relationships between ManagedElements. )

Class Properties:
    CIM_ManagedElement REF Antecedent       :    Antecedent represents the independent object in this association.
    CIM_ManagedElement REF Dependent        :    Dependent represents the object that is dependent on the Antecedent.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Dependency'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ElementCapabilities__(__BaseClass__):
    '''ElementCapabilities represents the association between ManagedElements and their Capabilities. Note that the cardinality of the ManagedElement reference is Min(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities. )

Class Properties:
    CIM_Capabilities REF Capabilities       :    The Capabilities object associated with the element.
    uint16 Characteristics[]                :    Characteristics provides descriptive information about the Capabilities. when the value 2 Default is specified, the associated Capabilities shall represent the default capabilities of the associated Managed Element \nwhen the value 2 Default is not specified, the Capabilities instance may represent the default capabilities of the Managed Element\nWhen the value 3 Current is specified, the associated Capabilities shall represent the current capabilities of the associated Managed Element\nWhen the value 3 Current is not specified, the Capabilities instance may represent the current capabilities of the Managed Element.
    CIM_ManagedElement REF ManagedElement   :    The managed element.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ElementCapabilities'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ElementConformsToProfile__(__BaseClass__):
    '''The CIM_ElementConformsToProfile association defines the RegisteredProfiles to which the referenced ManagedElement is conformant. Note: This association may apply to any Managed Element. Typical usage will apply it to a higher level instance, such as a System, NameSpace, or Service. When applied to a higher level instance, all constituent parts MUST behave appropriately in support of the ManagedElement s conformance to the named RegisteredProfile. )

Class Properties:
    CIM_RegisteredProfile REF ConformantStandard:    The RegisteredProfile to which the ManagedElement conforms.
    CIM_ManagedElement REF ManagedElement   :    The ManagedElement that conforms to the RegisteredProfile.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ElementConformsToProfile'
        self.__parent__ = ''
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_Indication__(__BaseClass__):
    '''CIM_Indication is the abstract root class for all notifications about changes in schema, objects and their data, and about events detected by providers and instrumentation. Subclasses represent specific types of notifications. \n \n To receive an Indication, a consumer (or subscriber) must create an instance of CIM_IndicationFilter describing the criteria of the notification, an instance of CIM_ListenerDestination describing the delivery of the notification, and an instance of CIM_IndicationSubscription associating the Filter and Handler. )

Class Properties:
    string CorrelatedIndications[]          :    A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
    string IndicationFilterName             :    An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
    string IndicationIdentifier             :    An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above preferred algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the preferred algorithm should be used with the <OrgID> set to CIM.
    datetime IndicationTime                 :    The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
    string OtherSeverity                    :    Holds the value of the user defined severity value when PerceivedSeverity is 1 (Other).
    uint16 PerceivedSeverity                :    An enumerated value that describes the severity of the Indication from the notifiers point of view: \n1 - Other, by CIM convention, is used to indicate that the Severitys value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but its too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
    string SequenceContext                  :    The sequence context portion of a sequence identifier for the indication. The sequence number portion of the sequence identifier is provided by the SequenceNumber property. The combination of both property values represents the sequence identifier for the indication.\nThe sequence identifier for the indication enables a CIM listener to identify duplicate indications when the CIM service attempts the delivery retry of indications, to reorder indications that arrive out-of-order, and to detect lost indications.\nIf a CIM service does not support sequence identifiers for indications, this property shall be NULL.\nIf a CIM service supports sequence identifiers for indications, this property shall be maintained by the CIM service for each registered listener destination, and its value shall uniquely identify the CIM service and the indication service within the CIM service such that restarts of the CIM service and deregistration of listener destinations to the CIM service cause the value to change, without reusing earlier values for a sufficiently long time.\nWhen retrying the delivery of an indication, this property shall have the same value as in the original delivery.\nTo guarantee this uniqueness, the property value should be constructed using the following format (defined in ABNF): sequence-context = indication-service-name # cim-service-start-id # listener-destination-creation-time\nWhere: indication-service-name is the value of the Name property of the CIM_IndicationService instance responsible for delivering the indication. cim-service-start-id is an identifier that uniquely identifies the CIM service start, for example via a timestamp of the start time, or via a counter that increases for each start or restart. listener-destination-creation-time is a timestamp of the creation time of the CIM_ListenerDestination instance representing the listener destination.\nSince this format is only a recommendation, CIM clients shall treat the value as an opaque identifier for the sequence context and shall not rely on this format.
    sint64 SequenceNumber                   :    The sequence number portion of a sequence identifier for the indication. The sequence context portion of the sequence identifier is provided by the SequenceContext property. The combination of both property values represents the sequence identifier for the indication.\nThe sequence identifier for the indication enables a CIM listener to identify duplicate indications when the CIM service attempts the delivery retry of indications, to reorder indications that arrive out-of-order, and to detect lost indications.\nIf a CIM service does not support sequence identifiers for indications, this property shall be NULL.\nIf a CIM service supports sequence identifiers for indications, this property shall be maintained by the CIM service for each registered listener destination, and its value shall uniquely identify the indication within the sequence context provided by SequenceContext. It shall start at 0 whenever the sequence context string changes. Otherwise, it shall be increased by 1 for every new indication to that listener destination, and it shall wrap to 0 when the value range is exceeded.\nWhen retrying the delivery of an indication, this property shall have the same value as in the original delivery.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Indication'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_LogManagesRecord__(__BaseClass__):
    '''LogManagesRecord describes the aggregation or location of Records managed by a Log. )

Class Properties:
    CIM_Log REF Log                         :    The Log.
    CIM_RecordForLog REF Record             :    The record managed by the Log.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_LogManagesRecord'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ManagedElement__(__BaseClass__):
    '''ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema. )

Class Properties:
    string Caption                          :    The Caption property is a short textual description (one- line string) of the object.
    string Description                      :    The Description property provides a textual description of the object.
    string ElementName                      :    A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
    string InstanceID                       :    InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above preferred algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ManagedElement'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_MemberOfCollection__(__BaseClass__):
    '''CIM_MemberOfCollection is an aggregation used to establish membership of ManagedElements in a Collection. )

Class Properties:
    CIM_Collection REF Collection           :    The Collection that aggregates members.
    CIM_ManagedElement REF Member           :    The aggregated member of the Collection.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MemberOfCollection'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_OwningCollectionElement__(__BaseClass__):
    '''OwningCollectionElement represents an association between a Collection and the ManagedElement responsible for the control or ownership of the Collection. )

Class Properties:
    CIM_Collection REF OwnedElement         :    The Collection owned or controlled by the ManagedElement.
    CIM_ManagedElement REF OwningElement    :    The ManagedElement acting as the owner or object that isresponsible for the control of the Collection.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_OwningCollectionElement'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_RoleLimitedToTarget__(__BaseClass__):
    '''The Role object class is used to represent a position or set of responsibilities within an organization, organizational unit or other scope. When explicitly restricting the target elements that may be accessed from this Role, this association MUST be used. )

Class Properties:
    CIM_Role REF DefiningRole               :    The Role whose target set is explicitly defined.
    CIM_ManagedElement REF TargetElement    :    Reference to the target set that can be accessed from the Role.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RoleLimitedToTarget'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ServiceAffectsElement__(__BaseClass__):
    '''ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. Instantiating this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the ManagedElement. This burden might affect performance, throughput, availability, and so on. )

Class Properties:
    CIM_ManagedElement REF AffectedElement  :    The Managed Element that is affected by the Service.
    CIM_Service REF AffectingElement        :    The Service that is affecting the ManagedElement.
    uint16 ElementEffects[]                 :    An enumeration that describes the effect on the ManagedElement. This array corresponds to the OtherElementEffectsDescriptions array, where the latter provides details that are related to the high-level effects enumerated by this property. Additional detail is required if the ElementEffects array contains the value 1 (Other). The values are defined as follows: \n- Exclusive Use (2): No other Service may have this association to the element. \n- Performance Impact (3): Deprecated in favor of Consumes, Enhances Performance, or Degrades Performance. Execution of the Service may enhance or degrade the performance of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Element Integrity (4): Deprecated in favor of Consumes, Enhances Integrity, or Degrades Integrity. Execution of the Service may enhance or degrade the integrity of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Manages (5): The Service manages the element. \n- Consumes (6): Execution of the Service consumes some or all of the associated element as a consequence of running the Service. For example, the Service may consume CPU cycles, which may affect performance, or Storage which may affect both performance and integrity. (For instance, the lack of free storage can degrade integrity by reducing the ability to save state. ) Consumes may be used alone or in conjunction with other values, in particular, Degrades Performance and Degrades Integrity. \nManages and not Consumes should be used to reflect allocation services that may be provided by a Service. \n- Enhances Integrity (7): The Service may enhance integrity of the associated element. \n- Degrades Integrity (8): The Service may degrade integrity of the associated element. \n- Enhances Performance (9): The Service may enhance performance of the associated element. \n- Degrades Performance (10): The Service may degrade performance of the associated element.
    string OtherElementEffectsDescriptions[]:    Provides details for the effect at the corresponding array position in ElementEffects. This information is required if ElementEffects contains the value 1 (Other).
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ServiceAffectsElement'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ServiceAvailableToElement__(__BaseClass__):
    '''CIM_ServiceAvailableToElement conveys the semantics of a Service that is available for the use of a ManagedElement. An example of an available Service is that a Processor and an enclosure (a PhysicalElement) can use AlertOnLAN Services to signal an incomplete or erroneous boot. In reality, AlertOnLAN is simply a HostedService on a computer system that is generally available for use and is not a dependency of the processor or enclosure. To describe that the use of this service might be restricted or have limited availability or applicability, the CIM_ServiceAvailableToElement association would be instantiated between the Service and specific CIM_Processors and CIM_Chassis. )

Class Properties:
    CIM_Service REF ServiceProvided         :    The Service that is available.
    CIM_ManagedElement REF UserOfService    :    The ManagedElement that can use the Service.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ServiceAvailableToElement'
        self.__parent__ = ''
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_AssignedAcctIdent__(__BaseClass__, __CIM_AssignedIdentity__):
    '''DCIM_AssignedAcctIdent is a derivation of CIM_AssignedIdentity. This relationship associates an Identity to a specific ManagedElement, whose trust and account information is represented. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AssignedAcctIdent'
        self.__parent__ = 'CIM_AssignedIdentity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_SystemComponent__(__BaseClass__, __CIM_Component__):
    '''CIM_SystemComponent is a specialization of the CIM_Component association that establishes part of relationships between a System and any ManagedSystemElements of which it is composed. \n Use this association with caution when using it instead of a subclass such as SystemDevice or a peer association such as HostedService. This class is very broadly defined, which can lead to erroneous use. For example, Access Points that are dependent on (and hosted on) a System are NOT Components of the System. The System is not made up of any AccessPoint parts , which is why a Dependency association, HostedAccessPoint, was defined. Similarly, a PhysicalPackage is not a part of a System, because the physical element exists independently of any internal components, software, and so on. In fact, again, a Dependency relationship is true where a ComputerSystem is Dependent on its packaging, as described by the ComputerSystemPackage association. )

Class Properties:
    CIM_System REF GroupComponent           :    The parent System in the Association.
    CIM_ManagedSystemElement REF PartComponent:    The child element that is a component of a System.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SystemComponent'
        self.__parent__ = 'CIM_Component'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_AccountOnSystem__(__BaseClass__, __CIM_SystemComponent__):
    '''A system (e.g., ApplicationSystem, ComputerSystem, AdminDomain) aggregates Accounts and scopes the uniqueness of the Account names (i.e., userids). )

Class Properties:
    CIM_System REF GroupComponent           :    The aggregating system also provides name scoping for the Account.
    CIM_Account REF PartComponent           :    The subordinate Account.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AccountOnSystem'
        self.__parent__ = 'CIM_SystemComponent'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_SystemDevice__(__BaseClass__, __CIM_SystemComponent__):
    '''LogicalDevices can be aggregated by a System. This relationship is made explicit by the SystemDevice association. )

Class Properties:
    CIM_System REF GroupComponent           :    The parent system in the Association.
    CIM_LogicalDevice REF PartComponent     :    The LogicalDevice that is a component of a System.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SystemDevice'
        self.__parent__ = 'CIM_SystemComponent'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemComponent__(__BaseClass__, __CIM_SystemComponent__):
    '''SystemComponent can be associated by a ComputerSystem. This relationship is made explicit by the SystemComponent association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemComponent'
        self.__parent__ = 'CIM_SystemComponent'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_AccountOnSystem__(__BaseClass__, __CIM_AccountOnSystem__):
    '''DCIM_AccountOnSystem is a derivation of CIM_AccountOnSystem. A system aggregates Accounts and scopes the uniqueness of the Account names. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AccountOnSystem'
        self.__parent__ = 'CIM_AccountOnSystem'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPSystemDevice__(__BaseClass__, __CIM_SystemDevice__):
    '''LogicalDevices can be aggregated by a System. This relationship is made explicit by the SPSystemDevice association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPSystemDevice'
        self.__parent__ = 'CIM_SystemDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemPSDevice__(__BaseClass__, __CIM_SystemDevice__):
    '''DCIM_SystemPSDevice is a derivation of CIM_SystemDevice, and represents a System Device. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemPSDevice'
        self.__parent__ = 'CIM_SystemDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemSensorDevice__(__BaseClass__, __CIM_SystemDevice__):
    '''DCIM_SystemDSensorevice is a derivation of CIM_SystemDevice, and represents a System Device. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemSensorDevice'
        self.__parent__ = 'CIM_SystemDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_AssociatedSensor__(__BaseClass__, __CIM_Dependency__):
    '''The CIM_AssociatedCooling relationship indicates what ManagedSystemElement(s) the fan or cooling device is providingcooling for. )

Class Properties:
    CIM_Sensor REF Antecedent               :    The Sensor.
    CIM_ManagedSystemElement REF Dependent  :    The ManagedSystemElement for which information is measured by the Sensor.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AssociatedSensor'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ConcreteDependency__(__BaseClass__, __CIM_Dependency__):
    '''CIM_ConcreteDependency is a generic association used to establish dependency relationships between ManagedElements. It is defined as a concrete subclass of the abstract CIM_Dependency class, to be used in place of many specific subclasses of Dependency that add no semantics, that is subclasses that do not clarify the type of dependency, update cardinalities, or add or remove qualifiers. Note that when you define additional semantics for Dependency, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Dependency. ConcreteDependency is limited in its use as a concrete form of a general dependency. \n \n It was deemed more prudent to create this concrete subclass than to change Dependency from an abstract to a concrete class. Dependency already had multiple abstract subclasses in the CIM Schema, and wider industry usage and impact could not be anticipated. )

Class Properties:
    CIM_ManagedElement REF Antecedent       :    Antecedent represents the independent object in this association.
    CIM_ManagedElement REF Dependent        :    Dependent represents the object that is dependent on the Antecedent.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ConcreteDependency'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ElementView__(__BaseClass__, __CIM_Dependency__):
    '''CIM_ElementView is used to associate an instance of CIM_View with an instance representing one or more instances of managed resources that contribute to the view. )

Class Properties:
    CIM_ManagedElement REF Antecedent       :    Antecedent shall be a reference to a CIM_ManagedElement that is an instance in the normalized representation of the managed resource that contributes to the view.
    CIM_View REF Dependent                  :    Dependent shall be a reference to an instance of CIM_View that represents a de-normalized or aggregate view of one or more instances that contribute to the view.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ElementView'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_HostedDependency__(__BaseClass__, __CIM_Dependency__):
    '''HostedDependency defines a ManagedElement in the context of another ManagedElement in which it resides. )

Class Properties:
    CIM_ManagedElement REF Antecedent       :    The scoping ManagedElement.
    CIM_ManagedElement REF Dependent        :    The hosted ManagedElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_HostedDependency'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_MetricDefForME__(__BaseClass__, __CIM_Dependency__):
    '''This association ties a CIM_BaseMetricDefinition to a CIM_ManagedElement to define metrics for the latter. The metrics definition is given context by the ManagedElement, which is why the definition is dependent on the element. )

Class Properties:
    uint16 MetricCollectionEnabled = 2      :    MetricCollectionEnabled indicates whether the metric defined by the referenced CIM_BaseMetricDefinition is being collected for the referenced CIM_ManagedElement. A value of 2 Enabled shall indicate the metric is being collected. A value of 3 Disabled shall indicate the metric is not being collected. When collection of a metric is re-enabled, the metric is re-initialized such that any values for a current access metric reflect data collected after the time at which collection was re-enabled.
    CIM_ManagedElement REF Antecedent       :    The CIM_ManagedElement that can have metrics of this type associated with it.
    CIM_BaseMetricDefinition REF Dependent  :    A CIM_BaseMetricDefinition for a CIM_ManagedElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MetricDefForME'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_MetricForME__(__BaseClass__, __CIM_Dependency__):
    '''This association links a ManagedElement to the metric values being maintained for it. )

Class Properties:
    CIM_ManagedElement REF Antecedent       :    ManagedElement to which the metric values belong.
    CIM_BaseMetricValue REF Dependent       :    A metric value for the ManagedElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MetricForME'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_MetricInstance__(__BaseClass__, __CIM_Dependency__):
    '''Weak association of metric value objects with their metric definition. This association ties an instance of CIM_BaseMetricValue to its CIM_BaseMetricDefinition; it is weak because the existence of a CIM_BaseMetricValue depends on the existence of its associated CIM_BaseMetricDefinition: An instance of CIM_BaseMetricValue must not exist without being associated to its corresponding CIM_BaseMetricDefinition. )

Class Properties:
    CIM_BaseMetricDefinition REF Antecedent :    The CIM_BaseMetricDefinition for this particular CIM_BaseMetricValue.
    CIM_BaseMetricValue REF Dependent       :    A CIM_BaseMetricValue instance holding the Value.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MetricInstance'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ProvidesServiceToElement__(__BaseClass__, __CIM_Dependency__):
    '''Note: The use of the CIM_ProvidesServiceToElement class has been deprecated. Instead, ServiceAvailableToElement conveys the semantics of use, while the subclasses of ProvidesServiceToElement (or the ConcreteDependency association) describe dependency relationships. CIM_ProvidesServiceToElement was meant to generalize the ServiceServiceDependency association. This method indicates that ManagedElements can use the functionality provided by one or more Services. An example of the association is that a Processor and an enclosure (a PhysicalElement) can use AlertOnLAN Services to signal an incomplete or erroneous boot. In reality, AlertOnLAN is simply a HostedService on a computer system that is generally available for use and is not a dependency of the processor or enclosure. To describe that the use of the service might be restricted or have limited availability or applicability, the CIM_ServiceAvailableToElement association would be instantiated. )

Class Properties:
    CIM_Service REF Antecedent              :    Note: The use of this element is deprecated. Deprecated description: The Service provided.
    CIM_ManagedElement REF Dependent        :    Note: The use of this element is deprecated. Deprecated description: The ManagedElement that is dependent on the Service.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ProvidesServiceToElement'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_SystemPackaging__(__BaseClass__, __CIM_Dependency__):
    '''Similar to the way that LogicalDevices are Realized by PhysicalElements, Systems can be associated with specific packaging or PhysicalElements. This association explicitly defines the relationship between a System and its packaging. )

Class Properties:
    CIM_PhysicalElement REF Antecedent      :    The PhysicalElements that provide the packaging of a System.
    CIM_System REF Dependent                :    The System whose packaging is described.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SystemPackaging'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_UseOfLog__(__BaseClass__, __CIM_Dependency__):
    '''ManagedSystemElements may record their event, error or informational data within Logs. The use of a Log to hold a ManagedSystemElement s data is described by this association. The type of Element data captured by the Log can be specified using the RecordedData string property. )

Class Properties:
    CIM_Log REF Antecedent                  :    The Log.
    CIM_ManagedSystemElement REF Dependent  :    The ManagedSystemElement whose information is recorded in the Log.
    string RecordedData                     :    A free-form string describing the use of the Log by the ManagedSystemElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_UseOfLog'
        self.__parent__ = 'CIM_Dependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_AssociatedSensor__(__BaseClass__, __CIM_AssociatedSensor__):
    '''DCIM_AssociatedSensor is a derivation of CIM_AssociatedSensor, and represents an association between a sensor and a managed element the sensor is monitoring )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AssociatedSensor'
        self.__parent__ = 'CIM_AssociatedSensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRoleConcreteDependency__(__BaseClass__, __CIM_ConcreteDependency__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRoleConcreteDependency'
        self.__parent__ = 'CIM_ConcreteDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_ElementView__(__BaseClass__, __CIM_ElementView__):
    '''CIM_ElementView is used to associate an instance of CIM_View with an instance representing one or more instances of managed resources that contribute to the view. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ElementView'
        self.__parent__ = 'CIM_ElementView'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_HostedCollection__(__BaseClass__, __CIM_HostedDependency__):
    '''HostedCollection defines a SystemSpecificCollection in the context of a scoping System. It represents a Collection that has meaning only in the context of a System, a Collection whose elements are restricted by the definition of the System, or both of these types of Collections. )

Class Properties:
    CIM_System REF Antecedent               :    The scoping system.
    CIM_SystemSpecificCollection REF Dependent:    The collection defined in the context of a system.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_HostedCollection'
        self.__parent__ = 'CIM_HostedDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_HostedService__(__BaseClass__, __CIM_HostedDependency__):
    '''CIM_HostedService is an association between a Service and the System on which the functionality is located. The cardinality of this association is one-to-many. A System can host many Services. Services are weak with respect to their hosting System. Heuristic: A Service is hosted on the System where the LogicalDevices or SoftwareFeatures that implement the Service are located. The model does not represent Services hosted across multiple systems. The model is as an ApplicationSystem that acts as an aggregation point for Services that are each located on a single host. )

Class Properties:
    CIM_System REF Antecedent               :    The hosting System.
    CIM_Service REF Dependent               :    The Service hosted on the System.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_HostedService'
        self.__parent__ = 'CIM_HostedDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSHostedPowerRedundancy__(__BaseClass__, __CIM_HostedCollection__):
    '''DCIM_CSHostedPowerRedundancy is a derivation of CIM_HostedCollection. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSHostedPowerRedundancy'
        self.__parent__ = 'CIM_HostedCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPHostedPowerManagementService__(__BaseClass__, __CIM_HostedService__):
    '''DCIM_SPHostedPowerManagementService service represents the assocation between a service processor and DCIM_CSPowerManagementService. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPHostedPowerManagementService'
        self.__parent__ = 'CIM_HostedService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPHostedSIMPService__(__BaseClass__, __CIM_HostedService__):
    '''DCIM_SPHostedSIMPService is a derivation of CIM_HostedService. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPHostedSIMPService'
        self.__parent__ = 'CIM_HostedService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPHostedService__(__BaseClass__, __CIM_HostedService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPHostedService'
        self.__parent__ = 'CIM_HostedService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPHostedRBAPService__(__BaseClass__, __DCIM_SPHostedService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPHostedRBAPService'
        self.__parent__ = 'DCIM_SPHostedService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPHostedTimeService__(__BaseClass__, __DCIM_SPHostedService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPHostedTimeService'
        self.__parent__ = 'DCIM_SPHostedService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_MetricDefForME__(__BaseClass__, __CIM_MetricDefForME__):
    '''DCIM_MetricDefForME is a derivation of CIM_MetricDefForME and represents an association that ties a DCIM_BaseMetricDefinition to a CIM_ManagedElement to define metrics for the latter. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_MetricDefForME'
        self.__parent__ = 'CIM_MetricDefForME'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_MetricForME__(__BaseClass__, __CIM_MetricForME__):
    '''DCIM_MetricForME is a derivation of CIM_MetricForME and represents an association that links a ManagedElement to the metric values being maintained for it. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_MetricForME'
        self.__parent__ = 'CIM_MetricForME'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_AggrMetricInstance__(__BaseClass__, __CIM_MetricInstance__):
    '''DCIM_AggrMetricInstance is a derivation of CIM_MetricInstance and represents an association that ties an instance of DCIM_AggregationMetricDefinition to its DCIM_AggregationMetricValue. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AggrMetricInstance'
        self.__parent__ = 'CIM_MetricInstance'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_BaseMetricInstance__(__BaseClass__, __CIM_MetricInstance__):
    '''DCIM_BaseMetricInstance is a derivation of CIM_MetricInstance and represents an association that ties an instance of DCIM_BaseMetricDefinition to its DCIM_BaseMetricValue. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BaseMetricInstance'
        self.__parent__ = 'CIM_MetricInstance'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ServiceServiceDependency__(__BaseClass__, __CIM_ProvidesServiceToElement__):
    '''CIM_ServiceServiceDependency is an association between a Service and another Service, which indicates that the latter cooperates with the former, is required to be present, required to have completed, or must be absent for the former Service to provide its functionality. For example, Boot Services might be dependent upon underlying system initialization Services. In the case of the initialization Services, the Boot Service might be dependent on the completion of the init Services. \n When examining the ServiceServiceDependency class definition, note that its superclass ProvidesServiceToElement is deprecated. Unfortunately, ProvidesServiceToElement cannot be removed from the object hierarchy without a major Schema release. When or if a major release occurs, the ProvidesServiceToElement superclass will be removed, and ServiceServiceDependency will subclass from CIM_Dependency directly. )

Class Properties:
    CIM_Service REF Antecedent              :    The required Service.
    CIM_Service REF Dependent               :    The Service that is dependent on an underlying Service.
    boolean RestartService                  :    This property describes that the Antecedent Service must be restarted after the Dependent operation is complete.
    uint16 TypeOfDependency                 :    The nature of the Service-to-Service dependency. 2 - Antecedent Service shall have completed before Dependent services functionality is available.\n3 - Antecedent Service shall have started before Dependent services functionality is available.\n4 - Antecedent Service shall not be started in order for Dependent services functionality to be available.\n5 - The two Services cooperate and augment each others function. There is no requirement implied by this value regarding the execution of the Antecedent service in order for the Dependent service to operate.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ServiceServiceDependency'
        self.__parent__ = 'CIM_ProvidesServiceToElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_RBAServiceServiceDependency__(__BaseClass__, __CIM_ServiceServiceDependency__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RBAServiceServiceDependency'
        self.__parent__ = 'CIM_ServiceServiceDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPServiceServiceDependency__(__BaseClass__, __DCIM_RBAServiceServiceDependency__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPServiceServiceDependency'
        self.__parent__ = 'DCIM_RBAServiceServiceDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIServiceServiceDependency__(__BaseClass__, __DCIM_RBAServiceServiceDependency__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIServiceServiceDependency'
        self.__parent__ = 'DCIM_RBAServiceServiceDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalServiceServiceDependency__(__BaseClass__, __DCIM_RBAServiceServiceDependency__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalServiceServiceDependency'
        self.__parent__ = 'DCIM_RBAServiceServiceDependency'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ComputerSystemPackage__(__BaseClass__, __CIM_SystemPackaging__):
    '''Similar to the way that LogicalDevices are Realized by PhysicalElements, ComputerSystem may be realized in one or more PhysicalPackages. The ComputerSystemPackage association explicitly defines this relationship. )

Class Properties:
    CIM_PhysicalPackage REF Antecedent      :    The PhysicalPackage(s) that realize a Unitary ComputerSystem.
    CIM_ComputerSystem REF Dependent        :    The UnitaryComputerSystem.
    string PlatformGUID                     :    A Gloabally Unique Identifier for the Systems Package.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystemPackage'
        self.__parent__ = 'CIM_SystemPackaging'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_ComputerSystemPackage__(__BaseClass__, __CIM_ComputerSystemPackage__):
    '''LogicalDevices can be aggregated by a System. This relationship is made explicit by the SystemDevice association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ComputerSystemPackage'
        self.__parent__ = 'CIM_ComputerSystemPackage'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LCUseOfLog__(__BaseClass__, __CIM_UseOfLog__):
    '''An association class derived from UseOfLog that represents the system elements that are dependednt on the LifeCycle Log. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCUseOfLog'
        self.__parent__ = 'CIM_UseOfLog'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SELUseOfLog__(__BaseClass__, __CIM_UseOfLog__):
    '''An association class derived from UseOfLog that represents the system elements that are dependednt on the System Event Log. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELUseOfLog'
        self.__parent__ = 'CIM_UseOfLog'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_AccountCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''DCIM_AccountCapabilities is a derivation of CIM_ElementCapabilities. AccountCapabilities describes the capabilities supported for managing an Account. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AccountCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_BMElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''DCIM_BMElementCapabilities is a derivation of CIM_ElementCapabilities and represents an association between ManagedElements and their Capabilites. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BMElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPRBAElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRBAElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''LogicalDevices can be aggregated by a System. This relationship is made explicit by the SystemDevice association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMICLPElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''DCIM_IPMICLPElementCapabilities is a derivation of CIM_ElementCapabilities. ElementCapabilities represents the association between ManagedElements and their Capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMICLPElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIRBAElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRBAElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LCElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''An association class derived from ElementCapabilities that represents the association between the LifeCycle Log Capabilities and the LifeCycle Log. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRBAElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRBAElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalUserElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''DCIM_LocalUserElementCapabilities is a derivation of CIM_ElementCapabilities. ElementCapabilities represents the association between ManagedElements and their Capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalUserElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_PMSElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''ElementCapabilities represents the association between ManagedElements and their Capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PMSElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SELElementCapabilities__(__BaseClass__, __CIM_ElementCapabilities__):
    '''An association class derived from ElementCapabilities that represents the association between the System Event Log Capabilities and the System Event Log. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELElementCapabilities'
        self.__parent__ = 'CIM_ElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_ElementConformsToProfile__(__BaseClass__, __CIM_ElementConformsToProfile__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ElementConformsToProfile'
        self.__parent__ = 'CIM_ElementConformsToProfile'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LCElementConformsToProfile__(__BaseClass__, __CIM_ElementConformsToProfile__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCElementConformsToProfile'
        self.__parent__ = 'CIM_ElementConformsToProfile'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_OSDElementConformsToProfile__(__BaseClass__, __CIM_ElementConformsToProfile__):
    '''DCIM_OSDElementConformsToProfile is a derivation of CIM_ElementConformsToProfile )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_OSDElementConformsToProfile'
        self.__parent__ = 'CIM_ElementConformsToProfile'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_ProcessIndication__(__BaseClass__, __CIM_Indication__):
    '''An abstract superclass for specialized Indication classes, addressing specific changes and alerts published by providers and instrumentation. Subclasses include AlertIndication (with properties such as PerceivedSeverity and ProbableCause), and SNMPTrapIndication (which recasts Traps as CIM indications). )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ProcessIndication'
        self.__parent__ = 'CIM_Indication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_AlertIndication__(__BaseClass__, __CIM_ProcessIndication__):
    '''A concrete superclass for CIM Alert notifications. An AlertIndication is a specialized type of CIM_Indication that contains information about the severity, cause, recommended actions and other data of a real world event. This event and its data may or may not be modeled in the CIM class hierarchy. )

Class Properties:
    uint16 AlertingElementFormat = 0        :    The format of the AlertingManagedElement property is interpretable based upon the value of this property. Values are defined as: \n0 - Unknown. The format is unknown or not meaningfully interpretable by a CIM client application. \n1 - Other. The format is defined by the value of the OtherAlertingElementFormat property. \n2 - CIMObjectPath. The format is a CIMObjectPath, with format <NamespacePath>:<ClassName>.<Prop1>=<Value1>, <Prop2>=<Value2>, . . . specifying an instance in the CIM Schema.
    uint16 AlertType                        :    Primary classification of the Indication. The following values are defined: \n1 - Other. The Indications OtherAlertType property conveys its classification. Use of Other in an enumeration is a standard CIM convention. It means that the current Indication does not fit into the categories described by this enumeration. \n2 - Communications Alert. An Indication of this type is principally associated with the procedures and/or processes required to convey information from one point to another. \n3 - Quality of Service Alert. An Indication of this type is principally associated with a degradation or errors in the performance or function of an entity. \n4 - Processing Error. An Indication of this type is principally associated with a software or processing fault. \n5 - Device Alert. An Indication of this type is principally associated with an equipment or hardware fault. \n6 - Environmental Alert. An Indication of this type is principally associated with a condition relating to an enclosure in which the hardware resides, or other environmental considerations. \n7 - Model Change. The Indication addresses changes in the Information Model. For example, it may embed a Lifecycle Indication to convey the specific model change being alerted. \n8 - Security Alert. An Indication of this type is associated with security violations, detection of viruses, and similar issues.
    string AlertingManagedElement           :    The identifying information of the entity (ie, the instance) for which this Indication is generated. The property contains the path of an instance, encoded as a string parameter - if the instance is modeled in the CIM Schema. If not a CIM instance, the property contains some identifying string that names the entity for which the Alert is generated. The path or identifying string is formatted per the AlertingElementFormat property.
    string Description                      :    A short description of the Indication.
    uint32 EventID                          :    An instrumentation or provider specific value that describes the underlying real-world event represented by the Indication. Two Indications with the same, non NULL EventID value are considered, by the creating entity, to represent the same event. The comparison of two EventID values is only defined for Alert Indications with identical, non NULL values of SystemCreateClassName, SystemName and ProviderName.
    datetime EventTime                      :    The time and date the underlying event was first detected. If specified, this property MUST be set to NULL if the creating entity is not capable of providing this information. This value is based on the notion of local date and time of the Managed System Element generating the Indication.
    string Message                          :    The formatted message. This message is constructed by combining some or all of the dynamic elements specified in the MessageArguments property with the static elements uniquely identified by the MessageID in a message registry or other catalog associated with the OwningEntity.
    string MessageArguments[]               :    An array containing the dynamic content of the message.
    string MessageID                        :    A string that uniquely identifies, within the scope of the OwningEntity, the format of the Message.
    string OtherAlertType                   :    A string describing the Alert type - used when the AlertType property is set to 1, Other State Change.
    string OtherAlertingElementFormat       :    A string defining Other values for AlertingElementFormat. This value MUST be set to a non NULL value when AlertingElementFormat is set to a value of 1 (Other). For all other values of AlertingElementFormat, the value of this string must be set to NULL.
    string OwningEntity                     :    A string that uniquely identifies the entity that owns the definition of the format of the Message described in this instance. OwningEntity MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity or standards body defining the format.
    uint16 PerceivedSeverity                :    An enumerated value that describes the severity of the Alert Indication from the notifiers point of view: \n1 - Other, by CIM convention, is used to indicate that the Severitys value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but its too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the AlertIndication is purely informational or its severity is simply unknown.
    uint16 ProbableCause                    :    An enumerated value that describes the probable cause of the situation which resulted in the AlertIndication.
    string ProbableCauseDescription         :    Provides additional information related to the ProbableCause.
    string ProviderName                     :    The name of the Provider generating this Indication.
    string RecommendedActions[]             :    Free form descriptions of the recommended actions to take to resolve the cause of the notification.
    string SystemCreationClassName          :    The scoping Systems CreationClassName for the Provider generating this Indication.
    string SystemName                       :    The scoping Systems Name for the Provider generating this Indication.
    uint16 Trending                         :    Provides information on trending - trending up, down or no change.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AlertIndication'
        self.__parent__ = 'CIM_ProcessIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_AlertIndication__(__BaseClass__, __CIM_AlertIndication__):
    '''DCIM_AlertIndication is a derivation of CIM_ProcessIndication. )

Class Properties:
    uint16  AlertType                       :    The type of the alert
    string  Category                        :    Category of event 
    string  Description                     :    Description of the Lifecycle job
    uint32 EventID                          :    The Event ID
    string FQDD                             :    The Fully qualified domain name 
    datetime    IndicationTime              :    No documentation.
    string Message                          :    The alert message string
    string  MessageArguments[]              :    The message arguments of the event
    string MessageID                        :    The alert message ID string
    string  OtherAlertType                  :    A string describing the Alert type - used when the AlertType property is set to 1, Other State Change.
    uint16  PerceivedSeverity               :    The severity of the indication 
    uint16  Severity                        :    The severity of the indication 
    string  SubCategory                     :    Category of event 
    string SystemFQDN                       :    The system FQDN 
    string SystemServicetag                 :    The system service tag 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AlertIndication'
        self.__parent__ = 'CIM_AlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LifecycleJobAlertIndication__(__BaseClass__, __CIM_AlertIndication__):
    '''DCIM_LifecycleJobAlertIndication is a derivation of CIM_ProcessIndication. )

Class Properties:
    uint16  AlertType                       :    The type of the alert
    string  Description                     :    Description of the Lifecycle job
    datetime    IndicationTime              :    The time at which indication is generated
    string  JobID                           :    The ID of the job 
    string  JobName                         :    The name of the job 
    string  JobStatus                       :    The job status
    uint16  JobType                         :    The type of the job 
    string  Message                         :    The message of the job
    string  MessageArguments[]              :    The message arguments of the job
    string  MessageID                       :    The message id of the job
    string  OtherAlertType                  :    A string describing the Alert type - used when the AlertType property is set to 1, Other State Change.
    uint16  PerceivedSeverity               :    The severity of the indication 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobAlertIndication'
        self.__parent__ = 'CIM_AlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LifecycleJobCreateAlertIndication__(__BaseClass__, __DCIM_LifecycleJobAlertIndication__):
    '''DCIM_LifecycleJobUpdateAlertIndication is a derivation of DCIM_LifecycleJobAlertIndication. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobCreateAlertIndication'
        self.__parent__ = 'DCIM_LifecycleJobAlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LifecycleJobDeleteAlertIndication__(__BaseClass__, __DCIM_LifecycleJobAlertIndication__):
    '''DCIM_LifecycleJobDeleteAlertIndication is a derivation of DCIM_LifecycleJobAlertIndication. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobDeleteAlertIndication'
        self.__parent__ = 'DCIM_LifecycleJobAlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LifecycleJobGarbageCollectionAlertIndication__(__BaseClass__, __DCIM_LifecycleJobAlertIndication__):
    '''DCIM_LifecycleJobGarbageCollectionAlertIndication is a derivation of DCIM_LifecycleJobAlertIndication. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobGarbageCollectionAlertIndication'
        self.__parent__ = 'DCIM_LifecycleJobAlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LifecycleJobUpdateAlertIndication__(__BaseClass__, __DCIM_LifecycleJobAlertIndication__):
    '''DCIM_LifecycleJobUpdateAlertIndication is a derivation of DCIM_LifecycleJobAlertIndication. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJobUpdateAlertIndication'
        self.__parent__ = 'DCIM_LifecycleJobAlertIndication'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCLogManagesRecord__(__BaseClass__, __CIM_LogManagesRecord__):
    '''A class derived from LogManagesRecord that associates the LifeCycle Record Log to the LifeCycle Log Entry. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCLogManagesRecord'
        self.__parent__ = 'CIM_LogManagesRecord'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SELLogManagesRecord__(__BaseClass__, __CIM_LogManagesRecord__):
    '''A class derived from LogManagesRecord that associates the System Event Record Log to the System Event Log Entry. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELLogManagesRecord'
        self.__parent__ = 'CIM_LogManagesRecord'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSAttribute__(__BaseClass__, __CIM_ManagedElement__):
    '''A class derived from ManagedElement that provides instrumentation of BIOS configuration data or Attributes of a managed computer system or device. These attributes are surfaced in the form of BIOSAttribute instances. The CIM_BIOSAttribute object may be used to represent both configurable and static BIOS attributes. )

Class Properties:
    string AttributeName                    :    A string identifying the structured element name for a BIOS attribute using the format <OrgID>:<identifier> in which <OrgID>, does contain a colon (:). The value of <OrgID> is a copyrighted, trademarked or otherwise unique name that is owned by the entity defining the <identifier>, or is a registered ID that is assigned to the entity by a recognized global authority. For DMTF defined identifiers, the <OrgID> is set to DMTF and the <identifier> is specified in the BIOS Attribute Registry.
    string CurrentValue[]                   :    An array of strings representing the current value or values of the BIOS Attribute.
    string DefaultValue[]                   :    An array of strings representing the default value or values of the BIOS Attribute.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following &apos;preferred&apos; algorithm: <OrgID>:<LocalID>Where <OrgID> and <LocalID> are separated by a colon &apos;:&apos;, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (&apos;:&apos;). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. <LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above &apos;preferred&apos; algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. For DMTF defined instances, the &apos;preferred&apos; algorithm MUST be used with the <OrgID> set to &apos;CIM&apos;.
    boolean IsOrderedList                   :    This property specifies that the Attribute represented makes up an ordered selection list with elements in the CurrentValue array. The element zero shall be first or least numbered element and incrementally increase to the end of the array. The least or first element may represent the highest priority in the ordered list.
    boolean IsReadOnly                      :    This property specifies if the underlying system BIOS or BIOSService will not allow the Attribute to be modified through calls tothe methods CIM_BIOSService.SetBIOSAttribute or CIM_BIOSService.SetBIOSDefaults. This does not mean the Attribute can not be modified through other means. Only that the CIM interfaceis not capable of making a change
    string PendingValue[]                   :    An array of strings representing a pending Attribute value that will not take affect until some point in the future. This would typically be used to represent Attributes that could not be changed until a system reset. When a BIOS attribute has no pending changes, PendingValue SHALL be NULL. PendingValue SHALL have a value of at least one element from the CIM_BIOSEnumeration.PossibleValues array when the an instance of the central class represents an enumeration.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSAttribute'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BaseMetricDefinition__(__BaseClass__, __CIM_ManagedElement__):
    '''CIM_BaseMetricDefinition represents the definitional aspects of a metric, i.e., a definition template containing meta data about a new metric. Since CIM_BaseMetricDefinition does not capture metric instance information, it does not contain the value of the metric. The associated class CIM_BaseMetricValue holds the metric value and encapsulates its runtime behavior. The purpose of CIM_BaseMetricDefinition is to provide a convenient mechanism for introducing a new metric definition at runtime and capturing its instance values in a separate class. This mechanism is targeted specifically at CIM users who would like to enhance existing CIM schemas by introducing domain-specific metrics that are not captured in the existing CIM schemas. In addition, vendors of managed resources may make use of this mechanism if a small subset of a potentially large and heterogeneous amount of performance-related data needs to be exposed, based on the context in which the data is captured. Additional meta data for a metric can be provided by subclassing from CIM_BaseMetricDefinition. The CIM_BaseMetricDefinition should be associated with the CIM_ManagedElement(s) to which it applies. )

Class Properties:
    string BreakdownDimensions[]            :    Defines one or more strings that can be used to refine (break down) queries against the BaseMetricValues along a certain dimension. An example is a transaction name, allowing the break down of the total value for all transactions into a set of values, one for each transaction name. Other examples might be application system or user group name. The strings are free format and should be meaningful to the end users of the metric data. The strings indicate which break down dimensions are supported for this metric definition, by the underlying instrumentation.
    uint16 Calculable                       :    An enumerated value that describes the characteristics of the metric, for purposes of performing calculations. The property can take one of the following values: \n1=Non-calculable -> a string. Arithmetic makes no sense. \n2=Summable -> It is reasonable to sum this value over many instances of e.g., UnitOfWork, such as the number of files processed in a backup job. For example, if each backup job is a UnitOfWork, and each job backs up 27,000 files on average, then it makes sense to say that 100 backup jobs processed 2,700,000 files. \n3=Non-summable -> It does not make sense to sum this value over many instances of UnitOfWork. An example would be a metric that measures the queue length when a job arrives at a server. If each job is a UnitOfWork, and the average queue length when each job arrives is 33, it does not make sense to say that the queue length for 100 jobs is 3300. It does make sense to say that the mean is 33.
    uint16 ChangeType                       :    ChangeType indicates how the metric value changes, in the form of typical combinations of finer grain attributes such as direction change, minimum and maximum values, and wrapping semantics. \n0=Unknown: The metric designer did not qualify the ChangeType. \n2=N/A: If the IsContinuous property is false, ChangeType does not make sense and MUST be is set to N/A. \n3=Counter: The metric is a counter metric. These have non-negative integer values which increase monotonically until reaching the maximum representable number and then wrap around and start increasing from 0. Such counters, also known as rollover counters, can be used for instance to count the number of network errors or the number of transactions processed. The only way for a client application to keep track of wrap arounds is to retrieve the value of the counter in appropriately short intervals. \n4=Gauge: The metric is a gauge metric. These have integer or float values that can increase and decrease arbitrarily. A gauge MUST NOT wrap when reaching the minimum or maximum representable number, instead, the value sticks at that number. Minimum or maximum values inside of the representable value range at which the metric value sticks, may or may not be defined. \nVendors may extend this property in the vendor reserved range.
    uint16 DataType                         :    The data type of the metric. For example, boolean (value=1) or datetime (=3) may be specified. These types represent the datatypes defined for CIM.
    uint16 GatheringType                    :    GatheringType indicates how the metric values are gathered by the underlying instrumentation. This allows the client application to choose the right metric for the purpose. \n0=Unknown: Indicates that the GatheringType is not known. \n2=OnChange: Indicates that the CIM metric values get updated immediately when the values inside of the measured resource change. The values of OnChange metrics truly reflect the current situation within the resource at any time. An example is the number of logged on users that gets updated immediately as users log on and off. \n3=Periodic: Indicates that the CIM metric values get updated periodically. For instance, to a client application, a metric value applying to the current time will appear constant during each gathering interval, and then jumps to the new value at the end of each gathering interval. \n4=OnRequest: Indicates that the CIM metric value is determined each time a client application reads it. The values of OnRequest metrics truly return the current situation within the resource if somebody asks for it. However, they do not change unobserved, and therefore subscribing for value changes of OnRequest metrics is NOT RECOMMENDED.
    string Id                               :    A string that uniquely identifies the metric definition. The use of OSF UUID/GUIDs is recommended.
    boolean IsContinuous                    :    IsContinuous indicates whether or not the metric value is continuous or scalar. Performance metrics are an example of a linear metric. Examples of non-linear metrics include error codes or operational states. Continuous metrics can be compared using the greater than relation.
    string Name                             :    The name of the metric. This name does not have to be unique, but should be descriptive and may contain blanks.
    string ProgrammaticUnits                :    Identifies the specific units of a value. The value of this property shall be a legal value of the Programmatic Units qualifier as defined in Appendix C.1 of DSP0004 V2.4 or later.
    uint16 TimeScope                        :    TimeScope indicates the time scope to which the metric value applies. \n0=Unknown indicates the time scope was not qualified by the metric designer, or is unknown to the provider. \n2=Point indicates that the metric applies to a point in time. On the corresponding BaseMetricValue instances, TimeStamp specifies the point in time and Duration is always 0. \n3=Interval indicates that the metric applies to a time interval. On the corresponding BaseMetricValue instances, TimeStamp specifies the end of the time interval and Duration specifies its duration. \n4=StartupInterval indicates that the metric applies to a time interval that began at the startup of the measured resource (i.e. the ManagedElement associated by MetricDefForMe). On the corresponding BaseMetricValue instances, TimeStamp specifies the end of the time interval. If Duration is 0, this indicates that the startup time of the measured resource is unknown. Else, Duration specifies the duration between startup of the resource and TimeStamp.
    string Units                            :    Identifies the specific units of a value. Examples are Bytes, Packets, Jobs, Files, Milliseconds, and Amps.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BaseMetricDefinition'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BaseMetricValue__(__BaseClass__, __CIM_ManagedElement__):
    '''Each CIM_BaseMetricValue object represents the instance value of a metric. Since the gathering of metric information can involve large quantities of information there may be many instances of this class. The use of this class as an instrumentation source may be inefficient unless the rate of metrics are known. The length of time a CIM_BaseMetricValue instance exists after the metric information is captured is not defined and is implementation dependent. \n Most metric data values change over time. There are two ways of mapping this into CIM_BaseMetricValue objects: The value for the next point in time may use the same object and just change its properties (such as the value or timestamp), or the existing objects remain unchanged and a new object is created for the new point in time. The first method is typically used for snapshot data and the second method for historical data. Which method is used, is indicated by the Volatile property. )

Class Properties:
    string BreakdownDimension               :    If present, specifies one BreakdownDimension from the BreakdownDimensions array defined in the associated CIM_ BaseMetricDefinition. This is the dimension along which this set of metric values is broken down. For a description of the concept, see the class CIM_BaseMetricDefinition.
    string BreakdownValue                   :    Defines a value of the BreakdownDimension property defined for this metric value instance. For instance, if the BreakdownDimension is TransactionName, this property could name the actual transaction to which this particular metric value applies.
    datetime Duration                       :    Property that represents the time duration over which this metric value is valid. This property should not exist for timestamps that apply only to a point in time but should be defined for values that are considered valid for a certain time period (ex. sampling). If the Duration property exists and is nonNull, the TimeStamp is to be considered the end of the interval.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n: \nWhere and are separated by a colon :, and where MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between and . \nis chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the set to CIM.
    string MeasuredElementName              :    A descriptive name for the element to which the metric value belongs (i.e., the measured element). This property is required by behavior if there is no association defined to a ManagedElement, but may be used in other cases to provide supplemental information. This allows metrics to be captured independently of any ManagedElement. An example is where a metric value belongs to a combination of elements, such as the input and output ports of the traffic in a switch. If there are multiple ManagedElements associated with the metric value, then usually there is one that naturally belongs to the metric value and that one should be used to create the supplemental information. The property is not meant to be used as a foreign key to search on the measured element. Instead, the association to the ManagedElement should be used.
    string MetricDefinitionId               :    The key of the BaseMetricDefinition instance for this CIM_BaseMetricValue instance value.
    string MetricValue                      :    The value of the metric represented as a string. Its original data type is specified in CIM_BaseMetricDefinition.
    datetime TimeStamp                      :    Identifies the time when the value of a metric instance is computed. Note that this is different from the time when the instance is created. For a given CIM_BaseMetricValue instance, the TimeStamp changes whenever a new measurement snapshot is taken if Volatile is true. A managmenet application may establish a time series of metric data by retrieving the instances of CIM_BaseMetricValue and sorting them according to their TimeStamp.
    boolean Volatile                        :    If true, Volatile indicates that the value for the next point in time may use the same object and just change its properties (such as the value or timestamp). If false, the existing objects remain unchanged and a new object is created for the new point in time.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BaseMetricValue'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Capabilities__(__BaseClass__, __CIM_ManagedElement__):
    '''Capabilities is an abstract class whose subclasses describe abilities and/or potential for use. For example, one may describe the maximum number of VLANs that can be supported on a system using a subclass of Capabilities. Capabilities are tied to the elements which they describe using the ElementCapabilities association. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities. Note that Capabilities do not indicate what IS configured or operational, but what CAN or CANNOT exist, be defined or be used. Note that it is possible to describe both supported and excluded abilities and functions (both capabilities and limitations) using this class. )

Class Properties:
    string ElementName                      :    The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Capabilities'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Collection__(__BaseClass__, __CIM_ManagedElement__):
    '''Collection is an abstract class that provides a common superclass for data elements that represent collections of ManagedElements and its subclasses. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Collection'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Identity__(__BaseClass__, __CIM_ManagedElement__):
    '''An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. (Note that the Identity s scope is specified using the association, CIM_IdentityContext.) ManagedElements with Identities can be OrganizationalEntities, Services, Systems, etc. The ManagedElement behind an Identity is described using the AssignedIdentity association. \n \n Within a given security context, an Identity may be imparted a level of trust, usually based on its credentials. A trust level is defined using the CIM_SecuritySensitivity class, and associated with Identity using CIM_ElementSecuritySensitivity. Whether an Identity is currently authenticated is evaluated by checking the CurrentlyAuthenticated boolean property. This property is set and cleared by the security infrastructure, and should only be readable within the management infrastructure. The conditions which must be met/authenticated in order for an Identity s CurrentlyAuthenticated Boolean to be TRUE are defined using a subclass of PolicyCondition - AuthenticationCondition. The inheritance tree for AuthenticationCondition is defined in the CIM Policy Model. \n \n Subclasses of Identity may include specific information related to a given AuthenticationService or authority (such as a security token or computer hardware port/communication details) that more specifically determine the authenticity of the Identity. An instance of Identity may be persisted even though it is not CurrentlyAuthenticated, in order to maintain static relationships to Roles, associations to accounting information, and policy data defining authentication requirements. Note however, when an Identity is not authenticated (CurrentlyAuthenticated = FALSE), then Privileges or rights SHOULD NOT be authorized. The lifetime, validity, and propagation of the Identity is dependent on a security infrastructure s policies. )

Class Properties:
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
    boolean CurrentlyAuthenticated = false  :    Boolean indicating whether this Identity has been authenticated, and is currently known within the scope of an AuthenticationService or authority. By default, authenticity SHOULD NOT be assumed. This property is set and cleared by the security infrastructure, and should only be readable within the management infrastructure. Note that its value, alone, may not be sufficient to determine authentication/ authorization, in that properties of an Identity subclass (such as a security token or computer hardware port/ communication details) may be required by the security infrastructure.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Identity'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_ManagedSystemElement__(__BaseClass__, __CIM_ManagedElement__):
    '''CIM_ManagedSystemElement is the base class for the System Element hierarchy. Any distinguishable component of a System is a candidate for inclusion in this class. Examples of system components include: \n - software components such as application servers, databases, and applications \n - operating system components such as files, processes, and threads \n - device components such as disk drives, controllers, processors, and printers \n - physical components such as chips and cards. )

Class Properties:
    uint16 CommunicationStatus              :    CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \nUnknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \nNot Available indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \nCommunication OK  indicates communication is established with the element, but does not convey any quality of service. \nNo Contact indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \nLost Communication indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
    uint16 DetailedStatus                   :    DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \nNot Available indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \nNo Additional Information indicates that the element is functioning normally as indicated by PrimaryStatus = OK. \nStressed indicates that the element is functioning, but needs attention. Examples of Stressed states are overload, overheated, and so on. \nPredictive Failure indicates that an element is functioning normally but a failure is predicted in the near future. \nNon-Recoverable Error  indicates that this element is in an error condition that requires human intervention. \nSupporting Entity in Error indicates that this element might be OK but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
    uint16 HealthState                      :    Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \nNon-recoverable Error (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \nCritical Failure (25) - The element is non-functional and recovery might not be possible. \nMajor Failure (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \nMinor Failure (15) - All functionality is available but some might be degraded. \nDegraded/Warning (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \nOK (5) - The element is fully functional and is operating within normal operational parameters and without error. \nUnknown (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
    datetime InstallDate                    :    A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
    string Name                             :    The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
    uint16 OperatingStatus                  :    OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \nUnknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \nNone indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \nServicing describes an element being configured, maintained, cleaned, or otherwise administered. \nStarting describes an element being initialized. \nStopping describes an element being brought to an orderly stop. \nStopped and Aborted are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \nDormant indicates that the element is inactive or quiesced. \nCompleted indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \nMigrating element is being moved between host elements. \nImmigrating element is being moved to new host element. \nEmigrating element is being moved away from host element. \nShutting Down describes an element being brought to an abrupt stop. \nIn Test element is performing test functions. \nTransitioning describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\nIn Service describes an element that is in service and operational.
    uint16 OperationalStatus[]              :    Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumerations values are self-explanatory. However, a few are not and are described here in more detail. \nStressed indicates that the element is functioning, but needs attention. Examples of Stressed states are overload, overheated, and so on. \nPredictive Failure indicates that an element is functioning nominally but predicting a failure in the near future. \nIn Service describes an element being configured, maintained, cleaned, or otherwise administered. \nNo Contact indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \nLost Communication indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \nStopped and Aborted are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \nDormant indicates that the element is inactive or quiesced. \nSupporting Entity in Error indicates that this element might be OK but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \nCompleted indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \nPower Mode indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nRelocating indicates the element is being relocated.\nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from todays environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
    uint16 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \nOK indicates the ManagedElement is functioning normally. \nDegraded indicates the ManagedElement is functioning below normal. \nError indicates the ManagedElement is in an Error condition.
    string Status                           :    A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
    string StatusDescriptions[]             :    Strings describing the various OperationalStatus array values. For example, if Stopping is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ManagedSystemElement'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Privilege__(__BaseClass__, __CIM_ManagedElement__):
    '''Privilege is the base class for all types of activities which are granted or denied by a Role or an Identity. Whether an individual Privilege is granted or denied is defined using the PrivilegeGranted boolean. Any Privileges not specifically granted are assumed to be denied. An explicit deny (Privilege Granted = FALSE) takes precedence over any granted Privileges. \n \n The association of subjects (Roles and Identities) to Privileges is accomplished using policy or explicitly via the associations on a subclass. The entities that are protected (targets) can be similarly defined. \n \n Note that Privileges may be inherited through hierarchical Roles, or may overlap. For example, a Privilege denying any instance Writes in a particular CIM Server Namespace would overlap with a Privilege defining specific access rights at an instance level within that Namespace. In this example, the AuthorizedSubjects are either Identities or Roles, and the AuthorizedTargets are a Namespace in the former case, and a particular instance in the latter. )

Class Properties:
    uint16 Activities[]                     :    An enumeration indicating the activities that are granted or denied. These activities apply to all entities specified in the ActivityQualifiers array. The values in the enumeration are straightforward except for one, 4=Detect. This value indicates that the existence or presence of an entity may be determined, but not necessarily specific data (which requires the Read privilege to be true). This activity is exemplified by hidden files- if you list the contents of a directory, you will not see hidden files. However, if you know a specific file name, or know how to expose hidden files, then they can be detected. Another example is the ability to define search privileges in directory implementations.
    string ActivityQualifiers[]             :    The ActivityQualifiers property is an array of string values used to further qualify and specify the privileges granted or denied. For example, it is used to specify a set of files for which Read/Write access is permitted or denied. Or, it defines a class methods that may be Executed. Details on the semantics of the individual entries in ActivityQualifiers are provided by corresponding entries in the QualifierFormats array.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. For DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
    uint16 QualifierFormats[]               :    Defines the semantics of corresponding entries in the ActivityQualifiers array. An example of each of these formats and their use follows: \n- 2=Class Name. Example: If the authorization target is a CIM Service or a Namespace, then the ActivityQualifiers entries can define a list of classes that the authorized subject is able to create or delete. \n- 3=<Class.>Property. Example: If the authorization target is a CIM Service, Namespace or Collection of instances, then the ActivityQualifiers entries can define the class properties that may or may not be accessed. In this case, the class names are specified with the property names to avoid ambiguity - since a CIM Service, Namespace or Collection could manage multiple classes. On the other hand, if the authorization target is an individual instance, then there is no possible ambiguity and the class name may be omitted. To specify ALL properties, the wildcard string * should be used. \n- 4=<Class.>Method. This example is very similar to the Property one, above. And, as above, the string * may be specified to select ALL methods. \n- 5=Object Reference. Example: If the authorization target is a CIM Service or Namespace, then the ActivityQualifiers entries can define a list of object references (as strings) that the authorized subject can access. \n- 6=Namespace. Example: If the authorization target is a CIM Service, then the ActivityQualifiers entries can define a list of Namespaces that the authorized subject is able to access. \n- 7=URL. Example: An authorization target may not be defined, but a Privilege could be used to deny access to specific URLs by individual Identities or for specific Roles, such as the under 17 Role. \n- 8=Directory/File Name. Example: If the authorization target is a FileSystem, then the ActivityQualifiers entries can define a list of directories and files whose access is protected. \n- 9=Command Line Instruction. Example: If the authorization target is a ComputerSystem or Service, then the ActivityQualifiers entries can define a list of command line instructions that may or may not be Executed by the authorized subjects. \n- 10=SCSI Command, using a format of CDB=xx[,Page=pp]. For example, the ability to select the VPD page of the Inquiry command is encoded as CDB=12,Page=83 in the corresponding ActivityQualifiers entry. A * may be used to indicate all CDBs or Page numbers. \n- 11=Packets. Example: The transmission of packets is permitted or denied by the Privilege for the target (a ComputerSystem, ProtocolEndpoint, Pipe, or other ManagedSystemElement).
    boolean RepresentsAuthorizationRights = false:    The RepresentsAuthorizationRights flag indicates whether the rights defined by this instance should be interpreted as rights of Subjects to access Targets or as rights of Subjects to change those rights on/for Targets.
    boolean PrivilegeGranted = true         :    Boolean indicating whether the Privilege is granted (TRUE) or denied (FALSE). The default is to grant permission.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Privilege'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RecordForLog__(__BaseClass__, __CIM_ManagedElement__):
    '''The RecordForLog class is used to instantiate records to be aggregated to a Log. )

Class Properties:
    string Locale                           :    A locale indicates a particular geographical, political, or cultural region. The Locale specifies the language used in creating the RecordForLog data. If the Locale property is empty, it is assumed that the default locale is en_US (English). \nThe locale string consists of three sub-strings, separated by underscores: \n- The first sub-string is the language code, as specified in ISO639. \n- The second sub-string is the country code, as specified in ISO3166. \n- The third sub-string is a variant, which is vendor specific. \nFor example, US English appears as: en_US_WIN, where the WIN variant would specify a Windows browser-specific collation (if one exists). Since the variant is not standardized, it is not commonly used and generally is limited to easily recognizable values (WIN, UNIX, EURO, etc.) used in standard environments. The language and country codes are required; the variant may be empty.
    uint16 PerceivedSeverity                :    An enumerated value that describes the severity of the Indication from the notifiers point of view: \n1 - Other, by CIM convention, is used to indicate that the Severitys value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but its too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
    string RecordData                       :    A string containing LogRecord data. \nIf the corresponding RecordFormat property is <empty>, or cannot be parsed according to the recommended format, RecordData should be interpreted as a free-form string. If the RecordFormat property contains parseable format information (as recommended in the RecordFormat Description qualifier), the RecordData string SHOULD be parsed in accordance with this format. In this case, RecordData SHOULD begin with the delimiter character and this character SHOULD be used to separate substrings in the manner described. The RecordData string can then be parsed by the data consumer and appropriately typed.
    string RecordFormat                     :    A string describing the data structure of the information in the property, RecordData. If the RecordFormat string is <empty>, RecordData should be interpreted as a free-form string. \n\nTo describe the data structure of RecordData, the RecordFormat string should be constructed as follows: \n- The first character is a delimiter character and is used to parse the remainder of the string into sub-strings. \n- Each sub-string is separated by the delimiter character and should be in the form of a CIM property declaration (i.e., datatype and property name). This set of declarations may be used to interpret the similarly delimited RecordData property. \nFor example, using a * delimiter, RecordFormat = *string ThisDay*uint32 ThisYear*datetime SomeTime \nmay be used to interpret: RecordData = *This is Friday*2002*20020807141000.000000-300.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RecordForLog'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RegisteredSpecification__(__BaseClass__, __CIM_ManagedElement__):
    '''A RegisteredSpecification is used to advertise the implementation of a specification within a WBEM server. The specification may be authored by the DMTF or another standards organization. In this context, specification is used to describe a named and versioned set of constraints. There may be a one to one correspondence between the set of constraints and the document in which they are published. An example of a one to one correspondence is the mechanism used by the DMTF to publish its profiles. An example of one to many documents to specifications is an SMI-S book published by SNIA. )

Class Properties:
    string AdvertiseTypeDescriptions[]      :    A free-form string identifying the requested network advertisement for specification information for cases where the predefined values in AdvertiseTypes are not sufficient. Each entry in this array corresponds to the entry in the AdvertiseTypes array at the same index, and the two arrays shall have the same number of entries. A non-Null value shall be provided for each array entry that corresponds to an AdvertiseTypes entry with a value of 1 (Other). Other array entries should be Null.
    uint16 AdvertiseTypes[]                 :    This property identifies the requested network advertisement for specification information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the specification may be advertised using several mechanisms. If an array entry has a value of 2 (Not Advertised), this shall be the only array entry.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID shall be constructed using the following preferred algorithm: \n: \nWhere and are separated by a colon :, and where shall include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the _ structure of Schema class names.) In addition, to ensure uniqueness, shall not contain a colon (:). The first colon to appear in InstanceID shall appear between and . is chosen by the organizational entity and should not be re-used to identify different underlying (real-world) elements. \nFor DMTF defined instances, shall be set to CIM.
    string OtherRegisteredOrganization      :    OtherRegisteredOrganization shall be a a free-form string providing a description of the organization if 1, Other is specified for the RegisteredOrganization.
    string OtherSpecificationType           :    OtherSpecificationType shall be a a free-form string providing a description of the specification type if 1, Other is specified for the SpecificationType.
    string RegisteredName                   :    The name of this registered specification. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion shall uniquely identify the registered specification within the scope of the organization. \nThe value of this property shall correspond to the name given to the set of versioned constraints by a specification or standard. The value does not identify the name of the document or publishing media, unless it happens to be the same as the name given to the versioned constraints.
    uint16 RegisteredOrganization           :    The organization that defines this specification. \nThe Green Grid identifies The Green Grid Association
    string RegisteredVersion                :    The version describing the creation or last modificationof the specification. The string representing the version shall be in the form: \nM + . + N + . + U \nWhere: \nM - The major version (in numeric form). \nN - The minor version (in numeric form). \nU - The update (e.g. errata, patch, ..., in numeric form).
    uint16 SpecificationType                :    The type of specification.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RegisteredSpecification'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_SettingData__(__BaseClass__, __CIM_ManagedElement__):
    '''CIM_SettingData is used to represent configuration and and operational parameters for CIM_ManagedElement instances. There are a number of different uses of CIM_SettingData supported in the model today. Additional uses may be defined in the future.\n Instances of CIM_SettingData may represent Aspects of a CIM_ManagedElement instance. This is modeled using the CIM_SettingsDefineState association. CIM_SettingData may be used to define capabilities when associated to an instance of CIM_Capabilities through the CIM_SettingsDefineCapabilities association. \n Instances of CIM_SettingData may represent different types of configurations for a CIM_ManagedElement, including persistent configurations, in progress configuration changes, or requested configurations. The CIM_ElementSettingData association is used to model the relationship between a CIM_SettingData instance and the CIM_ManagedElement for which it is a configuration. \n When an instance of CIM_SettingData represents a configuration, the current operational values for the parameters of the element are reflected by properties in the Element itself or by properties in its associations. These properties do not have to be the same values that are present in the SettingData object. For example, a modem might have a SettingData baud rate of 56Kb/sec but be operating at 19.2Kb/sec. \n Note: The CIM_SettingData class is very similar to CIM_Setting, yet both classes are present in the model because many implementations have successfully used CIM_Setting. However, issues have arisen that could not be resolved without defining a new class. Therefore, until a new major release occurs, both classes will exist in the model. Refer to the Core White Paper for additional information. SettingData instances can be aggregated together into higher- level SettingData objects using ConcreteComponent associations. )

Class Properties:
    uint16 ChangeableType                   :    Enumeration indicating the type of setting. 0 Not Changeable - Persistent indicates the instance of SettingData represents primordial settings and shall not be modifiable. 1 Changeable - Transient indicates the SettingData represents modifiable settings that are not persisted. Establishing persistent settings from transient settings may be supported. 2 Changeable - Persistent indicates the SettingData represents a persistent configuration that may be modified. 3 Not Changeable - Transient indicates the SettingData represents a snapshot of the settings of the associated ManagedElement and is not persistent.
    string ConfigurationName                :    An instance of CIM_SettingData may correspond to a well-known configuration that exists for an associated CIM_ManagedElement. If the ConfigurationName property is non-NULL, the instance of CIM_SettingData shall correspond to a well-known configuration for a Managed Element, the value of the ConfigurationName property shall be the name of the configuration, and the ChangeableType property shall have the value 0 or 2. A value of NULL for the ConfigurationName property shall mean that the instance of CIM_SettingData does not correspond to a well-known configuration for a Managed Element or that this information is unknown.
    string ElementName                      :    The user-friendly name for this instance of SettingData. In addition, the user-friendly name can be used as an index property for a search or query. (Note: The name does not have to be unique within a namespace.)
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SettingData'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_StatisticalData__(__BaseClass__, __CIM_ManagedElement__):
    '''CIM_StatisticalData is a root class for any arbitrary collection of statistical data and/or metrics applicable to one or more ManagedElements. These statistics MUST represent the most recent observations and MUST NOT be provided if irrelevant or stale. Note that this class uses a simplified naming/identity algorithm as compared to CIM_StatisticalInformation. )

Class Properties:
    datetime SampleInterval = 00000000000000.000000:000:    Some statistics are sampled at consistent time intervals. This property provides the sample interval so that client applications can determine the minimum time that new statistics should be pulled. If the statistics are not sampled at consistent time intervals, this property must be set to a zero time interval.
    string ElementName                      :    The user friendly name for this instance of StatisticalData. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
    datetime StartStatisticTime             :    The time, relative to managed element where the statistic was collected, when the first measurement was taken. If the statistic is reset, the StartStatisticTime is the time when the reset was performed.
    datetime StatisticTime                  :    The time the most recent measurement was taken, relative to the managed element where the statistic was collected.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_StatisticalData'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'resetselectedstats':self.resetselectedstats,
            }
    def resetselectedstats(self,InputXmlFile=None):
        '''Method to reset one or more of the instance s statistics. The method takes one parameter as input - an array of strings indicating which statistics to reset. If all the statistics in the instance should be reset, the first element of the array MUST be set to All or ALL . If one or more individual statistics should be reset, the corresponding property names are entered into the elements of the array. \n The method returns 0 if successful, 1 if not supported, and any other value if an error occurred. A method is specified so that the StatisticalInformation s provider/ instrumentation, which calculates the statistics, can reset its internal processing, counters, etc. \n In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ResetSelectedStats',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ResetSelectedStats',{}))
class __CIM_View__(__BaseClass__, __CIM_ManagedElement__):
    '''View is an abstract class that provides a common superclass for classes providing de-normalized, aggregate representations of managed resources. The definition of each sub-class will include properties propagated from the the graph of classes that are used to model the resource in the normalized view. The classes may be resource classes or associations. The definition of how a value is propagated (i.e. source class and value transformations) is required to be specified. \n Sub-classes may be explicitly constrained to be read only. If a sub-class is not constrained as read only, the designers are strongly encouraged to carefully consider the data synchronization and consistencies issues that may result. The ElementView association may be used to find the instances that form the normalized view of the managed resource. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_View'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EventFilter__(__BaseClass__, __CIM_ManagedElement__):
    ''')

Class Properties:
    uint16 Action                           :     
    string Category                         :    This property identifies the category
    string InstanceID                       :    Is a unique string identifying platform event filter. 
    uint16 Notification[]                   :     
    string PossibleActionDescriptions[]     :     
    uint16 PossibleActions[]                :     
    string PossibleNotificationDescriptions[]:     
    uint16 PossibleNotifications[]          :     
    string Severity                         :    This category identifies the severity
    string SubCategory                      :    This property identifies the sub-category
    string SubCategoryDescription           :    This property describes the subcategory.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EventFilter'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LicensableDevice__(__BaseClass__, __CIM_ManagedElement__):
    '''DCIM_LicensableDevice is a derivation of CIM_ManagedElement, and represents a device in the system that has registered with the License Manager )

Class Properties:
    string DeviceID                         :    PCI Device ID.
    uint16 DevicePrimaryStatus              :    DevicePrimaryStatus provides a the device status value with, respect to License Management.It should be used in conjunction with DeviceStatusMessage and DeviceStatusMessageID to provide high level and detailed health status of the ManagedElement.DevicePrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Errorcondition. 
    uint32 DeviceState                      :    Defines current device state as it pertains to the license management.
    string DeviceStatusMessage              :    Status message associated with the DevicePrimaryStatus.
    string DeviceStatusMessageID            :    MessageID associated with the DevicePrimaryStatus.
    uint32 DeviceType                       :    Defines device type.
    string FQDD                             :    A string containing the devices unique FQDD. The field contains the device type (e.g. NIC) and location (e.g. SLOT 1)
    string InstanceID                       :    This property is usually set to the FQDD value.
    string LicenseList[]                    :    List of Entitlement IDs for licenses that are assigned to this device.
    string Model                            :    A model description of the the device.
    uint16 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status.It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.RollupStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Errorcondition. 
    string SubsystemID                      :    PCI subsystem ID.
    string SubsystemVendorID                :    PCI subsystem vendor ID.
    string UniqueID                         :    The unique ID for the device to be used for binding with license(s).
    string VendorID                         :    Device manufacture ID, e.g. Broadcom.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LicensableDevice'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_License__(__BaseClass__, __CIM_ManagedElement__):
    '''DCIM_License is a derivation of CIM_ManagedElement, and represents a feature license installed on a system )

Class Properties:
    string AssignedDevices[]                :    List of FQDDs for devices the license is assigned to.
    string DeviceFamilyDeviceID[]           :    List of PCI DeviceIDs of supported devices.
    string DeviceFamilySubsystemID[]        :    List of PCI SubsystemIDs of supported devices.
    string DeviceFamilySubsystemVendorID[]  :    List of PCI SubsystemVendorIDs of supported devices.
    string DeviceFamilyVendorID[]           :    List of PCI VendorIDs of supported devices.
    string EntitlementID                    :    Entitlement ID of the license which is a unique identifier that identifies the license.
    uint16 EvalLicenseTimeRemaining         :    Evaluation License time remaining until expiration.
    string InstanceID                       :    Entitlement ID of the license.
    uint32 LicenseAttributes                :    License bound state: whether license has been bounded to a device.	Upgraded:installed evaluation license is	upgraded from a previously installed	Valid Subcomponent:This value tells the license 	manager that the subsystemvendor and subsystemvendorid	values are valid
    string LicenseDescription[]             :    Defines the solution set enabled by the license in different languages. Example: iDRAC Express.
    uint16 LicenseDuration                  :    The duration of the license in days.
    datetime LicenseEndDate                 :    The starting date the license expires. Valid for leased and site licenses.
    datetime LicenseInstallDate             :    The installation date of the license.
    uint16 LicensePrimaryStatus             :    LicensePrimaryStatus provides a the device status value with, respect to License Management.It should be used in conjunction with LicenseStatusMessage and LicenseStatusMessageID to provide high level and detailed health status of the ManagedElement.LicensePrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Errorcondition. 
    datetime LicenseSoldDate                :    The date the license was created.
    datetime LicenseStartDate               :    The starting date the license is valid. Extracted from license file.
    string LicenseStatusMessage             :    Status message associated with the LicensePrimaryStatus.
    string LicenseStatusMessageID           :    MessageID associated with the LicensePrimaryStatus.
    uint32 LicenseType                      :    License type of the license.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_License'
        self.__parent__ = 'CIM_ManagedElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSEnumeration__(__BaseClass__, __CIM_BIOSAttribute__):
    '''This class extends the CIM_BIOSAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValuesDescription[]      :    An array of free-form strings providing explanations and details behind the entries in the CIM_BIOSEnumeration.PossibleValues array. Note that each entry of this array is related to the entry in PossibleValues array that is located at the same index.
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSEnumeration'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSInteger__(__BaseClass__, __CIM_BIOSAttribute__):
    '''The BIOSInteger object may be used to instantiate and provide detailed information describing BIOS attributeswith integer values. )

Class Properties:
    uint32 ScalarIncrement = 1              :    Specifies the granularity of a scalar Attribute value. The scalar increment is based on the scalar unit being instrumented and returned as a programmaticUnit. For example, if ProgrammaticUnit= Percentage and ScalarIncrement=10 then the scalar value is in increments of 10 percent. It has a default value of 1.
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    string ProgrammaticUnit                 :    Indicates the programmatic unit for the CIM_BIOSAttribute.CurrentValue, CIM_BIOSAttribute.PendingValue, and CIM_BIOSAttribute.DefaultValue Properties when instance of the central class represents an Integer.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSInteger'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSPassword__(__BaseClass__, __CIM_BIOSAttribute__):
    '''The CIM_BIOSPassword object may be used to instantiate detail information about manageable BIOS-based passwords. )

Class Properties:
    string CurrentValue[]                   :    CurrentValue shall return an empty array.
    boolean IsSet                           :    This property returns TRUE if the current password instance is non-blank and FALSE otherwise. This property is provided because the Value property is always defined as NULL for password instances.
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    uint32 PasswordEncoding                 :    PasswordEncoding specifies encoding tag used to denote the format the password string was createdor set with kbd denotes a string in hexadecimal format containing keyboard scan code input. An example of a password structured in this format would be 321539191E1F1F11181320, which is the representation of my password in US English keyboard scan codes. ascii denotes clear text that shall comply with the ASCII character set. Character encodings from   (decimal 32) to ~ (decimal 126) are supported. An example would be my password.pin denotes that only numeric input in ASCII text is allowed for the password instance. An example would be 1234.
    string PendingValue[]                   :    PendingValue shall return an empty array.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSPassword'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSString__(__BaseClass__, __CIM_BIOSAttribute__):
    '''The CIM_BIOSString object may be used to instantiate string-based BIOS attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    uint32 StringType                       :    The StringType property provides management applications with information defining implementations capabilities regarding string values. A value of ASCII indicates a plain text formatting with no tabs formating or bolds, plain text. A value of hex indicates a simple encoding of the numerals 0 to 9 and the letters A to F and is not case sensitive. A value of unicode indicates fully multi-lingual text support. A string BIOS Attribute with value of regex is a regular expression and the CIM_BIOSString.ValueExpression shall be applied to values represented and any value that is attempted to be set by invoking SetBIOSAttribute().
    string ValueExpression                  :    The property denotes a Perl-compatible regular expression (PCRE) syntax to use in validating Attribute values. For a string Attribute where StringType=regex this property shall have a value.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSString'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_FCAttribute is a derivation of CIM_BIOSAttribute. It is used to report Fiber Channel Host Bus Adapter information. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_LCAttribute is a trivial derivation of CIM_BIOSAttribute. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_NICAttribute is a derivation of CIM_BIOSAttribute. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_RAIDAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_RAIDAttribute is a derivation of CIM_BIOSAttribute. )

Class Properties:
    string  FQDD                            :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RAIDAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_SystemAttribute is a derivation of CIM_BIOSAttribute. )

Class Properties:
    string AttributeDisplayName             :    A string containing the Attribute display nameA user-friendly name for the Attribute.
    string Dependency                       :    
    uint16 DisplayOrder                     :    
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the Group display nameA user-friendly name for the Group.
    string GroupID                          :    A string containing the GroupID
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_iDRACCardAttribute__(__BaseClass__, __CIM_BIOSAttribute__):
    '''DCIM_iDRACCardAttribute is a derivation of CIM_BIOSAttribute. )

Class Properties:
    string AttributeDisplayName             :    A string containing the Attribute display nameA user-friendly name for the Attribute.
    string Dependency                       :    
    uint16 DisplayOrder                     :    
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the Group display nameA user-friendly name for the Group.
    string GroupID                          :    A string containing the GroupID
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardAttribute'
        self.__parent__ = 'CIM_BIOSAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BIOSEnumeration__(__BaseClass__, __CIM_BIOSEnumeration__):
    '''DCIM_BIOSEnumeration is a derivation of CIM_BIOSEnumeration. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    uint16 DisplayOrder                     :    Index that denotes the order in which a user interface should display the attribute in the group that the attribute belongs to. 
    string  FQDD                            :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
    string PossibleValuesDescription[]      :    An array of free-form strings providing explanations and details behind the entries in the CIM_BIOSEnumeration.PossibleValues array. Note that each entry of this array is related to the entry in PossibleValues array that is located at the same index.
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BIOSEnumeration'
        self.__parent__ = 'CIM_BIOSEnumeration'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BIOSInteger__(__BaseClass__, __CIM_BIOSInteger__):
    '''DCIM_BIOSInteger is a derivation of CIM_BIOSInteger. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    uint16 DisplayOrder                     :    Index that denotes the order in which a user interface should display the attribute in the group that the attribute belongs to. 
    string  FQDD                            :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BIOSInteger'
        self.__parent__ = 'CIM_BIOSInteger'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BIOSPassword__(__BaseClass__, __CIM_BIOSPassword__):
    '''The DCIM_BIOSPassword is used to instantiate detail information about manageable BIOS-based passwords. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    uint16 DisplayOrder                     :    Index that denotes the order in which a user interface should display the attribute in the group that the attribute belongs to. 
    string  FQDD                            :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
    boolean IsSet                           :    This property shall return TRUE if the PasswordState property has value 2-Installed otherwise this property shall be set to FALSE
    uint16 PasswordState                    :    This property specifies the current state of the password that the attribute represents. Unknown password state is not available, Installed password is currently set or installed, Uninstalled password is currently not set or is uninstalled, Hardware Disabled password is disabled by hardware jumper. 
    string ValueExpression                  :    The property denotes a Perl-compatible regular expression (PCRE) syntax to use in validating Attribute values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BIOSPassword'
        self.__parent__ = 'CIM_BIOSPassword'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BIOSString__(__BaseClass__, __CIM_BIOSString__):
    '''DCIM_BIOSString is a derivation of CIM_BIOSString. )

Class Properties:
    string AttributeDisplayName             :    A string containing the attribute display name.\n This is a user-friendly name for the attribute that can be readily displayed on user interfaces. 
    string Dependency                       :    A string containing the dependency information for the attribute.
    uint16 DisplayOrder                     :    Index that denotes the order in which a user interface should display the attribute in the group that the attribute belongs to. 
    string  FQDD                            :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string GroupDisplayName                 :    A string containing the display name for the grouping of the attributes that the attribute belongs to.\n This is a user-friendly name for the group that can be readily displayed on user interfaces. 
    string GroupID                          :    A string containing the ID for the grouping of the attributes that the attribute belongs to.\n 
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    string ValueExpression                  :    The property denotes a Perl-compatible regular expression (PCRE) syntax to use in validating Attribute values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BIOSString'
        self.__parent__ = 'CIM_BIOSString'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCEnumeration__(__BaseClass__, __DCIM_FCAttribute__):
    '''This class extends the DCIM_FCAttribute base class definition to provide Fiber Channel Host Bus Adapter informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValuesDescription[]      :    An array of free-form strings providing explanations and details behind the entries in the CIM_FCEnumeration.PossibleValues array. Note that each entry of this array is related to the entry in PossibleValues array that is located at the same index.
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCEnumeration'
        self.__parent__ = 'DCIM_FCAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCInteger__(__BaseClass__, __DCIM_FCAttribute__):
    '''The DCIM_FCInteger object may be used to instantiate integer-based Fiber Channel Host Bus Adapter attributes. )

Class Properties:
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCInteger'
        self.__parent__ = 'DCIM_FCAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCString__(__BaseClass__, __DCIM_FCAttribute__):
    '''The DCIM_FCString object may be used to instantiate string-based Fiber Channel Host Bus Adapter attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    string ValueExpression                  :    The property denotes a Perl-compatible regular expression (PCRE) syntax to use in validating Attribute values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCString'
        self.__parent__ = 'DCIM_FCAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCEnumeration__(__BaseClass__, __DCIM_LCAttribute__):
    '''This class extends the DCIM_LCAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCEnumeration'
        self.__parent__ = 'DCIM_LCAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCString__(__BaseClass__, __DCIM_LCAttribute__):
    '''The DCIM_LCString object may be used to instantiate string-based LC attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this LC attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    uint32 StringType                       :    The StringType property provides management applications with information defining implementations capabilities regarding string values. A value of ASCII indicates a plain text formatting with no tabs formating or bolds, plain text. A value of hex indicates a simple encoding of the numerals 0 to 9 and the letters A to F and is not case sensitive. A value of unicode indicates fully multi-lingual text support. A string LC Attribute with value of regex is a regular expression and the DCIM_LCString.ValueExpression shall be applied to values represented and any value that is attempted to be set by invoking SetAttribute().
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCString'
        self.__parent__ = 'DCIM_LCAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICEnumeration__(__BaseClass__, __DCIM_NICAttribute__):
    '''This class extends the DCIM_NICAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValuesDescription[]      :    An array of free-form strings providing explanations and details behind the entries in the CIM_NICEnumeration.PossibleValues array. Note that each entry of this array is related to the entry in PossibleValues array that is located at the same index.
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICEnumeration'
        self.__parent__ = 'DCIM_NICAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICInteger__(__BaseClass__, __DCIM_NICAttribute__):
    '''The DCIM_NICInteger object may be used to instantiate integer-based NIC attributes. )

Class Properties:
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICInteger'
        self.__parent__ = 'DCIM_NICAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICString__(__BaseClass__, __DCIM_NICAttribute__):
    '''The DCIM_NICString object may be used to instantiate string-based NIC attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
    string ValueExpression                  :    The property denotes a Perl-compatible regular expression (PCRE) syntax to use in validating Attribute values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICString'
        self.__parent__ = 'DCIM_NICAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_RAIDEnumeration__(__BaseClass__, __DCIM_RAIDAttribute__):
    '''This class extends the DCIM_RAIDAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RAIDEnumeration'
        self.__parent__ = 'DCIM_RAIDAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_RAIDInteger__(__BaseClass__, __DCIM_RAIDAttribute__):
    '''The DCIM_RAIDInteger object may be used to instantiate integer-based RAID attributes. )

Class Properties:
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RAIDInteger'
        self.__parent__ = 'DCIM_RAIDAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_RAIDString__(__BaseClass__, __DCIM_RAIDAttribute__):
    '''The DCIM_RAIDString object may be used to instantiate string-based RAID attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this RAID attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this RAID attribute. A value of NULL SHALL be defined as zero.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RAIDString'
        self.__parent__ = 'DCIM_RAIDAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemEnumeration__(__BaseClass__, __DCIM_SystemAttribute__):
    '''This class extends the DCIM_SystemAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. )

Class Properties:
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemEnumeration'
        self.__parent__ = 'DCIM_SystemAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemInteger__(__BaseClass__, __DCIM_SystemAttribute__):
    '''The DCIM_SystemInteger object may be used to instantiate integer-based System attributes. )

Class Properties:
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    uint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemInteger'
        self.__parent__ = 'DCIM_SystemAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemString__(__BaseClass__, __DCIM_SystemAttribute__):
    '''The DCIM_SystemString object may be used to instantiate string-based system attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemString'
        self.__parent__ = 'DCIM_SystemAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_iDRACCardEnumeration__(__BaseClass__, __DCIM_iDRACCardAttribute__):
    '''This class extends the DCIM_iDRACCardAttribute base class definition to provide informational detail for enumeration data types. Enumerations are single-selection lists with a finite set of entities. Example enumerations might include Power-On Self Test: Enable, Disable or Standby Timeout: 15 minutes, 30 minutes, 45 minutes, Never . )

Class Properties:
    string PossibleValues[]                 :    An array of strings containing possible value definitions for the Attribute. The first element SHOULD not be NULL and there SHOULD be no NULL or empty string elements intermixed with populated array element values. A Value of NULL SHALL indicate an elements value is unknown.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardEnumeration'
        self.__parent__ = 'DCIM_iDRACCardAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_iDRACCardInteger__(__BaseClass__, __DCIM_iDRACCardAttribute__):
    '''The DCIM_iDRACCardInteger object may be used to instantiate integer-based iDRAC Network attributes. )

Class Properties:
    sint64 LowerBound                       :    The property defines a lower bound or limit when modifying this attribute.
    sint64 UpperBound                       :    The property defines an upper bound or limit when modifying this attribute.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardInteger'
        self.__parent__ = 'DCIM_iDRACCardAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_iDRACCardString__(__BaseClass__, __DCIM_iDRACCardAttribute__):
    '''The DCIM_iDRACCardString object may be used to instantiate string-based iDRAC Card attributes. )

Class Properties:
    uint64 MaxLength                        :    This property specifies the maximum string length allowed when modifying this BIOS attribute. A value of NULL defines the maximum length is unknown. A value of 0 defines the maximum length as 18446744073709551615, the limitation of the property definition as uint64.
    uint64 MinLength                        :    This property specifies the minimum string length allowed when modifying this BIOS attribute. A value of NULL SHALL be defined as zero.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardString'
        self.__parent__ = 'DCIM_iDRACCardAttribute'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_AggregationMetricDefinition__(__BaseClass__, __CIM_BaseMetricDefinition__):
    '''CIM_AggregationMetricDefinition represents the definitional aspects of a metric that is derived from another metric value. The CIM_AggregationMetricDefinition should be associated with the CIM_ManagedElement(s) to which it applies. )

Class Properties:
    uint16 ChangeType = 5                   :    ChangeType indicates how the metric value changes, in the form of typical combinations of finer grain attributes such as direction change, minimum and maximum values, and wrapping semantics. \n5=Simple Function: indicates that the derived metric value is calculated by applying the basic mathematical function identified by the SimpleFunction property to the underlying metric values.
    uint16 SimpleFunction                   :    The SimpleFunction property identifies the basic computation performed on an underlying metric to arrive at the value of this derived metric. This property shall be NULL when the ChangeType property has a value other than 5 Simple Function. \n2=Minimum indicates that the metric reports the lowest value detected for the associated monitored entity. This is also known as a low watermark.\n.3=Maximum indicates that the metric reports the maximum value detected for the associated monitored entity. This is also known as a high watermark.\n4=Average indicates the metric reports the average value of the underlying metric values.\n5=Median indicates the metric reports the median value of the underlying metric values.\n6=Mode indicates the metric reports the modal value of the underlying metric values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AggregationMetricDefinition'
        self.__parent__ = 'CIM_BaseMetricDefinition'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BaseMetricDefinition__(__BaseClass__, __CIM_BaseMetricDefinition__):
    '''DCIM_CumBaseMetricDefinition is a derivation of CIM_BaseMetricDefinition and represents the definitional aspects of a metric. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BaseMetricDefinition'
        self.__parent__ = 'CIM_BaseMetricDefinition'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_AggregationMetricDefinition__(__BaseClass__, __CIM_AggregationMetricDefinition__):
    '''DCIM_AggregationMetricDefinition is a derivation of CIM_AggregationMetricDefinition and represents the definitional aspects of a metric. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AggregationMetricDefinition'
        self.__parent__ = 'CIM_AggregationMetricDefinition'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_AggregationMetricValue__(__BaseClass__, __CIM_BaseMetricValue__):
    '''Each CIM_AggregationMetricValue object represents the instance value of a metric defined by an instance of CIM_AggregationMetricDefinition. The properties inherited from CIM_BaseMetricValue provide the actual metric value. The properties introduced in CIM_AggregationMetricValue provide information about the interval over which the aggregation function was applied. )

Class Properties:
    datetime AggregationDuration            :    Property that represents the time duration over which the aggregation was computed. The start of a monitoring interval over which the aggregation function is applied is determined by subtracting the AggregationDuration from the AggregationTimestamp.
    datetime AggregationTimeStamp           :    Identifies the time when the aggregation function was applied to determine the value of the metric instance. Note that this is different from the time when the instance is created. For a given CIM_AggregationMetricValue instance, the AggregationTimeStamp changes whenever the aggregation function is applied to calculate the value.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AggregationMetricValue'
        self.__parent__ = 'CIM_BaseMetricValue'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BaseMetricValue__(__BaseClass__, __CIM_BaseMetricValue__):
    '''DCIM_CumBaseMetricValue is a derivation of CIM_BaseMetricValue and represents the instance value of a metric. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BaseMetricValue'
        self.__parent__ = 'CIM_BaseMetricValue'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_AggregationMetricValue__(__BaseClass__, __CIM_AggregationMetricValue__):
    '''DCIM_AggregationMetricValue is a derivation of CIM_AggregationMetricValue and represents the instance value of a metric defined by an instance of DCIM_AggregationMetricDefinition. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AggregationMetricValue'
        self.__parent__ = 'CIM_AggregationMetricValue'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_EnabledLogicalElementCapabilities__(__BaseClass__, __CIM_Capabilities__):
    '''EnabledLogicalElementCapabilities describes the capabilities supported for changing the state of the associated EnabledLogicalElement. )

Class Properties:
    boolean ElementNameEditSupported        :    Boolean indicating whether the ElementName can be modified.
    string ElementNameMask                  :    This string expresses the restrictions on ElementName.The mask is expressed as a regular expression.See DMTF standard ABNF with the Management Profile Specification Usage Guide, appendix C for the regular expression syntax permitted. \nSince the ElementNameMask can describe the maximum length of the ElementName,any length defined in the regexp is in addition to the restriction defined in MaxElementNameLen (causing the smaller value to be the maximum length) The ElementName value satisfies the restriction, if and only if it matches the regular expression
    uint16 MaxElementNameLen                :    Maximum supported ElementName length.
    uint16 RequestedStatesSupported[]       :    RequestedStatesSupported indicates the possible states that can be requested when using the method RequestStateChange on the EnabledLogicalElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_EnabledLogicalElementCapabilities'
        self.__parent__ = 'CIM_Capabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PowerManagementCapabilities__(__BaseClass__, __CIM_Capabilities__):
    '''A class derived from Capabilities that describes the power management aspects of an element (typically a system or device). The element s power management capabilities are decoupled from a PowerManagementService, since a single service could apply to multiple elements, each with specific capabilities. )

Class Properties:
    string OtherPowerCapabilitiesDescriptions[]:    An array of strings describing an elements additional power management capabilities, used when the PowerCapabilities array includes the value 1, Other.
    string OtherPowerChangeCapabilities     :    A string describing the additional power management capabilities of the element, used when the PowerChangeCapabilities is set to the value 1, Other.
    uint16 PowerCapabilities[]              :    An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be specified. The current values in the enumeration are: \n0 = Unknown \n1 = Other \n2 = Power Saving Modes Entered Automatically, describing that a managed element can change its power state based on usage or other criteria \n3 = Power State Settable, indicating that the SetPowerState method is supported \n4 = Power Cycling Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to Power Cycle \n5 = Timed Power On Supported, indicating that the SetPowerState method can be invoked with the PowerState input variable set to Power Cycle and the Time parameter set to a specific date and time, or interval, for power-on.
    uint16 PowerChangeCapabilities[]        :    An enumeration indicating the specific power-related capabilities of a managed element. Since this is an array, multiple values may be specified. The current values in the enumeration are: \n0 = Unknown \n1 = Other \n2 = Power Saving Modes Entered Automatically, describing that a managed element can change its power state based on usage or other criteria \n3 = Power State Settable, indicating that the RequestPowerStateChange method is supported \n4 = Power Cycling Supported, indicating that the RequestPowerStateChange method can be invoked with the PowerState input variable set to Power Cycle (Off Soft) \n5 = Timed Power On Supported, indicating that the RequestPowerStateChange method can be invoked with the PowerState input variable set to Power On and the Time parameter set to a specific date and time, or interval, for power-on.8 = Graceful Shutdown Supported, indicating that the managed element can be sent a hardware signal requesting an orderly shutdown prior to the requested power state change.
    uint16 PowerStatesSupported[]           :    An enumeration that indicates the power states supported by a managed element. Because this is an array, multiple values can be specified. The current values in the enumeration are: \n2=On, corresponding to ACPI state G0 or S0 or D0. \n3=Sleep - Light, corresponding to ACPI state G1, S1/S2, or D1. \n4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2.\n5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or D3, but where the managed element is set to return to power state On at a pre-determined time. \n6=Off - Hard, corresponding to ACPI state G3, S5, or D3. \n7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and will be recovered upon powering on. \n8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed element reaching the ACPI state G3 followed by ACPI state S0. \n10=Master Bus Reset, corresponds to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent to Off Soft but preceded by a request to the managed element to perform an orderlyshutdown. \n13=Off - Hard Graceful, equivalent to Off Hard but preceded by a request to the managed element to perform an orderly shutdown. \n14=Master Bus Rest Graceful, equivalent to Master Bus Reset but preceded by a request to the managed element to perform an orderly shutdown. \n15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by a request to the managed element to perform an orderly shutdown. \n16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - Hard) but preceded by a request to the managed element to perform an orderly shutdown. \n..=DMTF Reserved. \n0x7FFF..0xFFFF = Vendor Specific.
    uint16 RequestedPowerStatesSupported[]  :    An enumeration that indicates the requested power states supported by the power management service. Because this is an array, multiple values can be specified. The current values in the enumeration are: \n2=On, corresponding to ACPI state G0 or S0 or D0. \n3=Sleep - Light, corresponding to ACPI state G1, S1/S2, or D1. \n4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2.\n5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or D3, but where the managed element is set to return to power state On at a pre-determined time. \n6=Off - Hard, corresponding to ACPI state G3, S5, or D3. \n7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and will be recovered upon powering on. \n8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed element reaching the ACPI state G3 followed by ACPI state S0. \n10=Master Bus Reset, corresponds to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent to Off Soft but preceded by a request to the managed element to perform an orderlyshutdown. \n13=Off - Hard Graceful, equivalent to Off Hard but preceded by a request to the managed element to perform an orderly shutdown. \n14=Master Bus Rest Graceful, equivalent to Master Bus Reset but preceded by a request to the managed element to perform an orderly shutdown. \n15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by a request to the managed element to perform an orderly shutdown. \n16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - Hard) but preceded by a request to the managed element to perform an orderly shutdown. \n17=Diagnostic Interrupt (INIT), equivalent to Diagnostic Interrupt (NMI) but performed by an INIT switch instead because the NMI signal is masked. \n..=DMTF Reserved. \n0x7FFF..0xFFFF = Vendor Specific.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PowerManagementCapabilities'
        self.__parent__ = 'CIM_Capabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PrivilegeManagementCapabilities__(__BaseClass__, __CIM_Capabilities__):
    '''A subclass of Capabilities that defines the capabilities of the Privilege Management Service. )

Class Properties:
    uint16 ActivitiesSupported[]            :    A super set of activities that could be granted or denied to a role or an identity by the associated privileges. The Activities property of the instances of CIM_Privilege that are associated to the role or the identity MUST contain only the values enumerated in the ActivitiesSupported array property. The supported activities apply to all entities specified in the ActivityQualifiersSupported array. Refer to the CIM_Privilege.Activities property for the detailed description of values.
    string ActivityQualifiersSupported[]    :    The ActivityQualifiersSupported property is an array of string values used to further qualify and specify the supported activities of privileges. The ActivityQualifiers property of the instances of CIM_Privilege that are associated to the role or the identity MUST contain only the values enumerated in the ActivityQualifiersSupported array property. Details on the semantics of the individual entries in ActivityQualifiersSupported are provided by corresponding entries in the QualifierFormatsSupported array. Refer to the CIM_Privilege.ActivityQualifiers property for the detailed description of values.
    uint16 QualifierFormatsSupported[]      :    Defines the semantics of corresponding entries in the ActivityQualifierSupported array. The QualifierSupported property of the instances of CIM_Privilege that are associated to the role or the identity MUST contain only the values enumerated in the QualifierSupported array property. Refer to the CIM_Privilege.QualifierSupported property for the detailed description of values.
    uint16 SupportedMethods[]               :    Each enumeration corresponds to support for the like-named method of the PrivilegeManagementService.
    boolean SharedPrivilegeSupported = false:    Set to TRUE if this PrivilegeManagementService supports association of multiple subjects or targets to a particular Privilege. If False, the AssignAccess method supports at most one entry each in the Subjects and Targets parameters.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PrivilegeManagementCapabilities'
        self.__parent__ = 'CIM_Capabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCCapabilities__(__BaseClass__, __CIM_Capabilities__):
    '''DCIM_FCCapabilities describes the capabilities of Fiber Channel HBA its port. )

Class Properties:
    uint8 FCBootSupport                     :    The property details FCs boot support. 
    uint16 FCMaxIOsPerSession               :    The property details FCs maximum number of IOs per connection supported.
    uint16 FCMaxNPIVPerPort                 :    The property details FCs maximum number of NPIV targets supported.
    uint16 FCMaxNumberExchanges             :    The property details FCs maximum number of exchanges.
    uint16 FCMaxNumberLogins                :    The property details FCs maximum logins per port.
    uint16 FCMaxNumberOfFCTargets           :    The property details FCs maximum number of FC targets supported.
    uint16 FCMaxNumberOutStandingCommands   :    The property details FCs maximum number of outstanding commands supported across all connections.
    string  FQDD                            :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. The FQDD represents the FCs ports or partitions FQDD for which this capabilities apply. 
    uint8 FeatureLicensingSupport           :    The property details FCs feature licensing support. 
    uint8 FlexAddressingSupport             :    The property details FCs ports flex adddressing support. 
    string InstanceID                       :    Is a unique string containing the Fully Qualified Device Description and view name. 
    uint8 OnChipThermalSensor               :    The property details FCs on chip thermal sensor support. 
    uint8 PersistencePolicySupport          :    This property specifies if the card supports persistence policy
    uint8 uEFISupport                       :    The property details FCs ports uEFI support. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCCapabilities'
        self.__parent__ = 'CIM_Capabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICCapabilities__(__BaseClass__, __CIM_Capabilities__):
    '''DCIM_NICCapabilities describes the capabilities of the NIC and its port and partitions. )

Class Properties:
    uint8 BPESupport                        :    The property details NICs ports BPE support. 
    uint8 CongestionNotification            :    The property details NICs ports congestion notification support. 
    uint8 DCBExchangeProtocol               :    The property details NICs ports DCB Exchange protocol support. 
    uint8 ETS                               :    The property details NICs ports Enhanced Transmission Selection support. 
    uint8 EVBModesSupport                   :    The property details NICs ports EVB - Edge Virtual Bridging modes support. 
    uint8 EnergyEfficientEthernet           :    The property details NICs energy efficient ethernet support. 
    uint8 FCoEBootSupport                   :    The property details NICs ports FCoE boot support. 
    uint16 FCoEMaxIOsPerSession             :    The property details NICs maximum number of IOs per connection supported.
    uint16 FCoEMaxNPIVPerPort               :    The property details NICs maximum number of FCoE targets supported.
    uint16 FCoEMaxNumberExchanges           :    The property details NICs maximum number of exchanges.
    uint16 FCoEMaxNumberLogins              :    The property details NICs maximum logins per port.
    uint16 FCoEMaxNumberOfFCTargets         :    The property details NICs maximum number of FCoE targets supported.
    uint16 FCoEMaxNumberOutStandingCommands :    The property details NICs maximum number of outstanding commands supported across all connections.
    uint8 FCoEOffloadSupport                :    The property details NICs ports FCoE offload support. 
    string  FQDD                            :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. The FQDD represents the NICs ports or partitions FQDD for which this capabilities apply. 
    uint8 FeatureLicensingSupport           :    The property details NICs feature licensing support. 
    uint8 FlexAddressingSupport             :    The property details NICs ports flex adddressing support. 
    uint8 IPSecOffloadSupport               :    The property details NICs ports IPSec offload support. 
    string InstanceID                       :    Is a unique string containing the Fully Qualified Device Description and view name. 
    uint8 MACSecSupport                     :    The property details NICs ports secure MAC support. 
    uint8 NWManagementPassThrough           :    The property details NICs ports network management pass through support. 
    uint8 NicPartitioningSupport            :    The property details NICs partitioning support. 
    uint8 OSBMCManagementPassThrough        :    The property details NICs ports OS-inband to BMC-out-of-band management pass through support. 
    uint8 OnChipThermalSensor               :    The property details NICs on chip thermal sensor support. 
    uint8 OpenFlowSupport                   :    The property details NICs ports open flow support. 
    uint8 PXEBootSupport                    :    The property details NICs ports PXE boot support. 
    uint8 PartitionWOLSupport               :    The property details NICs partitions Wake-On-LAN support. 
    uint8 PersistencePolicySupport          :    	This property specifies if the card supports persistence policy
    uint8 PriorityFlowControl               :    The property details NICs ports priority flow control support. 
    uint8 RDMASupport                       :    The property details NICs ports RDMA support. 
    uint8 RXFlowControl                     :    The property details NICs partitions RX flow control support. 
    uint8 RemotePHY                         :    The property details NICs ports remote PHY support. 
    uint8 TCPChimneySupport                 :    The property details NICs ports TCP Chimney support. 
    uint8 TXBandwidthControlMaximum         :    The property details NICs partitions open flow support. 
    uint8 TXBandwidthControlMinimum         :    The property details NICs partitions open flow support. 
    uint8 TXFlowControl                     :    The property details NICs partitions TX flow control support. 
    uint8 VEBVEPAMultiChannel               :    The property details NICs ports VEB-VEPA (Virtual Ethernet Bridging and  Virtual Ethernet Port Aggregator) multi channel support. 
    uint8 VEBVEPASingleChannel              :    The property details NICs ports VEB-VEPA (Virtual Ethernet Bridging and  Virtual Ethernet Port Aggregator) - single channel support. 
    uint8 VFSRIOVSupport                    :    The property details NICs ports for Virtual Function of Single Root I/O Virtualization support. 
    uint8 VirtualLinkControl                :    The property details NICs partitions virtual link control support. 
    uint8 WOLSupport                        :    The property details NICs ports Wake-On-LAN support. 
    uint8 iSCSIBootSupport                  :    The property details NICs ports iSCSI boot support. 
    uint8 iSCSIOffloadSupport               :    The property details NICs ports iSCSI offload support. 
    uint8 uEFISupport                       :    The property details NICs ports uEFI support. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICCapabilities'
        self.__parent__ = 'CIM_Capabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_AccountManagementCapabilities__(__BaseClass__, __CIM_EnabledLogicalElementCapabilities__):
    '''AccountManagementCapabilities describes the capabilities supported for managing Accounts associated with an instance of AccountManagementService. AccountManagementCapabilities is associated with an instance of AccountManagementService through the ElementCapabilities association. )

Class Properties:
    uint16 MaximumAccountsSupported         :    MaximumAccountsSupported shall indicate the maximum number of accounts that may be managed by the associated instance of CIM_AccountManagementService. Note that if multiple instances of CIM_AccountManagementService manage the accounts of a system, the total maximum number of accounts supported on the system is the sum of MaximumAccountsSupported for all of the instances of CIM_AccountManagementService. A value of zero shall indicate that the maximum number of accounts is unknown or that a maximum number of accounts is not enforced.
    uint16 OperationsSupported[]            :    OperationsSupported describes the type of operations that are supported for an Account associated with the AccountManagementService.\nCreate indicates the AccountManagementService may be used to create new accounts.\nModify indicates that the associated Accounts may be modified.\nDelete indicates that associated Accounts may be deleted.
    string OtherSupportedUserPasswordEncryptionAlgorithms[]:    Additional implementation-specific algorithms that a client may use to encrypt a value in the UserPassword property when creating or modifying an instance of CIM_Account. If this property is non-NULL, a client may select an algorithm in it by setting CIM_Account.UserPasswordEncryptionAlgorithm to 1 (Other) and setting CIM_Account.OtherUserPasswordEncryptionAlgorithm to the value of the selected algorithm string.
    uint32 SupportedUserPasswordEncodings[] :    This property enumerates encoding algorithms that a client may use to encode the UserPassword property when creating or modifying an instance of CIM_Account. See CIM_Account property UserPasswordEncoding for a description of each enum value.
    uint16 SupportedUserPasswordEncryptionAlgorithms[]:    This property enumerates encryption algorithms that a client may use to encrypt a value in the UserPassword property when creating or modifying an instance of CIM_Account. This capability is aimed at ensuring some measure of confidentiality when the password is transferred over an unencrypted transport protocol. An implementation may elect to accept only encrypted passwords, without regard to whether the transport protocol is encrypted. Similarly, a a client may elect to always provide encrypted passwords to implementations that accept either unencrypted or encrypted passwords, even if the underlying transport protocol is encrypted.\nSee CIM_Account property UserPasswordEncryptionAlgorithm for a description of each enum value.
    string UserPasswordEncryptionSalt       :    A value unique to the specific WBEM server that may be used in the selected UserPassword encryption algorithm to ensure a value that is unique among all WBEM servers even if a user uses the same password on multiple WBEM servers.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AccountManagementCapabilities'
        self.__parent__ = 'CIM_EnabledLogicalElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_MetricServiceCapabilities__(__BaseClass__, __CIM_EnabledLogicalElementCapabilities__):
    '''MetricServiceCapabilities describes the capabilities of the associated CIM_BaseMetricService. )

Class Properties:
    string ControllableManagedElements[]    :    ControllableManagedElements identifies the instances of CIM_ManagedElement that can be controlled by the associated CIM_MetricService instance. Each value shall be formatted as a WBEM URI defined according to DSP0207 identifying an instance of CIM_ManagedElement If a value corresponding to an instance of CIM_ManagedElement is included in the ControllableManagedElements property, the associated instance of CIM_MetricService shall support enabling and/or disabling at least one metric defined for the CIM_ManagedElement instance.
    string ControllableMetrics[]            :    ControllableMetrics identifies the instances of CIM_BaseMetricDefinition that can be controlled by the associated CIM_MetricService instance. Each string value shall be formatted as a WBEM URI defined as in accordance with DSP0207 that identifies an instance of CIM_BaseMetricDefinition. An instance of CIM_BaseMetricDefinition shall not be identified by a value of the ControllableMetrics property unless it is associated through CIM_ServiceAffectsElement to the associated instance of CIM_MetricService. If a value corresponding to an instance of CIM_BaseMetricDefinition is included in the ControllableMetrics property, the associated instance of CIM_MetricService shall support enabling and/or disabling at least one metric defined by the CIM_BaseMetricDefinition instance.
    uint16 ManagedElementControlTypes[]     :    ManagedElementControlTypes identifies the type of control supported by the associated CIM_MetricService instance for the CIM_ManagedElement identified by the value at the same array index in the ControllableManagedElements property. A value of 2 Discrete shall indicate that individual metrics controlled by the associated instance of CIM_MetricService may be enabled and or disabled for the instance of CIM_ManagedElement identified at the corresponding array index of ControllableManagedElements.A value of 3 Bulk shall indicate that all metrics controlled by the associated instance of CIM_MetricService may be enabled and or disabled for the instance of CIM_ManagedElement identified at the corresponding array index of ControllableManagedElements. A value of 4 Both shall indicate that all metrics controlled by the associated instance of CIM_MetricService may be enabled and or disabled with a single operation or individually for the instance of CIM_ManagedElement identified by the value at the same array index of ControllableManagedElements.
    uint16 MetricsControlTypes[]            :    MetricsControlTypes identifies the type of control supported by the associated CIM_MetricService instance for the CIM_BaseMetricDefinition identified by the value at the same array index in the ControllableMetrics property. A value of 2 Discrete shall indicate that individual metrics defined by the instance of CIM_BaseMetricDefinition identified at the corresponding array index of ControllableMetrics may be enabled and or disabled by the associated instance of CIM_MetricService.A value of 3 Bulk shall indicate that all metrics defined by the instance of CIM_BaseMetricDefinition identified by the value at the same array index of ControllableMetrics may be enabled and or disabled with a single operation. A value of 4 Both shall indicate that all metrics defined by the instance of CIM_BaseMetricDefinition identified by the value at the same array index of ControllableMetrics may be enabled and or disabled individually or as a single operation.
    uint16 SupportedMethods[]               :    Each enumeration corresponds to support for the like-named method of the MetricService.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MetricServiceCapabilities'
        self.__parent__ = 'CIM_EnabledLogicalElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RecordLogCapabilities__(__BaseClass__, __CIM_EnabledLogicalElementCapabilities__):
    '''CIM_RecordLogcapabilities describes the capabilities supported by the associated record log. )

Class Properties:
    uint16 SupportedRecordTypes[]           :    SupportedRecordTypes indicates which record types are supported.\n2 (Record Data) indicates that this log is capable of storing log entry data in the RecordData property of CIM_RecordForLog in the format that is identified by the RecordFormat property of CIM_RecordForLog.\n3 (Standard Messages) indicates that this log is capable of storing log entries using Standard Messages.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RecordLogCapabilities'
        self.__parent__ = 'CIM_EnabledLogicalElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSEnabledLogicalElementCapabilities__(__BaseClass__, __CIM_EnabledLogicalElementCapabilities__):
    '''A class derived from ComputerSystem to represent an DCIM s Server. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSEnabledLogicalElementCapabilities'
        self.__parent__ = 'CIM_EnabledLogicalElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnabledLogicalElementCapabilities__(__BaseClass__, __CIM_EnabledLogicalElementCapabilities__):
    '''DCIM_EnabledLogicalElementCapabilities is a derivation of CIM_EnabledLogicalElementCapabilities. EnabledLogicalElementCapabilities describes the capabilities supported for changing the state of the assciated EnabledLogicalElement. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnabledLogicalElementCapabilities'
        self.__parent__ = 'CIM_EnabledLogicalElementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_AccountManagementCapabilities__(__BaseClass__, __CIM_AccountManagementCapabilities__):
    '''DCIM_AccountManagementCapabilities is a derivation of CIM_AccountManagementCapabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AccountManagementCapabilities'
        self.__parent__ = 'CIM_AccountManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMICLPAccountManagementCapabilities__(__BaseClass__, __DCIM_AccountManagementCapabilities__):
    '''DCIM_IPMICLPAccountManagementCapabilities is a derivation of DCIM_AccountManagementCapabilities. DCIM_AccountManagementCapabilities is a derivation of CIM_AccountManagementCapabilities. AccountManagementCapabilities describes the capabilities supported for managing Accounts associated with an instance of AccountManagementService. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMICLPAccountManagementCapabilities'
        self.__parent__ = 'DCIM_AccountManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalUserAccountManagementCapabilities__(__BaseClass__, __DCIM_AccountManagementCapabilities__):
    '''DCIM_LocalUserAccountManagementCapabilities is a derivation of DCIM_AccountManagementCapabilities. )

Class Properties:
    uint16 SupportedAuthenticationMethod[]  :    An array representing the supported authentication method.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalUserAccountManagementCapabilities'
        self.__parent__ = 'DCIM_AccountManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_MetricServiceCapabilities__(__BaseClass__, __CIM_MetricServiceCapabilities__):
    '''DCIM_MetricServiceCapabilities is a derivation of CIM_MetricServiceCapabilities and describes the capabilities of the associated DCIM_MetricService. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_MetricServiceCapabilities'
        self.__parent__ = 'CIM_MetricServiceCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCRecordLogCapabilities__(__BaseClass__, __CIM_RecordLogCapabilities__):
    '''A class derived from RecordLogCapabilities to represent the LifeCycle Log Capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCRecordLogCapabilities'
        self.__parent__ = 'CIM_RecordLogCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SELRecordLogCapabilities__(__BaseClass__, __CIM_RecordLogCapabilities__):
    '''A class derived from RecordLogCapabilities to represent the System Event Log Capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELRecordLogCapabilities'
        self.__parent__ = 'CIM_RecordLogCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSPowerManagementCapabilities__(__BaseClass__, __CIM_PowerManagementCapabilities__):
    '''The power management capabilities of the element are decoupled from a PowerManagementService, because a single service could apply to multiple elements, each with specific capabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSPowerManagementCapabilities'
        self.__parent__ = 'CIM_PowerManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RoleBasedManagementCapabilities__(__BaseClass__, __CIM_PrivilegeManagementCapabilities__):
    '''A subclass that extends the capabilities of the CIM_RoleBasedAuthorizationService. )

Class Properties:
    uint16 SupportedMethods[]               :    The enumeration values ChangeAccess, ShowAccess, AssignAccess, RevokeAccess, CreateRole, ModifyRole, AssignRoles, ShowRoles, and DeleteRole corresponds to support for the like-named method of the RoleBasedAuthorizationService. \nThe value ModifyPrivilege corresponds to support for directly modifying an instance of CIM_Privilege using an intrinsic operation.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RoleBasedManagementCapabilities'
        self.__parent__ = 'CIM_PrivilegeManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPRoleBasedManagementCapabilities__(__BaseClass__, __CIM_RoleBasedManagementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRoleBasedManagementCapabilities'
        self.__parent__ = 'CIM_RoleBasedManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIRoleBasedManagementCapabilities__(__BaseClass__, __CIM_RoleBasedManagementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRoleBasedManagementCapabilities'
        self.__parent__ = 'CIM_RoleBasedManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRoleBasedManagementCapabilities__(__BaseClass__, __CIM_RoleBasedManagementCapabilities__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRoleBasedManagementCapabilities'
        self.__parent__ = 'CIM_RoleBasedManagementCapabilities'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_ConcreteCollection__(__BaseClass__, __CIM_Collection__):
    '''A concrete version of Collection. This class represents a generic and instantiable collection, such as a group of ComputerSystems (for example, a pool of hosts available for executing jobs). It is defined as a concrete subclass of the abstract CIM_Collection class, to be used in place of many specific subclasses that add no semantics. Note that when defining additional semantics for Collection, this class must not be subclassed. Specific semantics continue to be defined as subclasses of the abstract CIM_Collection. ConcreteCollection is limited in its use as a concrete form of a general collection or bag. It was deemed more prudent to create this concrete subclass than to change Collection from an abstract to a concrete class. )

Class Properties:
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n\n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity must ensure that the resulting InstanceID is not re-used as any of the InstanceIDs produced by this or other providers for the NameSpace of this instance.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ConcreteCollection'
        self.__parent__ = 'CIM_Collection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Role__(__BaseClass__, __CIM_Collection__):
    '''The Role object class is used to represent a position or set of responsibilities within an organization, organizational unit or other scope, and MAY be filled by a person or persons (or non-human entities represented by ManagedSystemElement subclasses) - i.e., the role occupants . The latter MAY be explicitly associated to a Role, by associating Identities using MemberOfCollection. The position or set of responsibilities of a Role are represented as a set of rights defined by instances of the Privilege class, and are also associated to the Role via MemberOfCollection. If Identities are not explicitly associated, instances of AuthorizationRule MUST be associated with a Role using AuthorizationRuleAppliesToRole. The rule defines how subject entities are authorized for a Role and to which target entities the Role applies. \n \n The Role class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. This class s properties are a subset of a related class, OtherRoleInformation, which defines all the group properties and uses arrays for directory compatibility. )

Class Properties:
    string BusinessCategory                 :    This property may be used to describe the kind of business activity performed by the members (role occupants) in the position or set of responsibilities represented by the Role.
    string CommonName                       :    A Common Name is a (possibly ambiguous) name by which the role is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated.
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string Name                             :    The Name property defines the label by which the object is known. In the case of an LDAP-derived instance, the Name property value may be set to the distinguished name of the LDAP-accessed object instance.
    uint16 RoleCharacteristics[]            :    RoleCharacteristics provides descriptive information about the intended usage of the Role.\nWhen the value 2 Static is specified, no modification to the role shall be allowed. Any requests by client to change the privileges or the scope of the role by modifying the associated instances of CIM_Privilege or referencing associations shall fail.\nWhen the value 2 Static is not specified, the instance of CIM_Role may be modified by a client. The modification may include changing the scope of the role or rights granted. When the value 3 Opaque is specified, the rights granted by the CIM_Role instance shall not be explicitly modeled through aggregation of instances of CIM_Privilege.\nWhen the value 3 Opaque is not specified, the rights granted by the instance of CIM_Role shall be explicitly modeled through aggregation of instances of CIM_Privilege.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Role'
        self.__parent__ = 'CIM_Collection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_SystemSpecificCollection__(__BaseClass__, __CIM_Collection__):
    '''SystemSpecificCollection represents the general concept of a collection that is scoped (or contained) by a System. It represents a Collection that has meaning only in the context of a System, a Collection whose elements are restricted by the definition of the System, or both of these types of Collections. This meaning is explicitly described by the (required) association, HostedCollection. \n An example of a SystemSpecificCollection is a Fibre Channel zone that collects network ports, port groupings, and aliases (as required by a customer) in the context of an AdminDomain. The Collection is not a part of the domain, but merely an arbitrary grouping of the devices and other Collections in the domain. In other words, the context of the Collection is restricted to the domain, and its members are also limited by the domain. )

Class Properties:
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> must include a unique name. It can be a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID. Or, it could be a registered ID that is assigned to the business entity by a recognized global authority.(This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity must ensure that the resulting InstanceID is not re-used as any of InstanceIDs produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SystemSpecificCollection'
        self.__parent__ = 'CIM_Collection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_ADMProfilesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_ADMProfilesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ADMProfilesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSCapabilitiesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSCapabilitiesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSCapabilitiesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSCapacitiesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSCapacitiesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSCapacitiesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSConsolesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSConsolesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSConsolesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSLogsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSLogsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSLogsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSSensorsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSSensorsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSSensorsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CSSettingsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_CSSettingsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSSettingsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPCapabilitiesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPCapabilitiesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPCapabilitiesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPCapacitiesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPCapacitiesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPCapacitiesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPConsolesConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPConsolesConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPConsolesConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPLogsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPLogsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPLogsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPSensorsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPSensorsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPSensorsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SPSettingsConcreteCollection__(__BaseClass__, __CIM_ConcreteCollection__):
    '''DCIM_SPSettingsConcreteCollection is a trivial derivation of CIM_ConcreteCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPSettingsConcreteCollection'
        self.__parent__ = 'CIM_ConcreteCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPRole__(__BaseClass__, __CIM_Role__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRole'
        self.__parent__ = 'CIM_Role'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIRole__(__BaseClass__, __CIM_Role__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRole'
        self.__parent__ = 'CIM_Role'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMISOLRole__(__BaseClass__, __CIM_Role__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMISOLRole'
        self.__parent__ = 'CIM_Role'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Role__(__BaseClass__, __CIM_Role__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Role'
        self.__parent__ = 'CIM_Role'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RedundancySet__(__BaseClass__, __CIM_SystemSpecificCollection__):
    '''A class derived from SystemSpecificCollection that is a special collection of ManagedElements. This collection indicates that the aggregated elements together provide redundancy, or that redundancy is provided via sparing. All elements collected in a RedundancySet SHOULD be instantiations of the same object class. )

Class Properties:
    uint16 LoadBalanceAlgorithm = 2         :    The current load balance algorithm. \nLeast Blocks, Least IO, and Address Region are used in storage device path redundancy drivers to optimize load balancing by routing requests to a path with the least queued blocks or IO requests, or based on locality of reference. \nProduct Specific indicates that the algorithm is optimized for a particular type of product. Information about that product SHOULD be provided in an associated CIM_Product instance.
    uint32 MaxNumberSupported               :    MaxNumberSupported indicates the largest number of elements that can participate in the RedundancySet. A value of 0 indicates there is no limit on the number of elements.
    uint32 MinNumberNeeded                  :    MinNumberNeeded indicates the smallest number of elements that MUST be operational in order to function. For example, in an N+1 redundancy relationship, the MinNumberNeeded property is set equal to N. In a LimitedSparing environment, this property is meaningless and SHOULD be set to zero.
    string OtherLoadBalanceAlgorithm        :    When LoadBalanceAlgorithm is Other, this property describes the algorithm.
    string OtherTypeOfSet[]                 :    When the corresponding array entry in TypeOfSet$AB is Other, this entry provides a string describing the type of set.
    uint16 RedundancyStatus                 :    RedundancyStatus provides information on the state of the RedundancyGroup. Fully Redundant (value=2) means that all of the configured redundancy is still available; Degraded Redundancy (3) means that some configured elements are degraded, missing or failed but that the number of elements in the set is still greater than the minimum required (MinNumberNeeded); Redundancy Lost (4) means that sufficient configured elements are missing or failed that no redundancy is available and the next failure experienced will cause overall failure. Overall Failure (5) means that there has been an overall failure of the RedundancySet.
    uint16 TypeOfSet[]                      :    TypeOfSet provides information on the type of redundancy. N+1 (=2) indicates all members are active, are unaware and function independent of one another. However, there exist at least one extra member to achieve functionality. Sparing is implied (i.e. each member can be a spare for the other(s). An example of N+1 is a system that has 2 power supplies, but needs only 1 power supply to functioning properly. N+1 is a special case of N+M redundancy where M=1. A value of N+1 (=2) shall be used for N+M redundancy. - Load Balanced (=3) indicates all members are active. However, there functionality is not independent of each other. Their functioning is determined by some sort of load balancing algrothim (implemented in hardware and/or software). Sparing is implied (i.e. each member can be a spare for the other(s). \n- Sparing (=4) indicates that all members are active and are aware of each others. However, their functionality is independent until failover. Each member can be a spare for the other(s). \n- Limited Sparing (=5) indicates that all members are active, and they may or may not be aware of each and they are not spares for each other. Instead, their redundancy is indicated by the IsSpare relationship.
    string VendorIdentifyingInfo            :    VendorIdentifyingInfo captures the vendor identifying data for the RedundancySet. One example is the product name for a cluster.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RedundancySet'
        self.__parent__ = 'CIM_SystemSpecificCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'failover':self.failover,
            }
    def failover(self,FailoverFrom=None,InputXmlFile=None):
        '''This method forces a failover from one ManagedElement to another. There are two parameters to the Failover method. \n - FailoverFrom is a reference to an active ManagedElement that will become inactive after the method. This element SHOULD be part of the RedundancySet via a MemberOfCollection relationship. \n - FailoverTo is a reference to the ManagedElement that will take over for the FailoverFrom element. This element SHOULD either be a member of the RedundancySet or be associated with the RedundancySet via an IsSpare relationship. \n \n Upon sucessful completion: \n - the FailoverTo element SHOULD be associated to the RedundancySet via MemberOfCollection. \n - the FailFrom element SHOULD either still be associated to the RedundandySet via MemberOfCollection with a OperationalStatus or EnableState that indicates it not active, or it SHOULD be associated to the Spared collection via the MemberOfCollection association.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ManagedElement REF FailoverFrom     :        The primary ManagedSystemElement that will become inactive after the method.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'Failover',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'Failover',{'FailoverFrom': FailoverFrom}))
class __DCIM_PowerRedundancySet__(__BaseClass__, __CIM_RedundancySet__):
    '''DCIM_PowerRedundancySet is a derivation of CIM_RedundancySet. )

Class Properties:
    uint16 TypeOfSet[]                      :    TypeOfSet provides information on the type of redundancy.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PowerRedundancySet'
        self.__parent__ = 'CIM_RedundancySet'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Identity__(__BaseClass__, __CIM_Identity__):
    '''DCIM_Identity is a derivation of CIM_Identity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Identity'
        self.__parent__ = 'CIM_Identity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPIdentity__(__BaseClass__, __DCIM_Identity__):
    '''DCIM_CLPIdentity is a derivation of DCIM_Identity. DCIM_Identity is a derivation of CIM_Identity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPIdentity'
        self.__parent__ = 'DCIM_Identity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIIdentity__(__BaseClass__, __DCIM_Identity__):
    '''DCIM_IPMIIdentity is a derivation of DCIM_Identity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIIdentity'
        self.__parent__ = 'DCIM_Identity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalUserIdentity__(__BaseClass__, __DCIM_Identity__):
    '''DCIM_LocalUserIdentity is a derivation of DCIM_Identity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalUserIdentity'
        self.__parent__ = 'DCIM_Identity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LANIdentity__(__BaseClass__, __DCIM_IPMIIdentity__):
    '''DCIM_LANIdentity is a derivation of DCIM_IPMIIdentity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LANIdentity'
        self.__parent__ = 'DCIM_IPMIIdentity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SerialIdentity__(__BaseClass__, __DCIM_IPMIIdentity__):
    '''DCIM_SerialIdentity is a derivation of DCIM_IPMIIdentity. An instance of an Identity represents a ManagedElement that acts as a security principal within the scope in which it is defined and authenticated. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SerialIdentity'
        self.__parent__ = 'DCIM_IPMIIdentity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_LogicalElement__(__BaseClass__, __CIM_ManagedSystemElement__):
    '''CIM_LogicalElement is a base class for all the components of a System that represent abstract system components, such as Files, Processes, or LogicalDevices. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_LogicalElement'
        self.__parent__ = 'CIM_ManagedSystemElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PhysicalElement__(__BaseClass__, __CIM_ManagedSystemElement__):
    '''Subclasses of CIM_PhysicalElement define any component of a System that has a distinct physical identity. Instances of this class can be defined as an object that can be seen or touched. All Processes, Files, and LogicalDevices are considered not to be Physical Elements. For example, it is not possible to touch the functionality of a modem. You can touch only the card or package that implements the modem. The same card could also implement a LAN adapter. PhysicalElements are tangible ManagedSystemElements that have a physical manifestation of some sort. \n \n Note that the properties of PhysicalElement describe a hardware entity. Possible replacement (FRU) information is defined by following the ElementFRU association to one or more instances of the ReplacementFRU class. This definition allows a client to determine what hardware can be replaced (FRUed) and what spare parts might be required by a customer or engineer doing the replacement. If it can be instrumented or manually determined that an element actually replaced (FRUed) another, then this can be described in the model using the ElementHasBeenFRUed association. )

Class Properties:
    boolean CanBeFRUed                      :    Boolean that indicates whether this PhysicalElement can be FRUed (TRUE) or not (FALSE).
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string Description                      :    A textual description of the PhysicalElement.
    string ElementName                      :    No documentation.
    datetime ManufactureDate                :    The date that this PhysicalElement was manufactured.
    string Manufacturer                     :    The name of the organization responsible for producing the PhysicalElement. This organization might be the entity from whom the Element is purchased, but this is not necessarily true. The latter information is contained in the Vendor property of CIM_Product.
    string Model                            :    The name by which the PhysicalElement is generally known.
    string OtherIdentifyingInfo             :    OtherIdentifyingInfo captures data in addition to Tag information. This information could be used to identify a Physical Element. One example is bar code data associated with an Element that also has an asset tag. Note that if only bar code data is available and is unique or able to be used as an Element key, this property would be null and the bar code data would be used as the class key, in the Tag property.
    string PartNumber                       :    The part number assigned by the organization that is responsible for producing or manufacturing the PhysicalElement.
    boolean PoweredOn                       :    Boolean that indicates whether the PhysicalElement is powered on (TRUE) or is currently off (FALSE).
    string SKU                              :    The stock-keeping unit number for this PhysicalElement.
    string SerialNumber                     :    A manufacturer-allocated number used to identify the Physical Element.
    string Tag                              :    An arbitrary string that uniquely identifies the Physical Element and serves as the key of the Element. The Tag property can contain information such as asset tag or serial number data. The key for PhysicalElement is placed very high in the object hierarchy in order to independently identify the hardware or entity, regardless of physical placement in or on Cabinets, Adapters, and so on. For example, a hotswappable or removable component can be taken from its containing (scoping) Package and be temporarily unused. The object still continues to exist and can even be inserted into a different scoping container. Therefore, the key for Physical Element is an arbitrary string and is defined independently of any placement or location-oriented hierarchy.
    string UserTracking                     :    User-assigned and writeable asset-tracking identifier for the PhysicalElement.
    string VendorEquipmentType              :    A vendor-specific hardware type for the PhysicalElement. It describes the specific equipment type for the element, as defined by the vendor or manufacturer.
    string Version                          :    A string that indicates the version of the PhysicalElement.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PhysicalElement'
        self.__parent__ = 'CIM_ManagedSystemElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_EnabledLogicalElement__(__BaseClass__, __CIM_LogicalElement__):
    '''This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a ServiceAccessPoint. )

Class Properties:
    uint16 TransitioningToState = 12        :    TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 No Change shall indicate that no transition is in progress.A value of 12 Not Applicable shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
    uint16 EnabledDefault = 2               :    An enumerated value indicating an administrators default or startup configuration for the Enabled State of an element. By default, the element is Enabled (value=2).
    uint16 EnabledState = 5                 :    EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
    uint16 AvailableRequestedStates[]       :    AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
    string OtherEnabledState                :    A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 (Other). This property must be set to null when EnabledState is any value other than 1.
    datetime TimeOfLastStateChange          :    The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_EnabledLogicalElement'
        self.__parent__ = 'CIM_LogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            }
    def requeststatechange(self,RequestedState=None,Job=None,InputXmlFile=None):
        '''Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \n A return code of 0 shall indicate the state change was successfully initiated. \n A return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \n A return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RequestedState                   :        The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (Completed with No Error), or 4096 (0x1000) (Job Started). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
    CIM_ConcreteJob REF Job                 :        May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
    string[] MessageArguments               :        Message Args
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'RequestedState': RequestedState, 'Job': Job}))
class __CIM_Job__(__BaseClass__, __CIM_LogicalElement__):
    '''A Job is a LogicalElement that represents an executing unit of work, such as a script or a print job. A Job is distinct from a Process in that a Job can be scheduled or queued, and its execution is not limited to a single system. )

Class Properties:
    uint32 JobRunTimes = 1                  :    The number of times that the Job should be run. A value of 1 indicates that the Job is not recurring, while any non-zero value indicates a limit to the number of times that the Job will recur. Zero indicates that there is no limit to the number of times that the Job can be processed, but that it is terminated either after the UntilTime or by manual intervention. By default, a Job is processed once.
    boolean DeleteOnCompletion              :    Indicates whether or not the job should be automatically deleted upon completion. Note that the completion of a recurring job is defined by its JobRunTimes or UntilTime properties, or when the Job is terminated by manual intervention. If this property is set to false and the job completes, then the extrinsic method DeleteInstance must be used to delete the job instead of updating this property.
    datetime ElapsedTime                    :    The time interval that the Job has been executing or the total execution time if the Job is complete. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the last run time can be stored in this single-valued property.
    uint16 ErrorCode                        :    A vendor-specific error code. The value must be set to zero if the Job completed without error. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the last run error can be stored in this single-valued property.
    string ErrorDescription                 :    A free-form string that contains the vendor error description. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the last run error can be stored in this single-valued property.
    string JobStatus                        :    A free-form string that represents the status of the job. The primary status is reflected in the inherited OperationalStatus property. JobStatus provides additional, implementation-specific details.
    uint16 LocalOrUtcTime                   :    This property indicates whether the times represented in the RunStartInterval and UntilTime properties represent local times or UTC times. Time values are synchronized worldwide by using the enumeration value 2, UTC Time.
    string Notify                           :    The User who is to be notified upon the Job completion or failure.
    string OtherRecoveryAction              :    A string describing the recovery action when the RecoveryAction property of the instance is 1 (Other).
    string Owner                            :    The User that submitted the Job, or the Service or method name that caused the job to be created.
    string PercentComplete                  :    The percentage of the job that has completed at the time that this value is requested. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the last run data can be stored in this single-valued property. \nNote that the value 101 is undefined and will be not be allowed in the next major revision of the specification.
    uint32 Priority                         :    Indicates the urgency or importance of execution of the Job. The lower the number, the higher the priority. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the setting information that would influence the results of a job.
    uint16 RecoveryAction                   :    Describes the recovery action to be taken for an unsuccessfully run Job. The possible values are: \n0 = Unknown, meaning it is unknown as to what recovery action to take \n1 = Other, indicating that the recovery action will be specified in the OtherRecoveryAction property \n2 = Do Not Continue, meaning stop the execution of the job and appropriately update its status \n3 = Continue With Next Job, meaning continue with the next job in the queue \n4 = Re-run Job, indicating that the job should be re-run \n5 = Run Recovery Job, meaning run the Job associated using the RecoveryJob relationship. Note that the recovery Job must already be in the queue from which it will run.
    sint8 RunDay                            :    The day in the month on which the Job should be processed. There are two different interpretations for this property, depending on the value of DayOfWeek. In one case, RunDay defines the day-in-month on which the Job is processed. This interpretation is used when the DayOfWeek is 0. A positive or negative integer indicates whether the RunDay should be calculated from the beginning or end of the month. For example, 5 indicates the fifth day in the RunMonth and -1 indicates the last day in the RunMonth. \n\nWhen RunDayOfWeek is not 0, RunDay is the day-in-month on which the Job is processed, defined in conjunction with RunDayOfWeek. For example, if RunDay is 15 and RunDayOfWeek is Saturday, then the Job is processed on the first Saturday on or after the 15th day in the RunMonth (for example, the third Saturday in the month). If RunDay is 20 and RunDayOfWeek is -Saturday, then this indicates the first Saturday on or before the 20th day in the RunMonth. If RunDay is -1 and RunDayOfWeek is -Sunday, then this indicates the last Sunday in the RunMonth.
    sint8 RunDayOfWeek                      :    A positive or negative integer used in conjunction with RunDay to indicate the day of the week on which the Job is processed. RunDayOfWeek is set to 0 to indicate an exact day of the month, such as March 1. A positive integer (representing Sunday, Monday, ..., Saturday) means that the day of week is found on or after the specified RunDay. A negative integer (representing -Sunday, -Monday, ..., -Saturday) means that the day of week is found on or BEFORE the RunDay.
    uint8 RunMonth                          :    The month during which the Job should be processed. Specify 0 for January, 1 for February, and so on.
    datetime RunStartInterval               :    The time interval after midnight when the Job should be processed. For example, \n00000000020000.000000:000 \nindicates that the Job should be run on or after two oclock, local time or UTC time (distinguished using the LocalOrUtcTime property.
    datetime ScheduledStartTime             :    The time that the current Job is scheduled to start. This time can be represented by the actual date and time, or an interval relative to the time that this property is requested. A value of all zeroes indicates that the Job is already executing. The property is deprecated in lieu of the more expressive scheduling properties, RunMonth, RunDay, RunDayOfWeek, and RunStartInterval.
    datetime StartTime                      :    The time that the Job was actually started. This time can be represented by an actual date and time, or by an interval relative to the time that this property is requested. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the last run time can be stored in this single-valued property.
    datetime TimeSubmitted                  :    The time that the Job was submitted to execute. A value of all zeroes indicates that the owning element is not capable of reporting a date and time. Therefore, the ScheduledStartTime and StartTime are reported as intervals relative to the time their values are requested.
    datetime UntilTime                      :    The time after which the Job is invalid or should be stopped. This time can be represented by an actual date and time, or by an interval relative to the time that this property is requested. A value of all nines indicates that the Job can run indefinitely.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Job'
        self.__parent__ = 'CIM_LogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'killjob':self.killjob,
            }
    def killjob(self,InputXmlFile=None):
        '''KillJob is being deprecated because there is no distinction made between an orderly shutdown and an immediate kill. CIM_ConcreteJob.RequestStateChange() provides Terminate and Kill options to allow this distinction. \n A method to kill this job and any underlying processes, and to remove any dangling associations.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'KillJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'KillJob',{}))
class __CIM_SoftwareIdentity__(__BaseClass__, __CIM_LogicalElement__):
    '''SoftwareIdentity provides descriptive information about a software component for asset tracking and/or installation dependency management. When the IsEntity property has the value TRUE, the instance of SoftwareIdentity represents an individually identifiable entity similar to Physical Element. SoftwareIdentity does NOT indicate whether the software is installed, executing, etc. This extra information may be provided through specialized associations to Software Identity. For instance, both InstalledSoftwareIdentity and ElementSoftwareIdentity may be used to indicate that the software identified by this class is installed. SoftwareIdentity is used when managing the software components of a ManagedElement that is the management focus. Since software may be acquired, SoftwareIdentity can be associated with a Product using the ProductSoftwareComponent relationship. The Application Model manages the deployment and installation of software via the classes, SoftwareFeatures and SoftwareElements. SoftwareFeature and SoftwareElement are used when the software component is the management focus. The deployment/installation concepts are related to the asset/identity one. In fact, a SoftwareIdentity may correspond to a Product, or to one or more SoftwareFeatures or SoftwareElements - depending on the granularity of these classes and the deployment model. The correspondence of Software Identity to Product, SoftwareFeature or SoftwareElement is indicated using the ConcreteIdentity association. Note that there may not be sufficient detail or instrumentation to instantiate ConcreteIdentity. And, if the association is instantiated, some duplication of information may result. For example, the Vendor described in the instances of Product and SoftwareIdentity MAY be the same. However, this is not necessarily true, and it is why vendor and similar information are duplicated in this class. \n Note that ConcreteIdentity can also be used to describe the relationship of the software to any LogicalFiles that result from installing it. As above, there may not be sufficient detail or instrumentation to instantiate this association. )

Class Properties:
    uint16 BuildNumber                      :    The build number of the software.
    string ClassificationDescriptions[]     :    An array of free-form strings providing more detailed explanations for any of the entries in the Classifications array. Note that each entry is related to one in the Classifications array located at the same index.
    uint16 Classifications[]                :    An array of enumerated integers that classify this software. For example, the software MAY be instrumentation (value=5) or firmware and diagnostic software (10 and 7). The use of value 6, Firmware/BIOS, is being deprecated. Instead, either the value 10 (Firmware) and/or 11 (BIOS/FCode) SHOULD be used. The value 13, Software Bundle, identifies a software package consisting of multiple discrete software instances that can be installed individually or together.\nEach contained software instance is represented by an instance of SoftwareIdentity that is associated to this instance of SoftwareIdentityinstance via a Component association.
    uint16 ExtendedResourceType             :    The binary format type of the installation package of the software. This property can be used to locate a SoftwareInstallationService capable of installing this software.
    string IdentityInfoType[]               :    An indexed array of fixed-form strings that provide the description of the type of information that is stored in the corresponding component of the IdentityInfoValue array. The elements of this property array describe the type of the value in the corresponding elements of the IndetityInfoValue array. When the IdentityInfoValue property is implemented, the IdentityInfoType property MUST be implemented. To insure uniqueness the IdentityInfoType property SHOULD be formatted using the following algorithm: < OrgID > : < LocalID > Where < OrgID > and < LocalID > are separated by a colon (:), and where < OrgID > MUST include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IdentityInfoType or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the < Schema Name > _ < Class Name > structure of Schema class names.) In addition, to ensure uniqueness, < OrgID > MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in IdentityInfoType MUST appear between < OrgID > and < LocalID > . < LocalID > is chosen by the business entity and SHOULD NOT be reused to identify different underlying software elements.
    string IdentityInfoValue[]              :    IdentityInfoValue captures additional information that MAY be used by an organization to describe or identify a software instance within the context of the organization. For example, large organizations may have several ways to address or identify a particular instance of software depending on where it is stored; a catalog, a web site, or for whom it is intended; development, customer service, etc. The indexed array property IdentityInfoValue contains 0 or more strings that contain a specific identity info string value. IdentityInfoValue is mapped and indexed to IdentityInfoType. When the IdentityInfoValue property is implemented, the IdentityInfoType property MUST be implemented and shall be formatted using the algorithm provided in the IdentityInfoType property Description.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
    string Languages[]                      :    The language editions supported by the software. The language codes defined in ISO 639 should be used.
    uint64 LargeBuildNumber                 :    The build number of the software if IsLargeBuildNumber is TRUE. TheLargeBuildNumber property should be used for all future implementations.
    uint16 MajorVersion                     :    The major number component of the softwares version information - for example, 12 from version 12.1(3)T. This property is defined as a numeric value to allow the determination of newer vs. older releases. A newer major release is indicated by a larger numeric value.
    string Manufacturer                     :    Manufacturer of this software.
    uint16 MinExtendedResourceTypeBuildNumber:    This property represents the Build number component of the minimum version of the installer, represented by theExtendedResourceType property, that is required to install this software.
    uint16 MinExtendedResourceTypeMajorVersion:    This property represents the major number component of the minimum version of the installer, represented by the ExtendedResourceType property, that is required to install this software.
    uint16 MinExtendedResourceTypeMinorVersion:    This property represents the minor number component of the minimum version of the installer, represented by theExtendedResourceType property, that is required to install this software.
    uint16 MinExtendedResourceTypeRevisionNumber:    This property represents the Revision number component of the minimum version of the installer, represented by theExtendedResourceType property, that is required to install this software.
    uint16 MinorVersion                     :    The minor number component of the softwares version information - for example, 1 from version 12.1(3)T. This property is defined as a numeric value to allow the determination of newer vs. older releases. A newer minor release is indicated by a larger numeric value.
    string OtherExtendedResourceTypeDescription:    A string describing the binary format type of the installation package of the software when the ExtendedResourceType property has a value of 1 (Other).
    datetime ReleaseDate                    :    The date the software was released.
    uint16 RevisionNumber                   :    The revision or maintenance release component of the softwares version information - for example, 3 from version 12.1(3)T. This property is defined as a numeric value to allow the determination of newer vs. older releases. A newer revision is indicated by a larger numeric value.
    string SerialNumber                     :    A manufacturer-allocated number used to identify the software.
    uint16 TargetOSTypes[]                  :    The TargetOSTypes property specifies the target operating systems supported by the software. When the target operating system of the software is not listed in the enumeration values, TargetOperatingSystems$AB property should be used to specify the target operating system.
    string TargetOperatingSystems[]         :    Specifies the target operating systems of the software. This property should be used when a target operating system is not listed in the TargetOSTypes array values.
    string TargetTypes[]                    :    An array of strings that describes the compatible installer(s). The purpose of the array elements is to establish compatibility between a SoftwareIdentity and a SoftwareInstallationService that can install the SoftwareIdentity by comparing the values of the array elements of this property to the values of SoftwareInstallationServiceCapabilities.SupportedTargetTypes$AB propertys array elements.
    string VersionString                    :    A string representing the complete software version information - for example, 12.1(3)T. This string and the numeric major/minor/revision/build properties are complementary. Since vastly different representations and semantics exist for versions, it is not assumed that one representation is sufficient to permit a client to perform computations (i.e., the values are numeric) and a user to recognize the softwares version (i.e., the values are understandable and readable). Hence, both numeric and string representations of version are provided.
    boolean IsEntity = false                :    The IsEntity property is used to indicate whether the SoftwareIdentity corresponds to a discrete copy of the software component or is being used to convey descriptive and identifying information about software that is not present in the management domain.A value of TRUE shall indicate that the SoftwareIdentity instance corresponds to a discrete copy of the software component. A value of FALSE shall indicate that the SoftwareIdentity instance does not correspond to a discrete copy of the Software.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SoftwareIdentity'
        self.__parent__ = 'CIM_LogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Account__(__BaseClass__, __CIM_EnabledLogicalElement__):
    '''CIM_Account is the information held by a SecurityService to track identity and privileges managed by that service. Common examples of an Account are the entries in a UNIX /etc/passwd file. Several kinds of security services use various information from those entries - the /bin/login program uses the account name ( root ) and hashed password to authenticate users, and the file service, for instance, uses the UserID field ( 0 ) and GroupID field ( 0 ) to record ownership and determine access control privileges on files in the file system. This class is defined so as to incorporate commonly-used LDAP attributes to permit implementations to easily derive this information from LDAP-accessible directories. \n \n The semantics of Account overlap with that of the class, CIM_Identity. However, aspects of Account - such as its specific tie to a System - are valuable and have been widely implemented. For this reason, the Account and Identity classes are associated using a subclass of LogicalIdentity (AccountIdentity), instead of deprecating the Account class in the CIM Schema. When an Account has been authenticated, the corresponding Identity s TrustEstablished Boolean would be set to TRUE. Then, the Identity class can be used as defined for authorization purposes. )

Class Properties:
    uint16 ComplexPasswordRulesEnforced[]   :    ComplexPasswordRulesEnforced indicates the rules for constructing a complex password enforced by the Account.\nMinimum Length a minimum length is enforced for passwords for the account.\nPreclude User ID inclusion precluding the password from including the user ID is supported. \nMaximum Repeating Characters a limit will be enforced on the number of times a character can occur consecutively. \nLower Case Alpha at least one lower case alpha character is required. \nUpper Case Alpha at least one upper case alpha character is required. \nNumeric Character at least one numeric character is required. \nSpecial Character at least one special character is required.
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string Descriptions[]                   :    The Descriptions property values may contain human-readable descriptions of the object. In the case of an LDAP-derived instance, the description attribute may have multiple values that, therefore, cannot be placed in the inherited Description property.
    string Host[]                           :    Based on RFC1274, the host name of the system(s) for which the account applies. The host name may be a fully-qualified DNS name or it may be an unqualified host name.
    datetime InactivityTimeout              :    InactivityTimeout specifies the interval after which if an account has been inactive, it shall be Disabled. The value may be expressed in interval format, as an absolute date-time, or be NULL.\nAn absolute date-time shall indicate when the password will be disabled due to inactivity.\nAn interval value shall indicate the time remaining before the password is disabled due to inactivity.\nA value of NULL shall indicate that the Account will not be disabled due to inactivity.
    datetime LastLogin                      :    LastLogin shall be an absolute date-time that specifies the last successful authentication that occurred for this Account.A value of 99990101000000.000000+000 shall indicate the Account has never been used. A value of NULL shall indicate the last successful login is unknown.
    string LocalityName[]                   :    This property contains the name of a locality, such as a city, county or other geographic region.
    uint16 MaximumSuccessiveLoginFailures   :    MaximumSuccessiveLoginFailures indicates the number of successive failed login attempts that shall result in the Account being disabled. A value of zero shall indicate that the Account will not be disabled due to successive failed login attempts.
    string Name                             :    The Name property defines the label by which the object is known. The value of this property may be set to be the same as that of the UserID property or, in the case of an LDAP-derived instance, the Name property value may be set to the distinguishedName of the LDAP-accessed object instance.
    string OU[]                             :    The name of an organizational unit related to the account.
    string ObjectClass[]                    :    In the case of an LDAP-derived instance, the ObjectClass property value(s) may be set to the objectClass attribute values.
    string OrganizationName[]               :    The name of the organization related to the account.
    string OtherUserPasswordEncryptionAlgorithm:    If the UserPasswordEncryptionAlgorithm property is set to 1 (Other) this property contains a free form string that provides more information about the encryption algorithm. If UserPasswordEncryptionAlgorithm is not set to 1 (Other) this property has no meaning.
    datetime PasswordExpiration             :    PasswordExpiration indicates the maximum password age enforced for the Account. The value may be expressed as an absolute date-time as an interval, or may be NULL.\nAn absolute date-time shall indicate the date and time when the password will expire.\nAn interval value shall indicate the time remaining until the password expires.\nA value of NULL shall indicate the password never expires.
    uint16 PasswordHistoryDepth             :    PasswordHistoryDepth indicates the number of previous passwords that shall be maintained for the Account. The Account shall preclude the selection of a password if it occurs in the password history. A value of zero shall indicate that a password history is not maintained.
    string SeeAlso[]                        :    In the case of an LDAP-derived instance, the SeeAlso property specifies distinguished name of other Directory objects which may be other aspects (in some sense) of the same real world object.
    string SystemCreationClassName          :    The scoping Systems CCN.
    string SystemName                       :    The scoping Systems Name.
    string UserCertificate[]                :    Based on inetOrgPerson and for directory compatibility, the UserCertificate property may be used to specify a public key certificate for the person.
    string UserID                           :    UserID is the value used by the SecurityService to represent identity. For an authentication service, the UserID may be the name of the user, or for an authorization service the value which serves as a handle to a mapping of the identity.
    uint32 UserPasswordEncoding             :    UserPasswordEncoding specifies encoding used for the UserPassword property.\r\nkbd denotes a string in hexadecimal format containing keyboard scan code input. An example of a UserPassword structured in this format would be 321539191E1F1F11181320, which is the representation of my password in US English keyboard scan codes.\n\rascii denotes clear text that complies with the ASCII character set. An example would be my password.\npin denotes that only numeric input in ASCII text is allowed for the UserPassword. An example would be 1234.\nUTF-8 denotes that the UserPassword is a Unicode string that is encoded using UTF-8 character set.\nUTF-16 denotes that the UserPassword is a Unicode string that is encoded using UTF-16 character set. The byte order mark (BOM) shall be the first character of the string.\nUTF-16LE denotes that the UserPassword is a Unicode string that is encoded using UTF-16 character set in little-endian byte order.\nUTF-16BE denotes that the UserPassword is a Unicode string that is encoded using UTF-16 character set in big-endian byte order.\nUCS-2 denotes that the UserPassword is a Unicode string that is encoded using UCS-2 character set.\nUCS-2LE denotes that the UserPassword is a Unicode string that is encoded using UCS-2 character set in little endian byte order.\nUCS-2BE denotes that the UserPassword is a Unicode string that is encoded using UCS-2 character set in big endian byte order.
    uint16 UserPasswordEncryptionAlgorithm  :    The encryption algorithm (if any) used by the client to produce the value in the UserPassword property when creating or modifying an instance of CIM_Account. The original password is encrypted using the algorithm specified in this property, and UserPassword contains the resulting encrypted value. In response to an operation request that would return the value of the UserPassword property to a client, an implementation shall instead return an array of length zero.\nThe value of UserPasswordEncryptionAlgorithm in an instance of CIM_Account shall be 0 (None) unless the SupportedUserPasswordEncryptionAlgorithms$AB property in the CIM_AccountManagementCapabilities instance associated with the CIM_AccountManagementService instance associated with the CIM_Account instance contains a non-null entry other than 0 (None).\nThis property does not prevent the use of encryption at the transport, network, or data-link layer to protect communications between a management client and the server, nor is it meant to encourage communications without such encryption.\nThe supported values for this property are:\n- 0 (None): Indicates that the contents of UserPassword are not encrypted.\n- 1 (Other): Indicates that the contents of UserPassword are encrypted using an algorithm not specifically identified in the value map for this property, and that this algorithm is described in OtherUserPasswordEncryptionAlgorithm.\n- 2 (HTTP Digest MD5(A1)): The MD5 hash algorithm, applied to the string A1 defined in RFC2617 as the concatenation username-value : realm-value : passwd, where username-value is provided by the client as the value of the UserID property. passwd is the underlying user password. realm-value is the HTTP digest realm value, and is provided by the server. The semantics of the HTTP digest realm are specified in RFC 2617. The server may surface the realm-value in the UserPasswordEncryptionSalt property of CIM_AccountManagementCapabilities.
    string UserPassword[]                   :    In the case of an LDAP-derived instance, the UserPassword property may contain an encrypted password used to access the persons resources in a directory.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Account'
        self.__parent__ = 'CIM_EnabledLogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Log__(__BaseClass__, __CIM_EnabledLogicalElement__):
    '''Log represents any type of event, error or informational register or chronicle. The object describes the existence of the log and its characteristics. Log does not dictate the form of the data represented or how records/messages are stored in the log and/or accessed. Subclasses will define the appropriate methods and behavior. )

Class Properties:
    uint16 OverwritePolicy = 0              :    OverwritePolicy is an integer enumeration that indicates whether the log, represented by the CIM_Log subclasses, can overwrite its entries.Unknown (0) indicates the logs overwrite policy is unknown. \nWraps when Full (2) indicates that the log overwrites its entries with new entries when the log has reached its maximum capacity. \nNever Overwrites (7) indicates that the log never overwrites its entries by the new entries.
    uint16 LogState = 4                     :    LogState is an integer enumeration that indicates the current state of a log represented by CIM_Log subclasses. LogState is to be used in conjunction with the EnabledState property to fully describe the current state of the log. The following text briefly summarizes the various log states: \nUnknown (0) indicates the state of the log is unknown. \nNormal (2) indicates that the log is or could be executing logging commands, will process any queued log entries, and will queue new logging requests. \nErasing (3) indicates that the log is being erased. \nNot Applicable (4) indicates the log does not support representing a log state.
    uint64 CurrentNumberOfRecords           :    Current number of records in the Log.
    uint64 MaxNumberOfRecords               :    Maximum number of records that can be captured in the Log. If undefined, a value of zero should be specified.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Log'
        self.__parent__ = 'CIM_EnabledLogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'clearlog':self.clearlog,
            }
    def clearlog(self,InputXmlFile=None):
        '''Requests that the Log be cleared of all entries. \n The return value should be 0 if the request was successfully executed, 1 if the request is not supported, and some other value, as indicated by the ValueMap/Values qualifiers, if an error occurred.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',{}))
class __CIM_LogicalDevice__(__BaseClass__, __CIM_EnabledLogicalElement__):
    '''An abstraction or emulation of a hardware entity, that may or may not be Realized in physical hardware. Any characteristics of a LogicalDevice that are used to manage its operation or configuration are contained in, or associated with, the LogicalDevice object. Examples of the operational properties of a Printer would be paper sizes supported, or detected errors. Examples of the configuration properties of a Sensor Device would be threshold settings. Various configurations could exist for a LogicalDevice. These configurations could be contained in Setting objects and associated with the LogicalDevice. )

Class Properties:
    uint16 AdditionalAvailability[]         :    Additional availability and status of the Device, beyond that specified in the Availability property. The Availability property denotes the primary status and availability of the Device. In some cases, this will not be sufficient to denote the complete status of the Device. In those cases, the AdditionalAvailability property can be used to provide further information. For example, a Devices primary Availability may be Off line (value=8), but it may also be in a low power state (AdditonalAvailability value=14), or the Device could be running Diagnostics (AdditionalAvailability value=5, In Test).
    uint16 Availability                     :    The primary availability and status of the Device. (Additional status information can be specified using the Additional Availability array property.) For example, the Availability property indicates that the Device is running and has full power (value=3), or is in a warning (4), test (5), degraded (10) or power save state (values 13-15 and 17). Regarding the Power Save states, these are defined as follows: Value 13 (Power Save - Unknown) indicates that the Device is known to be in a power save mode, but its exact status in this mode is unknown; 14 (Power Save - Low Power Mode) indicates that the Device is in a power save state but still functioning, and may exhibit degraded performance; 15 (Power Save - Standby) describes that the Device is not functioning but could be brought to full power quickly; and value 17 (Power Save - Warning) indicates that the Device is in a warning state, though also in a power save mode.
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string DeviceID                         :    An address or other identifying information to uniquely name the LogicalDevice.
    boolean ErrorCleared                    :    ErrorCleared is a boolean property indicating that the error reported in LastErrorCode is now cleared.
    string ErrorDescription                 :    ErrorDescription is a free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken.
    string IdentifyingDescriptions[]        :    An array of free-form strings providing explanations and details behind the entries in the OtherIdentifyingInfo array. Note, each entry of this array is related to the entry in OtherIdentifyingInfo that is located at the same index.
    uint32 LastErrorCode                    :    LastErrorCode captures the last error code reported by the LogicalDevice.
    uint64 MaxQuiesceTime                   :    The MaxQuiesceTime property has been deprecated. When evaluating the use of Quiesce, it was determine that this single property is not adequate for describing when a device will automatically exit a quiescent state. In fact, the most likely scenario for a device to exit a quiescent state was determined to be based on the number of outstanding requests queued rather than on a maximum time. This will be re-evaluated and repositioned later. \nMaximum time in milliseconds, that a Device can run in a Quiesced state. A Devices state is defined in its Availability and AdditionalAvailability properties, where Quiesced is conveyed by the value 21. What occurs at the end of the time limit is device-specific. The Device may unquiesce, may offline or take other action. A value of 0 indicates that a Device can remain quiesced indefinitely.
    string OtherIdentifyingInfo[]           :    OtherIdentifyingInfo captures additional data, beyond DeviceID information, that could be used to identify a LogicalDevice. One example would be to hold the Operating Systems user friendly name for the Device in this property.
    uint16 PowerManagementCapabilities[]    :    An enumerated array describing the power management capabilities of the Device. The use of this property has been deprecated. Instead, the PowerCapabilites property in an associated PowerManagementCapabilities class should be used.
    boolean PowerManagementSupported        :    Boolean indicating that the Device can be power managed. The use of this property has been deprecated. Instead, the existence of an associated PowerManagementCapabilities class (associated using the ElementCapabilities relationhip) indicates that power management is supported.
    uint64 PowerOnHours                     :    The number of consecutive hours that this Device has been powered, since its last power cycle.
    uint16 StatusInfo                       :    The StatusInfo property indicates whether the Logical Device is in an enabled (value = 3), disabled (value = 4) or some other (1) or unknown (2) state. If this property does not apply to the LogicalDevice, the value, 5 (Not Applicable), should be used. StatusInfo has been deprecated in lieu of a more clearly named property with additional enumerated values (EnabledState), that is inherited from ManagedSystemElement. \nIf a Device is (Enabled)(value=3), it has been powered up, and is configured and operational. The Device may or may not be functionally active, depending on whether its Availability (or AdditionalAvailability) indicate that it is (Running/Full Power)(value=3) or (Off line) (value=8). In an enabled but offline mode, a Device may be performing out-of-band requests, such as running Diagnostics. If (Disabled) StatusInfo value=4), a Device can only be enabled or powered off. In a personal computer environment, (Disabled) means that the Devices driver is not available in the stack. In other environments, a Device can be disabled by removing its configuration file. A disabled device is physically present in a System and consuming resources, but can not be communicated with until a load of a driver, a load of a configuration file or some other enabling activity has occurred.
    string SystemCreationClassName          :    The scoping Systems CreationClassName.
    string SystemName                       :    The scoping Systems Name.
    uint64 TotalPowerOnHours                :    The total number of hours that this Device has been powered.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_LogicalDevice'
        self.__parent__ = 'CIM_EnabledLogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'reset':self.reset,
            'setpowerstate':self.setpowerstate,
            'quiescedevice':self.quiescedevice,
            'enabledevice':self.enabledevice,
            'onlinedevice':self.onlinedevice,
            'saveproperties':self.saveproperties,
            'restoreproperties':self.restoreproperties,
            }
    def reset(self,InputXmlFile=None):
        '''Requests a reset of the LogicalDevice. The return value should be 0 if the request was successfully executed, 1 if the request is not supported and some other value if an error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'Reset',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'Reset',{}))
    def setpowerstate(self,PowerState=None,InputXmlFile=None):
        '''Sets the power state of the Device. The use of this method has been deprecated. Instead, use the SetPowerState method in the associated PowerManagementService class.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PowerState                       :        The power state to set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',{'PowerState': PowerState}))
    def quiescedevice(self,InputXmlFile=None):
        '''The QuiesceDevice method has been deprecated in lieu of the more general RequestStateChange method that directly overlaps with the functionality provided by this method. \n Requests that the LogicalDevice cleanly cease all current activity ( Quiesce input parameter = TRUE) or resume activity (= FALSE). For this method to quiesce a Device, that Device should have an Availability (or Additional Availability) of Running/Full Power (value=3) and an EnabledStatus/StatusInfo of Enabled . For example, if quiesced, a Device may then be offlined for diagnostics, or disabled for power off and hot swap. For the method to unquiesce a Device, that Device should have an Availability (or AdditionalAvailability) of Quiesced (value=21) and an EnabledStatus/StatusInfo of Enabled . In this case, the Device would be returned to an Enabled and Running/Full Power status. \n The method s return code should indicate the success or failure of the quiesce. It should return 0 if successful, 1 if the request is not supported at all, 2 if the request is not supported due to the current state of the Device, and some other value if any other error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'QuiesceDevice',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'QuiesceDevice',{}))
    def enabledevice(self,InputXmlFile=None):
        '''The EnableDevice method has been deprecated in lieu of the more general RequestStateChange method that directly overlaps with the functionality provided by this method. \n Requests that the LogicalDevice be enabled ( Enabled input parameter = TRUE) or disabled (= FALSE). If successful, the Device s StatusInfo/EnabledState properties should reflect the desired state (enabled/disabled). Note that this method s function overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (i.e., a persisted value) of the last state request. Invoking the EnableDevice method should set the RequestedState property appropriately. \n The return code should be 0 if the request was successfully executed, 1 if the request is not supported and some other value if an error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'EnableDevice',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'EnableDevice',{}))
    def onlinedevice(self,InputXmlFile=None):
        '''The OnlineDevice method has been deprecated in lieu of the more general RequestStateChange method that directly overlaps with the functionality provided by this method. \n Requests that the LogicalDevice be brought online ( Online input parameter = TRUE) or taken offline (= FALSE). Online indicates that the Device is ready to accept requests, and is operational and fully functioning. In this case, the Device s Availability property would be set to a value of 3 ( Running/Full Power ). Offline indicates that a Device is powered up and operational, but not processing functional requests. In an offline state, a Device may be capable of running diagnostics or generating operational alerts. For example, when the Offline button is pushed on a Printer, the Device is no longer available to process print jobs, but could be available for diagnostics or maintenance. \n If this method is successful, the Device s Availability and AdditionalAvailability properties should reflect the updated status. If a failure occurs trying to bring the Device online or offline, it should remain in its current state. IE, the request, if unsuccessful, should not leave the Device in an indeterminate state. When bringing a Device back Online , from an Offline mode, the Device should be restored to its last Online state, if at all possible. Only a Device that has an EnabledState/StatusInfo of Enabled and has been configured can be brought online or taken offline. \n OnlineDevice should return 0 if successful, 1 if the request is not supported at all, 2 if the request is not supported due to the current state of the Device, and some other value if any other error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier. \n Note that this method s function overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (i.e., a persisted value) of the last state request. Invoking the OnlineDevice method should set the RequestedState property appropriately.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'OnlineDevice',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'OnlineDevice',{}))
    def saveproperties(self,InputXmlFile=None):
        '''Requests that the Device capture its current configuration, setup and/or state information in a backing store. The goal would be to use this information at a later time (via the RestoreProperties method), to return a Device to its present condition . This method may not be supported by all Devices. The method should return 0 if successful, 1 if the request is not supported, and some other value if any other error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SaveProperties',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SaveProperties',{}))
    def restoreproperties(self,InputXmlFile=None):
        '''Requests that the Device re-establish its configuration, setup and/or state information from a backing store. The intent is to capture this information at an earlier time (via the SaveProperties method), and use it to return a Device to this earlier condition . This method may not be supported by all Devices. The method should return 0 if successful, 1 if the request is not supported, and some other value if any other error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreProperties',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreProperties',{}))
class __CIM_Service__(__BaseClass__, __CIM_EnabledLogicalElement__):
    '''A Service is a LogicalElement that represents the availability of functionality that can be managed. This functionality may be provided by a seperately modeled entity such as a LogicalDevice or a SoftwareFeature, or both. The modeled Service typically provides only functionality required for management of itself or the elements it affects. )

Class Properties:
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string Name                             :    The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
    string PrimaryOwnerContact              :    A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on).
    string PrimaryOwnerName                 :    The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
    string StartMode                        :    Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request.
    boolean Started                         :    Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).
    string SystemCreationClassName          :    The CreationClassName of the scoping System.
    string SystemName                       :    The Name of the scoping System.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Service'
        self.__parent__ = 'CIM_EnabledLogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'startservice':self.startservice,
            'stopservice':self.stopservice,
            }
    def startservice(self,InputXmlFile=None):
        '''The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n \n Note: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple start semantics are convenient to use.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StartService',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StartService',{}))
    def stopservice(self,InputXmlFile=None):
        '''The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n \n Note: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple stop semantics are convenient to use.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StopService',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StopService',{}))
class __CIM_System__(__BaseClass__, __CIM_EnabledLogicalElement__):
    '''CIM_System represents an entity made up of component parts (defined by the SystemComponent relationship), that operates as a functional whole . Systems are top-level objects in the CIM hierarchy, requiring no scoping or weak relationships in order to exist and have context. It should be reasonable to uniquely name and manage a System at an enterprise level. For example, a ComputerSystem is a kind of System that can be uniquely named and independently managed in an enterprise. However, these qualities are not true for the power supply (or the power supply sub- system ) within the computer. \n \n Although a System can be viewed as a Collection, this view is not the correct model. A Collection is simply a bag that holds its members. A System is a higher-level abstraction, built out of its individual components. It is more than the sum of its parts. Note that System is a subclass of EnabledLogicalElement which allows the entire abstraction to be functionally enabled or disabled at a higher level than enabling or disabling its component parts. )

Class Properties:
    string CreationClassName                :    CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
    string IdentifyingDescriptions[]        :    An array of free-form strings providing explanations and details behind the entries in the OtherIdentifying Info array. Note, each entry of this array is related to the entry in OtherIdentifyingInfo that is located at the same index.
    string Name                             :    The inherited Name serves as the key of a System instance in an enterprise environment.
    string NameFormat                       :    The System object and its derivatives are top-level objects of CIM. They provide the scope for numerous components. Having unique System keys is required. A heuristic can be defined in individual System subclasses to attempt to always generate the same System Name Key. The NameFormat property identifies how the System name was generated, using the heuristic of the subclass.
    string OtherIdentifyingInfo[]           :    OtherIdentifyingInfo captures additional data, beyond System Name information, that could be used to identify a ComputerSystem. One example would be to hold the Fibre Channel World-Wide Name (WWN) of a node. Note that if only the Fibre Channel name is available and is unique (able to be used as the System key), then this property would be NULL and the WWN would become the System key, its data placed in the Name property.
    string PrimaryOwnerContact              :    A string that provides information on how the primary system owner can be reached (for example, phone number, e-mail address, and so on).
    string PrimaryOwnerName                 :    The name of the primary system owner. The system owner is the primary user of the system.
    string Roles[]                          :    An array (bag) of strings that specifies the administrator -defined roles this System plays in the managed environment. Examples might be Building 8 print server or Boise user directories. A single system may perform multiple roles. \nNote that the instrumentation view of the roles of a System is defined by instantiating a specific subclass of System, or by properties in a subclass, or both. For example, the purpose of a ComputerSystem is defined using the Dedicated and OtherDedicatedDescription properties.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_System'
        self.__parent__ = 'CIM_EnabledLogicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Account__(__BaseClass__, __CIM_Account__):
    '''DCIM_Account is a derivation of CIM_Account to represent accounts. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Account'
        self.__parent__ = 'CIM_Account'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            }
    def requeststatechange(self,RequestedState=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RequestedState                   :        

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'RequestedState': RequestedState}))
class __CIM_RecordLog__(__BaseClass__, __CIM_Log__):
    '''RecordLog serves as an aggregation point for LogRecord objects. This class presents a higher level view of a log than its peer class MessageLog (which uses iterators) and introduces a new key structure. Access to records in this log is achieved through the use of the standard CIM Operations defined as part of WBEM. )

Class Properties:
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. \nIn order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RecordLog'
        self.__parent__ = 'CIM_Log'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCRecordLog__(__BaseClass__, __CIM_RecordLog__):
    '''A class derived from RecordLog to represent the LifeCycle Log. )

Class Properties:
    uint16 OverwritePolicy                  :    The OverwritePolicy is an integer enumeration that indicates whether the log, represented by the CIM_Log subclasses, can overwrite its entries.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCRecordLog'
        self.__parent__ = 'CIM_RecordLog'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'getconfigresults':self.getconfigresults,
            }
    def getconfigresults(self,InstanceID=None,JobID=None,InputXmlFile=None):
        '''This method is called to retrieve the configuration results available with the lifecycle log entry instance.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string InstanceID                       :        Instance identifier of the lifecycle log entry to retrieve the configuration details.
    string JobID                            :        JobID of the configuration job.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetConfigResults',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetConfigResults',{'InstanceID': InstanceID, 'JobID': JobID}))
class __DCIM_SELRecordLog__(__BaseClass__, __CIM_RecordLog__):
    '''A class derived from RecordLog to represent the System Event Log. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELRecordLog'
        self.__parent__ = 'CIM_RecordLog'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'clearlog':self.clearlog,
            }
    def clearlog(self,InputXmlFile=None):
        '''This method is called to clear the system event log of entries.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',{}))
class __CIM_LogicalPort__(__BaseClass__, __CIM_LogicalDevice__):
    '''The abstraction of a port or connection point of a Device. This object should be instantiated when the Port has independent management characteristics from the Device that includes it. Examples are a Fibre Channel Port and a USB Port. )

Class Properties:
    uint64 MaxSpeed                         :    The maximum bandwidth of the Port in Bits per Second.
    string OtherPortType                    :    Describes the type of module, when PortType is set to 1 (Other).
    uint16 PortType                         :    PortType is defined to force consistent naming of the type property in subclasses and to guarantee unique enum values for all instances of NetworkPort. When set to 1 (Other), related property OtherPortType contains a string description of the type of port. A range of values, DMTF_Reserved, has been defined that allows subclasses to override and define their specific types of ports.
    uint64 RequestedSpeed                   :    The requested bandwidth of the Port in Bits per Second. The actual bandwidth is reported in LogicalPort.Speed.
    uint64 Speed                            :    The bandwidth of the Port in Bits per Second.
    uint16 UsageRestriction                 :    In some circumstances, a LogicalPort might be identifiable as a front end or back end port. An example of this situation would be a storage array that might have back end ports to communicate with disk drives and front end ports to communicate with hosts. If there is no restriction on the use of the port, then the value should be set to not restricted.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_LogicalPort'
        self.__parent__ = 'CIM_LogicalDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PowerSupply__(__BaseClass__, __CIM_LogicalDevice__):
    '''Capabilities and management of the PowerSupply LogicalDevice. )

Class Properties:
    uint16 ActiveInputVoltage               :    ActiveInputVoltage indicates which input voltage range is currently in use. Range 1, 2, or both can be specified using the values 3, 4, or 5, respectively. If the Supply is not currently drawing power, the value 6 (Neither) can be specified. This information is necessary in the case of a UPS, a subclass of PowerSupply.
    boolean IsSwitchingSupply               :    Boolean indicating that the PowerSupply is a switching (instead of linear) supply.
    uint32 Range1InputFrequencyHigh         :    The frequency (in hertz) at the high end of the Input Frequency Range 1 of this Power Supply. A value of 0 implies DC.
    uint32 Range1InputFrequencyLow          :    The frequency (in hertz) at the low end of the Input Frequency Range 1 of this Power Supply. A value of 0 implies DC.
    uint32 Range1InputVoltageHigh           :    The high voltage of Input Voltage Range 1 for this Power Supply, in millivolts. A value of 0 denotes unknown.
    uint32 Range1InputVoltageLow            :    The low voltage of Input Voltage Range 1 for this Power Supply, in millivolts. A value of 0 denotes unknown.
    uint32 Range2InputFrequencyHigh         :    The frequency (in hertz) at the high end of the Input Frequency Range 2 of this Power Supply. A value of 0 implies DC.
    uint32 Range2InputFrequencyLow          :    The frequency (in hertz) at the low end of the Input Frequency Range 2 of this Power Supply. A value of 0 implies DC.
    uint32 Range2InputVoltageHigh           :    The high voltage of Input Voltage Range 2 for this Power Supply, in millivolts. A value of 0 denotes unknown.
    uint32 Range2InputVoltageLow            :    The low voltage of Input Voltage Range 2 for this Power Supply, in millivolts. A value of 0 denotes unknown.
    uint32 TotalOutputPower                 :    Represents the total output power of the PowerSupply in milliWatts. 0 denotes unknown.
    uint16 TypeOfRangeSwitching             :    TypeOfRangeSwitching describes the kind of input voltage range switching that is implemented in this PowerSupply. For example, autoswitching can be specified (value=4).
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PowerSupply'
        self.__parent__ = 'CIM_LogicalDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Sensor__(__BaseClass__, __CIM_LogicalDevice__):
    '''A Sensor is an entity capable of measuring or reporting the characteristics of some physical property - for example, the temperature or voltage characteristics of a Computer System. )

Class Properties:
    string CurrentState                     :    The current state indicated by the Sensor. This is always one of the PossibleStates.
    string OtherSensorTypeDescription       :    A string describing the Sensor type - used when the SensorType property is set to Other.
    uint64 PollingInterval                  :    The polling interval that the Sensor hardware or the instrumentation uses to determine the current state of the Sensor.
    string PossibleStates[]                 :    PossibleStates enumerates the string outputs of the Sensor. For example, a Switch Sensor may output the states On, or Off. Another implementation of the Switch may output the states Open, and Close. Another example is a NumericSensor supporting thresholds. This Sensor can report the states like Normal, Upper Fatal, Lower Non-Critical, etc. A NumericSensor that does not publish readings and thresholds, but stores this data internally, can still report its states.
    string SensorContext                    :    SensorContext indicates the purpose and context of the sensor. For example, the property may indicate what entity is being monitored or where the sensor is installed. Contextual and location information should be provided using associations to existing model elements. This property may be used if additional differentiation is necessary beyond that which is possible to convey using associations or values of SensorType. The value shall be formatted using the following algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the SensorContext or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, <OrgID> shall not contain a colon (:). \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements.
    uint16 SensorType                       :    The Type of the Sensor, e.g. Voltage or Temperature Sensor. If the type is set to Other, then the OtherSensorType Description can be used to further identify the type, or if the Sensor has numeric readings, then the type of the Sensor can be implicitly determined by the Units. A description of the different Sensor types is as follows: A Temperature Sensor measures the environmental temperature. Voltage and Current Sensors measure electrical voltage and current readings. A Tachometer measures speed/revolutions of a Device. For example, a Fan Device can have an associated Tachometer which measures its speed. A Counter is a general purpose Sensor that measures some numerical property of a Device. A Counter value can be cleared, but it never decreases. A Switch Sensor has states like Open/Close, On/Off, or Up/Down. A Lock has states of Locked/Unlocked. Humidity, Smoke Detection and Air Flow Sensors measure the equivalent environmental characteristics. A Presence Sensor detects the presence of a PhysicalElement. A Power Consumption Sensor measures the instantaneous power consumed by a managed element. A Power Production Sensor measures the instantaneous power produced by a managed element such as a power supply or a voltage regulator. A pressure sensor is used to report pressure. Intrusion sensor reports an intrusion of an enclosure regardless whether it was authorized or not.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Sensor'
        self.__parent__ = 'CIM_LogicalDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_StorageExtent__(__BaseClass__, __CIM_LogicalDevice__):
    '''StorageExtent describes the capabilities and management of the various media that exist to store data and allow data retrieval. This superclass could be used to represent the various components of RAID (Hardware or Software) or as a raw logical extent on top of physical media. )

Class Properties:
    uint16 Access                           :    Access describes whether the media is readable (value=1), writeable (value=2), or both (value=3). Unknown (0) and Write Once (4) can also be defined.
    uint64 BlockSize                        :    Size in bytes of the blocks which form this StorageExtent. If variable block size, then the maximum block size in bytes should be specified. If the block size is unknown or if a block concept is not valid (for example, for AggregateExtents, Memory or LogicalDisks), enter a 1.
    uint64 ConsumableBlocks                 :    The maximum number of blocks, of size BlockSize, which are available for consumption when layering StorageExtents using the BasedOn association. This property only has meaning when this StorageExtent is an Antecedent reference in a BasedOn relationship. For example, a StorageExtent could be composed of 120 blocks. However, the Extent itself may use 20 blocks for redundancy data. If another StorageExtent is BasedOn this Extent, only 100 blocks would be available to it. This information (100 blocks is available for consumption) is indicated in the ConsumableBlocks property.
    uint16 DataOrganization                 :    Type of data organization used.
    uint16 DataRedundancy                   :    Number of complete copies of data currently maintained.
    uint8 DeltaReservation                  :    Current value for Delta reservation. This is a percentage that specifies the amount of space that should be reserved in a replica for caching changes.
    string ErrorMethodology                 :    ErrorMethodology is a free-form string describing the type of error detection and correction supported by this StorageExtent.
    uint16 ExtentStatus[]                   :    StorageExtents have additional status information beyond that captured in the OperationalStatus and other properties, inherited from ManagedSystemElement. This additional information (for example, Protection Disabled, value=9) is captured in the ExtentStatus property. \nIn-Band Access Granted says that access to data on an extent is granted to some consumer and is only valid when Exported is also set. It is set as a side effect of PrivilegeManagementService.ChangeAccess or equivalent interfaces. \nImported indicates that the extent is used in the current system, but known to be managed by some other system. For example, a server imports volumes from a disk array. \nExported indicates the extent is meant to be used by some comsumer. A disk arrays logical units are exported. \nIntermediate composite extents may be neither imported nor exported.\nRelocating indicates the extent is being relocated.
    boolean IsBasedOnUnderlyingRedundancy   :    True indicates that the underlying StorageExtent(s) participate in a StorageRedundancyGroup.
    string Name                             :    A unique identifier for the Extent.
    uint16 NameFormat                       :    The list here applies to all StorageExtent subclasses. Please look at the Description in each subclass for guidelines on the approriate values for that subclass. Note that any of these formats could apply to a CompositeExtent. \n\nNote - this property originally touched on two concepts that are now separated into this property and NameNamespace. Values 2,3,4,5,6, and 8 are retained for backwards compatibility but are deprecated in lieu of the corresponding values in CIM_StorageExtent.NameNamespace. \n\nFor example, the preferred source for SCSI virtual (RAID) disk names is from Inquiry VPD page 83 response, type 3 identifiers. These will have NameFormat set to NAA and NameNamespace to VPD83Type3. \n\nFormat of the Name property. Values for extents representing SCSI volumes are (per SCSI SPC-3): \n2 = VPD Page 83, NAA IEEE Registered Extended (VPD83NAA6) \n(DEPRECATED) \n3 = VPD Page 83, NAA IEEE Registered (VPD83NAA5) \n(DEPRECATED) \n4 = VPD Page 83, (VPD83Type2) (DEPRECATED) \n5 = VPD Page 83, \nT10 Vendor Identification (VPD83Type1) (DEPRECATED) \n6 = VPD Page 83, Vendor Specific (VPD83Type0) (DEPRECATED) \n7 = Serial Number/Vendor/Model (SNVM) SNVM is 3 strings representing the vendor name, product name within the vendor namespace, and the serial number within the model namespace. Strings are delimited with a +. Spaces may be included and are significant. The serial number is the text representation of the serial number in hexadecimal upper case. This represents the vendor and model ID from SCSI Inquiry data; the vendor field MUST be 8 characters wide and the product field MUST be 16 characters wide. For example, \nACME____+SUPER DISK______+124437458 (_ is a space character) \n8 = Node WWN (for single LUN/controller) (NodeWWN) \n(DEPRECATED) \n9 = NAA as a generic format. See \nhttp:Formatted as 16 or 32 unseparated uppercase hex characters (2 per binary byte). For example 21000020372D3C73 \n10 = EUI as a generic format (EUI64) See \nhttp:Formatted as 16 unseparated uppercase hex characters (2 per binary byte) \n11 = T10 vendor identifier format as returned by SCSI Inquiry VPD page 83, identifier type 1. See T10 SPC-3 specification. This is the 8-byte ASCII vendor ID from the T10 registry followed by a vendor specific ASCII identifier; spaces are permitted. For non SCSI volumes, SNVM may be the most appropriate choice. 12 = OS Device Name (for LogicalDisks). See LogicalDisk Name description for details.
    uint16 NameNamespace                    :    The preferred source SCSI for volume names is SCSI VPD Page 83 responses. Page 83 returns a list of identifiers for various device elements. The metadata for each identifier includes an Association field, identifiers with association of 0 apply to volumes. Page 83 supports several namespaces specified in the Type field in the identifier metadata. See SCSI SPC-3 specification. \n2 = VPD Page 83, Type 3 NAA (NameFormat SHOULD be NAA) \n3 = VPD Page 83, Type 2 EUI64 (NameFormat EUI) \n4 = VPD Page 83, Type 1 T10 Vendor Identification \n(NameFormat T10) \nLess preferred volume namespaces from other interfaces: \n5 = VPD page 80, Serial number (NameFormat SHOULD be Other) \n6 = FC NodeWWN (NameFormat SHOULD be NAA or EUI) \n7 = Serial Number/Vendor/Model (NameFormat SHOULD be SNVM) \nThe preferred namespace for LogigicalDisk names is platform specific device namespace; see LogigicalDIsk Description. \n8 = OS Device Namespace.
    boolean NoSinglePointOfFailure          :    Indicates whether or not there exists no single point of failure.
    uint64 NumberOfBlocks                   :    Total number of logically contiguous blocks, of size Block Size, which form this Extent. The total size of the Extent can be calculated by multiplying BlockSize by NumberOfBlocks. If the BlockSize is 1, this property is the total size of the Extent.
    string OtherNameFormat                  :    A string describing the format of the Name property when NameFormat includes the value 1, Other.
    string OtherNameNamespace               :    A string describing the namespace of the Name property when NameNamespace includes the value 1, Other.
    uint16 PackageRedundancy                :    How many physical packages can currently fail without data loss. For example, in the storage domain, this might be disk spindles.
    string Purpose                          :    A free form string describing the media and/or its use.
    boolean SequentialAccess                :    Boolean set to TRUE if the Storage is sequentially accessed by a MediaAccessDevice. A TapePartition is an example of a sequentially accessed StorageExtent. StorageVolumes, Disk Partitions and LogicalDisks represent randomly accessed Extents.
    boolean Primordial = false              :    If true, Primordial indicates that the containing System does not have the ability to create or delete this operational element. This is important because StorageExtents are assembled into higher-level abstractions using the BasedOn association. Although the higher-level abstractions can be created and deleted, the most basic, (i.e. primordial), hardware-based storage entities cannot. They are physically realized as part of the System, or are actually managed by some other System and imported as if they were physically realized. In other words, a Primordial StorageExtent exists in, but is not created by its System and conversely a non-Primordial StorageExtent is created in the context of its System. For StorageVolumes, this property will generally be false. One use of this property is to enable algorithms that aggregate StorageExtent.ConsumableSpace across all, StorageExtents but that also want to distinquish the space that underlies Primordial StoragePools. Since implementations are not required to surface all Component StorageExtents of a StoragePool, this information is not accessible in any other way.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_StorageExtent'
        self.__parent__ = 'CIM_LogicalDevice'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_NetworkPort__(__BaseClass__, __CIM_LogicalPort__):
    '''NetworkPort is the logical representation of network communications hardware such as a physical connector and the setup or operation of the network chips, at the lowest layers of a network stack. )

Class Properties:
    uint64 ActiveMaximumTransmissionUnit    :    The active or negotiated maximum transmission unit (MTU) that can be supported.
    boolean AutoSense                       :    A Boolean that indicates whether the NetworkPort is capable of automatically determining the speed or other communications characteristics of the attached network media.
    boolean FullDuplex                      :    Boolean that indicates that the port is operating in full duplex mode.
    uint16 LinkTechnology                   :    An enumeration of the types of links. When set to 1 (Other), the related property OtherLinkTechnology contains a string description of the type of link.
    string NetworkAddresses[]               :    An array of strings that indicates the network addresses for the port.
    string OtherLinkTechnology              :    A string value that describes LinkTechnology when it is set to 1, Other.
    string OtherNetworkPortType             :    Note: The use of this property is deprecated in lieu of CIM_LogicalPort.PortType. \nDeprecated description: The type of module, when PortType is set to 1 (Other.)
    string PermanentAddress                 :    PermanentAddress defines the network address that is hardcoded into a port. This hardcoded address can be changed using a firmware upgrade or a software configuration. When this change is made, the field should be updated at the same time. PermanentAddress should be left blank if no hardcoded address exists for the NetworkAdapter.
    uint16 PortNumber                       :    NetworkPorts are often numbered relative to either a logical module or a network element.
    uint64 Speed                            :    The current bandwidth of the Port in Bits per Second. For ports that vary in bandwidth or for those where no accurate estimation can be made, this property should contain the nominal bandwidth.
    uint64 SupportedMaximumTransmissionUnit :    The maximum transmission unit (MTU) that can be supported.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NetworkPort'
        self.__parent__ = 'CIM_LogicalPort'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_EthernetPort__(__BaseClass__, __CIM_NetworkPort__):
    '''Capabilities and management of an EthernetPort. )

Class Properties:
    uint16 Capabilities[]                   :    Capabilities of the EthernetPort. For example, the Device might support AlertOnLan, WakeOnLan, Load Balancing, or FailOver. If failover or load balancing capabilities are listed, a SpareGroup (failover) or ExtraCapacityGroup (load balancing) should also be defined to completely describe the capability. LLDP indicates that this Ethernet Port is capable of supporting Link Layer Discovery Protocol (LLDP) communications. PoE indicates that this Ethernet Port is capable of supporting Power over Ethernet (PoE). EEE indicates that this Ethernet Port is capable of supporting Energy Efficient Ethernet (EEE). DCE indicates that this Ethernet Port is capable of supporting Data Center Ethernet. Data Center Ethernet requires support for Prioritiy-Based Flow Control (PFC), Enhanced Transmission Selection (ETS), and Data Center Bridging eXchange (DCBX) protocol. VDP indicates that this Ethernet Port is capable of supporting Virtual Station Interface (VSI) Discovery Protocol. S-Channel indicates that this Ethernet Port is capable of supporting S-Channel.
    string CapabilityDescriptions[]         :    An array of free-form strings that provides more detailed explanations for any of the EthernetPort features that are indicated in the Capabilities array. Note, each entry of this array is related to the entry in the Capabilities array that is located at the same index.
    uint16 EnabledCapabilities[]            :    Specifies which capabilities are enabled from the list of all supported ones, which are defined in the Capabilities array. For details on each capability, see the description of each capability in the description of property Capabilities.
    uint32 MaxDataSize                      :    The maximum size of the INFO (non-MAC) field that will be received or transmitted.
    string NetworkAddresses[]               :    Ethernet/802.3 MAC addresses formatted as twelve hexadecimal digits (for example, 010203040506), with each pair representing one of the six octets of the MAC address in canonical bit order. (Therefore, the Group address bit is found in the low order bit of the first character of the string.)
    string OtherEnabledCapabilities[]       :    An array of free-form strings that provides more detailed explanations for any of the enabled capabilities that are specified as Other.
    uint16 PVID                             :    Each ethernet port on an ethernet switch has a VLAN ID that is called Port VLAN ID (PVID). The PVID will be applied to the frames which are untagged or tagged with priority ( vid = 0 ). This property indicates the PVID of the Ethernet port.
    uint16 PoEPowerEntityType               :    This property indicates the Power over Ethernet power entity type.
    string PortDiscriminator[]              :    A string array used to discriminate the supported context of this EthernetPort. The following strings are currently defined: \nSNIA:None - indicates this EthernetPort does not provide support for any specific function.\nSNIA:iSCSI - indicates this EthernetPort provides support for iSCSI.\nSNIA:FCoE - indicates that this EthernetPort provides support for FC over Ethernet - FCoE.
    uint16 PortType                         :    The specific mode that is currently enabled for the Port. When set to 1 (Other), the related property OtherPortType contains a string description of the type of port.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_EthernetPort'
        self.__parent__ = 'CIM_NetworkPort'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EthernetPort__(__BaseClass__, __CIM_EthernetPort__):
    '''DCIM_EthernetPort is a derivation of CIM_EthernetPort. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EthernetPort'
        self.__parent__ = 'CIM_EthernetPort'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PowerSupply__(__BaseClass__, __CIM_PowerSupply__):
    '''DCIM_PowerSupply is a derivation of CIM_PowerSupply. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PowerSupply'
        self.__parent__ = 'CIM_PowerSupply'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_NumericSensor__(__BaseClass__, __CIM_Sensor__):
    '''A Numeric Sensor is capable of returning numeric readings and optionally supports thresholds settings. )

Class Properties:
    sint32 Accuracy                         :    Indicates the accuracy of the Sensor for the measured property. Its value is recorded as plus/minus hundredths of a percent. Accuracy, along with Resolution, is used to calculate the actual value of the measured physical property. Accuracy may vary depending on whether the Device is linear over its dynamic range.
    uint16 BaseUnits                        :    The base unit of the values returned by this Sensor. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). For example, if BaseUnits is Volts and the UnitModifier is -6, then the units of the values returned are MicroVolts. However, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier.
    sint32 CurrentReading                   :    The current value indicated by the Sensor.
    uint16 EnabledThresholds[]              :    An array representing the thresholds that are currently enabled for this Sensor.
    uint32 Hysteresis                       :    Indicates the margin built around the thresholds. This margin prevents unnecessary state changes when the Sensor reading may fluctuate very close to its thresholds. This could be due to the Sensors tolerance/accuracy/resolution or due to environmental factors. Once a threshold is crossed, the state of the Sensor should change. However, the state should not fluctuate between the old and new states unless the Sensors change in the reading exceeds the hysteresis value. The units for this measurement are determined by BaseUnit*UnitModifier/RateUnit.
    boolean IsLinear                        :    Indicates that the Sensor is linear over its dynamic range.
    sint32 LowerThresholdCritical           :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If the CurrentReading is between LowerThresholdCritical and Lower ThresholdFatal, then the CurrentState is Critical.
    sint32 LowerThresholdFatal              :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If the CurrentReading is below LowerThresholdFatal, then the Current State is Fatal.
    sint32 LowerThresholdNonCritical        :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If Current Reading is between LowerThresholdNonCritical and Upper ThresholdNonCritical, then the Sensor is reporting a normal value. If CurrentReading is between LowerThresholdNonCritical and LowerThresholdCritical, then the CurrentState is NonCritical.
    sint32 MaxReadable                      :    MaxReadable indicates the largest value of the measured property that can be read by the NumericSensor.
    sint32 MinReadable                      :    MinReadable indicates the smallest value of the measured property that can be read by the NumericSensor.
    sint32 NominalReading                   :    NominalReading indicates the normal or expected value for the NumericSensor.
    sint32 NormalMax                        :    NormalMax provides guidance for the user as to the normal maximum range for the NumericSensor.
    sint32 NormalMin                        :    NormalMin provides guidance for the user as to the normal minimum range for the NumericSensor.
    uint16 RateUnits                        :    Specifies if the units returned by this Sensor are rate units. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). This is true unless this property (RateUnits) has a value different than None. For example, if BaseUnits is Volts and the UnitModifier is -6, then the units of the values returned are MicroVolts. But, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier. Any implementation of CurrentReading should be qualified with either a Counter or a Gauge qualifier, depending on the characteristics of the sensor being modeled.
    uint32 Resolution                       :    Resolution indicates the ability of the Sensor to resolve differences in the measured property. The units for this measurement are determined by BaseUnit*UnitModifier/RateUnit.
    uint16 SettableThresholds[]             :    An array representing the writable thresholds supported by Sensor.
    uint16 SupportedThresholds[]            :    An array representing the thresholds supported by this Sensor.
    sint32 Tolerance                        :    This property is being deprecated in lieu of using the Resolution and Accuracy properties. \nIndicates the tolerance of the Sensor for the measured property. Tolerance, along with Resolution and Accuracy, is used to calculate the actual value of the measured physical property. Tolerance may vary depending on whether the Device is linear over its dynamic range.
    sint32 UnitModifier                     :    The unit multiplier for the values returned by this Sensor. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). For example, if BaseUnits is Volts and the Unit Modifier is -6, then the units of the values returned are MicroVolts. However, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier.
    sint32 UpperThresholdCritical           :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If the CurrentReading is between UpperThresholdCritical and Upper ThresholdFatal, then the CurrentState is Critical.
    sint32 UpperThresholdFatal              :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If the CurrentReading is above UpperThresholdFatal, then the Current State is Fatal.
    sint32 UpperThresholdNonCritical        :    The Sensors threshold values specify the ranges (min and max values) for determining whether the Sensor is operating under Normal, NonCritical, Critical or Fatal conditions. If the CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, then the Sensor is reporting a normal value. If the CurrentReading is between UpperThreshold NonCritical and UpperThresholdCritical, then the CurrentState is NonCritical.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_NumericSensor'
        self.__parent__ = 'CIM_Sensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'restoredefaultthresholds':self.restoredefaultthresholds,
            'getnonlinearfactors':self.getnonlinearfactors,
            }
    def restoredefaultthresholds(self,InputXmlFile=None):
        '''This method resets the values of the thresholds to hardware defaults. This method returns 0 if successful, 1 if unsupported and any other value if an error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreDefaultThresholds',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreDefaultThresholds',{}))
    def getnonlinearfactors(self,Resolution=None,SensorReading=None,Tolerance=None,Accuracy=None,InputXmlFile=None):
        '''The use of this method is being deprecated, since Current senor reading can be retrieved through the GetInstance operation. \n For a non-linear Sensor, the resolution, accuracy, tolerance and hysteresis vary as the current reading moves. This method can be used to get these factors for a given reading. It returns 0 if successful, 1 if unsupported, and any other value if an error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint32 Resolution                       :        The resolution of the reading.
    sint32 SensorReading                    :        The sensor reading to get information for.
    sint32 Tolerance                        :        The tolerance of the reading.
    sint32 Accuracy                         :        The accuracy of the reading.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetNonLinearFactors',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetNonLinearFactors',{'Tolerance': Tolerance, 'SensorReading': SensorReading, 'Resolution': Resolution, 'Accuracy': Accuracy}))
class __DCIM_PresenceAndStatusSensor__(__BaseClass__, __CIM_Sensor__):
    '''DCIM_PresenceAndStatusSensor is a derivation of CIM_Sensor, and represents a sensor. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PresenceAndStatusSensor'
        self.__parent__ = 'CIM_Sensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Sensor__(__BaseClass__, __CIM_Sensor__):
    '''DCIM_Sensor is a derivation of CIM_Sensor, and represents a sensor. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Sensor'
        self.__parent__ = 'CIM_Sensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnclosureFanSensor__(__BaseClass__, __CIM_NumericSensor__):
    '''DCIM_EnclosureFanSensor is a derivation of CIM_NumericSensor with enclosure fan sensor specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    uint32 State                            :    		State provides a status value of Enclosure Fan Sensor		State consists of one of the following values: Unknown 		Ready Online Foreign Offline Blocked 		Failed Degraded Non-Raid Removed Charging Learning 		Low Power Over Temp Under Temp Not Applicable 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnclosureFanSensor'
        self.__parent__ = 'CIM_NumericSensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnclosureTemperatureSensor__(__BaseClass__, __CIM_NumericSensor__):
    '''DCIM_EnclosureTemperatureSensor is a derivation of CIM_NumericSensor. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    uint32 State                            :    		State provides a status value of Enclosure Temperature Sensor 		State consists of one of the following values: Unknown 		Ready Online Foreign Offline Blocked 		Failed Degraded Non-Raid Removed Charging Learning 		Low Power Over Temp Under Temp Not Applicable 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnclosureTemperatureSensor'
        self.__parent__ = 'CIM_NumericSensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NumericSensor__(__BaseClass__, __CIM_NumericSensor__):
    '''DCIM_NumericSensor is a derivation of CIM_NumericSensor, and represents a Numericsensor. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NumericSensor'
        self.__parent__ = 'CIM_NumericSensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PSNumericSensor__(__BaseClass__, __CIM_NumericSensor__):
    '''DCIM_PSNumericSensor is a derivation of DCIM_NumericSensor, and represents a Power Sensor. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PSNumericSensor'
        self.__parent__ = 'CIM_NumericSensor'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_OpaqueManagementData__(__BaseClass__, __CIM_StorageExtent__):
    '''A class derived from StorageExtent that describes opaque management data in managed systems. The structure and semantics of opaque management data, which may be standardized or proprietary, are assumed to be known by at least one management client, but need not be known by the CIM server. The UntransformedDataFormat property identifies the structure and semantics of the data.\n Opaque management data are typically stored in non-volatile memory that is accessible to the server. Management clients are able to read and write opaque data, to manage their lifetime, and to configure the access rights associated with them. The non-volatile storage is often used as a mailbox, with local management agents producing data for consumption by remote management clients, or vice versa.\n This class is not intended as a general-purpose opaque alternative to any existing or planned CIM classes. It is expressly intended for the mailbox usage model described above. )

Class Properties:
    string DataFormat                       :    Describes the format of the opaque management data. A free-form string that shall only be set by an authorized client, and shall not be changed by the implementation.
    uint64 DataSize                         :    The number of bytes of opaque management data in the instance.
    datetime LastAccessed                   :    The date and time when the opaque management data was last accessed. Any operation on the OpaqueManagementData instance constitutes access. This property shall be NULL if it is not supported by the implementation.
    uint64 MaxSize                          :    The maximum number of bytes of opaque management data that the instance may contain.
    uint16 WriteLimited                     :    Indicates whether the data are stored on a medium that has a limited number of write/erase cycles (e.g., flash memory).
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_OpaqueManagementData'
        self.__parent__ = 'CIM_StorageExtent'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_OpaqueManagementData__(__BaseClass__, __CIM_OpaqueManagementData__):
    '''DCIM_OpaqueManagementData is a derivation of CIM_OpaqueManagementData and represents a partition on a storage device like the VFlash. )

Class Properties:
    string AccessType                       :    This property represents the access type of the partition. 
    string AttachedState                    :    This property represents if the partition is attached to OS. 
    uint16 PartitionIndex                   :    This property represents the index of the partition. 
    string PartitionType                    :    This property represents the type of the partition which is specified at creation time. 
    uint32 Size                             :    This property represents the size of the partition. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_OpaqueManagementData'
        self.__parent__ = 'CIM_OpaqueManagementData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BIOSService__(__BaseClass__, __CIM_Service__):
    '''A class derived from Service that provides the controls to manage the system BIOS configuration of a managed computer system or device. This service exposes functionality to retrieve BIOS configuration data or attributes, set BIOS attribute values, and restore a default configuration of attribute values for a given computer system. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BIOSService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'readrawbiosdata':self.readrawbiosdata,
            'writerawbiosdata':self.writerawbiosdata,
            'setbiosattributes':self.setbiosattributes,
            'setbiosattributeembeddedinstance':self.setbiosattributeembeddedinstance,
            'setbiosattribute':self.setbiosattribute,
            }
    def readrawbiosdata(self,NumberOfBytes=None,TargetBIOS=None,Offset=None,InputXmlFile=None):
        '''This method provides the ability to perform raw reads of BIOS configuration storage area. The method will return the lesser of the number of bytes specified by the NumberOfBytes parameter and the actual number of bytes available between Offset and the end of the BIOS area, starting at specified by the Offset parameter arereturned in the Data parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint32 NumberOfBytes                    :        On input, specifies the number of bytes to read. On output, specifies the number of bytes read.
    CIM_BIOSElement REF TargetBIOS          :        If supplied, TargetBIOS references the scoping instance of CIM_BIOSElement in which the operation is targeted. If TargetBIOS is not supplied, the target of the operation shall be the current instance of CIM_BIOSElement associated to the CIM_ComputerSystem hosting the service.
    uint32 Offset                           :        Specifies initial offset to start reading from.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReadRawBIOSData',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReadRawBIOSData',{'NumberOfBytes': NumberOfBytes, 'TargetBIOS': TargetBIOS, 'Offset': Offset}))
    def writerawbiosdata(self,NumberOfBytes=None,AuthorizationToken=None,Data=None,TargetBIOS=None,Offset=None,InputXmlFile=None):
        '''This method provides the ability to perform raw writes of BIOS configuration storage area. The number of bytes specified by the Length parameter will be written from the Data parameter specified by the Offset parameter. If the number of bytes to write as indicated by the NumberOfBytes parameter exceeds the number of bytes from Offset to the end of the BIOS area, the method shall return 2.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint32 NumberOfBytes                    :        On input, specifies the number of bytes of data to write. On output, specifies the number of bytes written.
    string AuthorizationToken               :        A token required to modify BIOSAttribute values for this computer system. This is usually the BIOS administrator password. For example: the CIM_SharedCredential subclass may be utilized. In that case, the CIM_SharedCredential.Secret might be required and if is not specified this method would return 6 Invalid Parameter. The CIM_SharedCredential.Algorithm property might also be specified based on the propertyCIM_BIOSServiceCapabilities.SupportedPasswordAlgorithms.
    uint8[] Data                            :        Buffer containing data to write.
    CIM_BIOSElement REF TargetBIOS          :        If supplied, TargetBIOS references the scoping instance of CIM_BIOSElement in which the operation is targeted. If TargetBIOS is not supplied, the target of the operation shall be the current instance of CIM_BIOSElement associated to the CIM_ComputerSystem hosting the service.
    uint32 Offset                           :        Specifies initial offset to start reading from.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'WriteRawBIOSData',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'WriteRawBIOSData',{'NumberOfBytes': NumberOfBytes, 'AuthorizationToken': AuthorizationToken, 'Data': Data, 'TargetBIOS': TargetBIOS, 'Offset': Offset}))
    def setbiosattributes(self,CollectionElementName=None,AttributeValue=None,AuthorizationToken=None,TargetBIOS=None,AttributeName=None,PasswordEncoding=None,InputXmlFile=None):
        '''This method is called to modify a group of BIOSAttribute instances associated with this BIOSService. If the method is not supported by the implementation, 1 (Not Supported) shall be returned. If the method is supported, but has not completed due to an unspecified error, 2 (Error) shall be returned. If the method is supported and has completed successfully, 0 (Completed with No Error) shall be returned; SetResult$AB should be inspected to determine if individual BIOS Attribute values have been set. The method may return an instance of CIM_Error.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string CollectionElementName            :        If supplied, the ConcreteCollection containing the BIOS Attributes to be modified, as specified by the ConcreteCollection.ElementName property. The value of ConcreteCollection.ElementName supplied for this parameter must be unique within the scope of the instantiating Namespace; if the value is not unique, this parameter shall not be supplied. If BIOS Attributes represented by the AttributeName$AB parameter are not members of this collection, the SetResult parameter that corresponds to these BIOS Attributes shall return 5 (No Attempt to Set Value due to Error). If CollectionElementName is not specified, the BIOS Attributes represented by the AttributeName$AB parameter can be members of any collection or associated with no collection at all.
    string[] AttributeValue                 :        New values to assign to the BIOS Attributes specified in the AttributeName$AB parameter. The BIOS Attribute value members of this array must correspond with the array members of the names represented by the AttributeName$AB parameter. If more than one value is specified for a particular BIOS Attribute, this parameter shall contain an entry for each BIOS Attribute value. A value of NULL indicates the factory default values for the BIOSAttribute is requested. If this value is valid, it will be applied to the CurrentValue or PendingValue property of the specified BIOSAttribute depending on the system BIOS implementation and any requirements for a system restart. The result of applying the values are described in the corresponding array entries of the SetResult$AB parameter.
    string AuthorizationToken               :        When required, a token to modify BIOSAttribute values for this computer system. This is usually the BIOS administrator password. If this is a password, the PasswordEncoding parameter shall be used to denote the format of the password string. For example: the CIM_SharedCredential subclass may be utilized. In that case, the CIM_SharedCredential.Secret might be required and if is not specified this method would return 6 Invalid Parameter. The CIM_SharedCredential.Algorithm property might also be specified based on the propertyCIM_BIOSServiceCapabilities.SupportedPasswordAlgorithms.
    CIM_BIOSElement REF TargetBIOS          :        If supplied, TargetBIOS references the scoping instance of CIM_BIOSElement in which the operation is targeted. If TargetBIOS is not supplied, the target of the operation shall be the current instance of CIM_BIOSElement associated to the CIM_ComputerSystem hosting the service.
    string[] AttributeName                  :        The BIOS Attribute names representing the BIOS Attributes to be modified, as specified by BIOSAttribute.AttributeName properties. The specified BIOS Attributes must already exist. The values of BIOSAttribute.AttributeName supplied for this parameter must be unique within the scope of the instantiating Namespace. The BIOS Attribute name members of this array must correspond with array members of the values represented by the AttributeValue$AB parameter. If more than one value is specified for a particular BIOS Attribute, this parameter shall contain multiple identical array entries describing the BIOS Attribute name that corresponds with each respective BIOS Attribute value specified by the AttributeValue$AB parameter.
    uint32 PasswordEncoding                 :        PasswordEncoding specifies encoding tag used to denote the format the password string is being passed into the BIOS. kbd denotes a string in hexadecimal format containing keyboard scan code input. An example of a password structured in this format would be 321539191E1F1F11181320, which is the representation of my password in US English keyboard scan codes. ascii denotes clear text that shall comply with the ASCII character set. Character encodings from   (decimal 32) to ~ (decimal 126) are supported. An example would be my password.pin denotes that only numeric input in ASCII text is allowed for the password instance. An example would be 1234.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttributes',{'CollectionElementName': CollectionElementName, 'AttributeValue': AttributeValue, 'AuthorizationToken': AuthorizationToken, 'PasswordEncoding': PasswordEncoding, 'AttributeName': AttributeName, 'TargetBIOS': TargetBIOS}))
    def setbiosattributeembeddedinstance(self,AuthorizationToken=None,TargetBIOS=None,PasswordEncoding=None,AttributeConfig=None,InputXmlFile=None):
        '''This method is called to modify instances of BIOSAttribute associated with this BIOSService using an embedded instance If this method is not supported by the implementation, 1 (Not Supported) shall be returned. If the method is supported, but has not completed due to an unspecified error, 2 (Error) shall be returned. If the method is supported and has completed successfully, 0 (Completed with No Error) shall be returned. The method may return an instance of CIM_Error.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string AuthorizationToken               :        When required, a token to modify BIOSAttribute values for this computer system. This is usually the BIOS administrator password. If this is a password, the PasswordEncoding parameter shall be used to denote the format of the password string. For example: the CIM_SharedCredential subclass may be utilized. In that case, the CIM_SharedCredential.Secret might be required and if is not specified this method would return 6 Invalid Parameter. The CIM_SharedCredential.Algorithm property might also be specified based on the property CIM_BIOSServiceCapabilities.SupportedPasswordAlgorithms.
    CIM_BIOSElement REF TargetBIOS          :        If supplied, TargetBIOS references the scoping instance of CIM_BIOSElement in which the operation is targeted. If TargetBIOS is not supplied, the target of the operation shall be the current instance of CIM_BIOSElement associated to the CIM_ComputerSystem hosting the service.
    uint32 PasswordEncoding                 :        PasswordEncoding specifies encoding tag used to denote the format the password string is being passed into the BIOS. This property is applicable if the AuthorizationToken parameter includes a password.\nkbd denotes a string in hexadecimal format containing keyboard scan code input. An example of a password structured in this format would be 321539191E1F1F11181320, which is the representation of my password in US English keyboard scan codes. ascii denotes clear text that shall comply with the ASCII character set. Character encodings from   (decimal 32) to ~ (decimal 126) are supported. An example would be my password.pin denotes that only numeric input in ASCII text is allowed for the password instance. An example would be 1234.
    string AttributeConfig                  :        AttributeConfig is the input required to modify the value of a BIOSAttribute. The CIM_BIOSAttribute.AttributeName and the CIM_BIOSAttribute.CurrentValue properties are Required for this operation. If both properties are not specified the service shall return 6 Invalid Parameter.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttributeEmbeddedInstance',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttributeEmbeddedInstance',{'AuthorizationToken': AuthorizationToken, 'PasswordEncoding': PasswordEncoding, 'TargetBIOS': TargetBIOS, 'AttributeConfig': AttributeConfig}))
    def setbiosattribute(self,AuthorizationToken=None,TargetBIOS=None,AttributeName=None,AttributeValue=None,PasswordEncoding=None,InputXmlFile=None):
        '''This method is called to modify instances of BIOSAttribute associated with this BIOSService.If this method is not supported by the implementation, 1 (Not Supported) shall be returned. If the method is supported, but has not completed due to an unspecified error, 2 (Error) shall be returned. If the method is supported and has completed successfully, 0 (Completed with No Error) shall be returned. The method may return an instance of CIM_Error.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string AuthorizationToken               :        When required, a token to modify BIOSAttribute values for this computer system. This is usually the BIOS administrator password. If this is a password, the PasswordEncoding parameter shall be used to denote the format of the password string. For example: the CIM_SharedCredential subclass may be utilized. In that case, the CIM_SharedCredential.Secret might be required and if is not specified this method would return 6 Invalid Parameter. The CIM_SharedCredential.Algorithm property might also be specified based on the property CIM_BIOSServiceCapabilities.SupportedPasswordAlgorithms.
    CIM_BIOSElement REF TargetBIOS          :        If supplied, TargetBIOS references the scoping instance of CIM_BIOSElement in which the operation is targeted. If TargetBIOS is not supplied, the target of the operation shall be the current instance of CIM_BIOSElement associated to the CIM_ComputerSystem hosting the service.
    string AttributeName                    :        A reference to a BIOSAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string[] AttributeValue                 :        A new value to assign to the specified BIOSAttribute. A value of NULL indicates the factory default value for the BIOSAttribute is requested. If this value is valid, it will be applied to the CurrentValue or PendingValue property of the specified BIOSAttribute depending on the system BIOS implementation and any requirements for a system restart.
    uint32 PasswordEncoding                 :        PasswordEncoding specifies encoding tag used to denote the format the password string is being passed into the BIOS. kbd denotes a string in hexadecimal format containing keyboard scan code input. An example of a password structured in this format would be 321539191E1F1F11181320, which is the representation of my password in US English keyboard scan codes. ascii denotes clear text that shall comply with the ASCII character set. Character encodings from   (decimal 32) to ~ (decimal 126) are supported. An example would be my password.pin denotes that only numeric input in ASCII text is allowed for the password instance. An example would be 1234.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBIOSAttribute',{'AuthorizationToken': AuthorizationToken, 'AttributeName': AttributeName, 'TargetBIOS': TargetBIOS, 'AttributeValue': AttributeValue, 'PasswordEncoding': PasswordEncoding}))
class __CIM_MetricService__(__BaseClass__, __CIM_Service__):
    '''CIM_MetricService provides the ability to manage metrics. For each metric that the service manages, there shall be an instance of CIM_ServiceAffectsElement that associates the CIM_MetricService to the instance of CIM_BaseMetricDefinition that defines the metric, where the value of the CIM_ServiceAffectsElement.ElementAffects property is 5 Manages . The capabilities of the CIM_MetricService instance are advertised through an instance of CIM_MetricServiceCapabilities associated with the CIM_MetricService instance through CIM_ElementCapabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_MetricService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'showmetrics':self.showmetrics,
            'controlsampletimes':self.controlsampletimes,
            'controlmetrics':self.controlmetrics,
            'getmetricvalues':self.getmetricvalues,
            'controlmetricsbyclass':self.controlmetricsbyclass,
            'showmetricsbyclass':self.showmetricsbyclass,
            }
    def showmetrics(self,Definition=None,ManagedElements=None,MetricNames=None,Subject=None,DefinitionList=None,InputXmlFile=None):
        '''ShowMetrics reports the Metrics available to be collected for a ManagedElement, the ManagedElements for which a metric defined by an instance of CIM_BaseMetricDefinition is available to be collected, and whether or not a particular metric is currently being collected for a ManagedElement. \n If the Subject parameter is specified and the Definition parameter is NULL, upon successful completion of the method, the DefinitionList$AB parameter shall contain a reference to an instance of CIM_BaseMetricDefinition for each instance of CIM_BaseMetricDefinition to which the instance of CIM_ManagedElement identified by the Subject parameter is associated through CIM_MetricDefForME where the CIM_BaseMetricDefinition instance is associated to the CIM_MetricService instance through CIM_ServiceAffectsElement, the MetricCollectionEnabled parameter shall contain a value corresponding to the value of the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that associates the CIM_ManagedElement identified by the Subject parameter with the CIM_BaseMetricDefinition for which a reference is returned in the DefinitionList parameter at the same array index.\n If the Definition parameter is non-NULL and the Subject parameter is NULL, upon successful completion of the method the ManagedElements parameter shall contain a reference to each CIM_ManagedElement instance to which the CIM_BaseMetricDefinition instance referenced by the Definition parameteris associated through CIM_MetricDefForME and the MetricCollectionEnabled parameter shall contain a value corresponding to the value of the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that associates the CIM_BaseMetricDefinition identified by the Definition parameter with the CIM_ManagedElement for which a reference is returned in the ManagedElements parameter at the same array index as the reference to the CIM_ManagedElement.\n If the Subject parameter and Definition parameter are both non-NULL, the method shall return NULL values for the DefinitionList and ManagedElements parameters, and the MetricCollectionEnabled parameter shall contain a single value that corresponds to the value of the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that associates the instance of CIM_ManagedElement identified by the Subject parameter with the instance of CIM_BaseMetricDefinition identified by the Definition parameter. If the Subject and Definition parameters are both NULL, the method shall return 2 Failed . If the Definition parameter is a reference to an instance of CIM_BaseMetricDefinition that is not associated to the CIM_MetricService through CIM_ServiceAffectsElement, the method shall return 2 Failed . If the Subject parameter does not identify a single instance the Method shall return 2 Failed .

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies an instance of CIM_BaseMetricDefintion. The method returns references to instances of CIM_ManagedElement for which metrics defined by the instance of CIM_BaseMetricDefinition are available to be collected.
    CIM_ManagedElement REF[] ManagedElements:        Upon successful completion of the method, the ManagedElements$AB parameter may contain references to CIM_ManagedElements for which the metric identified by Definition parameter is available for collection.
    string[] MetricNames                    :        Upon successful completion of the method, each array index of the MetricNames parameter shall contain the value of the Name property for the instance of CIM_BaseMetricDefinition referenced by the corresponding array index of the DefinitionList parameter.
    CIM_ManagedElement REF Subject          :        The Subject parameter identifies an instance of CIM_ManagedElement for which the method returns references to instances of CIM_BaseMetricDefinition that define metrics that are being captured for the CIM_ManagedElement.
    CIM_BaseMetricDefinition REF[] DefinitionList:        Upon successful completion of the method, the DefinitionList parameter may contain references to instances of CIM_BaseMetricDefinitions that define metrics available for collection for the CIM_ManagedElement identified by the Subject parameter.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowMetrics',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowMetrics',{'Definition': Definition, 'MetricNames': MetricNames, 'DefinitionList': DefinitionList, 'Subject': Subject, 'ManagedElements': ManagedElements}))
    def controlsampletimes(self,StartSampleTime=None,PreferredSampleInterval=None,InputXmlFile=None):
        '''Method used to allow specification of the point in time metric gathering is to be started and to specify the preferred sample interval time for periodic data gathering. \n Whenever sampling for additional metrics is started, the settings specified by this method may be used.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    datetime StartSampleTime                :        Point in time when sampling for the metrics is to be started. \nA value of 99990101000000.000000+000 shall indicate that sampling should start at the next time it is synchronized to the full hour. Sampling is synchronized to the full hour if seconds since midnight modulo sample interval in seconds is equal to 0.
    datetime PreferredSampleInterval        :        Preferred sample interval time. In order to get correlatable metrics, it is recommended that the sample interval be chosen in a way that 3600 modulo sample interval time in seconds is equal to 0. \nIt is the responsibility of the CIM metric service implementation to decide whether the requested sample interval time is honored. \nThe CIM client can check whether or not the metric providers are honoring the requested sample interval time by retrieving related BaseMetricDefinition instances and checking the contents of the CIM_BaseMetricDefinition.SampleInterval property.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlSampleTimes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlSampleTimes',{'StartSampleTime': StartSampleTime, 'PreferredSampleInterval': PreferredSampleInterval}))
    def controlmetrics(self,Definition=None,Subject=None,MetricCollectionEnabled=None,InputXmlFile=None):
        '''ControlMetrics enables and disables the collection of metrics. It is used to control the collection of each type of metric for a CIM_ManagedElement, the collection of a given type of metric for all ManagedElements, or the collection of a specific metric for a specific ManagedElement. \n If the Subject parameter is specified and the Definition parameter is NULL and the MetricCollectionEnabled parameter has the value 2 Enabled or 3 Disabled , upon successful completion of the method, the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references the instance of CIM_ManagedElement identified by the Subject parameter and references an instance of CIM_BaseMetricDefinition that is associated to the CIM_BaseMetricService through the CIM_ServiceAffectsElement association shall have the value of the MetricCollectionEnabled parameter. If the Subject parameter is specified and the Definition parameter is NULL and the value of the MetricCollectionEnabled parameter is 4 Reset upon successful completion of the method, the value of the MetricCollectionEnabled of each instance of CIM_MetricDefForME that references the instance of CIM_ManagedElement identified by the Subject parameter and references an instance of CIM_BaseMetricDefinition that is associated to the CIM_BaseMetricService through the CIM_ServiceAffectsElement association shall transition to 3 Disabled then to 2 Enabled . If the Definition parameter is non-NULL and the Subject parameter is NULL, and the MetricCollectionEnabled parameter has the value 2 Enabled or 3 Disabled , upon successful completion of the method the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references the instance of CIM_BaseMetricDefinition identified by the Definition parameter shall have the value of the MetricCollectionEnabled parameter. If the Definition parameter is non-NULL and the Subject parameter is NULL, and the value of the MetricCollectionEnabled parameter is 4 Reset upon successful completion of the method the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references the instance of CIM_BaseMetricDefinition identified by the Definition parameter shall transition to 3 Disabled then to 2 Enabled . If the Subject parameter and Definition parameter are both non-NULL, and the MetricCollectionEnabled parameter has the value 2 Enable or 3 Disable , upon successful completion of the method, the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that references the instance of CIM_ManagedElement identified by the Subject parameter and references the instance of CIM_BaseMetricDefinition identified by the Definition parameter shall have the value of the MetricCollectionEnabled parameter.\n If the Subject parameter and Definition parameter are both non-NULL and the value of the MetricCollectionEnabled parameter is 4 Reset upon successful completion of the method, the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that references the instance of CIM_ManagedElement identified by the Subject parameter and references the instance of CIM_BaseMetricDefinition identified by the Definition parameter shall transition to 3 Disabled then to 2 Enabled . If the Subject parameter and Definition parameter are both non-NULL and there is not an instance of CIM_MetricDefForME that associates the two instances, the method shall return 2 Failed . If the Subject and Definition parameters are both NULL, the method shall return 2 Failed . If the Definition parameter is a reference to an instance of CIM_BaseMetricDefinition that is not associated to the CIM_MetricService through CIM_ServiceAffectsElement, the method shall return 2 Failed . If the Subject parameter does not identify a single instance the Method shall return 2 Failed .

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies a CIM_BaseMetricDefinition for which metrics will be controlled.
    CIM_ManagedElement REF Subject          :        The Subject parameter identifies managed element(s) for which metrics will be controlled.
    uint16 MetricCollectionEnabled          :        The MetricCollectionEnabled parameter indicates the desired operation to perform on the metrics.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetrics',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetrics',{'Definition': Definition, 'MetricCollectionEnabled': MetricCollectionEnabled, 'Subject': Subject}))
    def getmetricvalues(self,Count=None,Definition=None,Range=None,InputXmlFile=None):
        '''GetMetricValues provides the ability to return a filtered list of CIM_BaseMetricValue instances. \n If the Definition parameter is NULL, the method shall return 2 Failed . If the Definition parameter is a reference to an instance of CIM_BaseMetricDefinition with which the CIM_MetricService is not associated through CIM_ServiceAffectsElement, the method shall return 2 Failed .

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 Count                            :        The Count parameter identifies the maximum number of instances to to be returned by the method.
    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies a CIM_BaseMetricDefinition for which metrics will be returned.
    uint16 Range                            :        The Range parameter identifies how the instances are selected. The algorithm for ordering value instances is metric definition specific.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetMetricValues',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetMetricValues',{'Count': Count, 'Definition': Definition, 'Range': Range}))
    def controlmetricsbyclass(self,Definition=None,Subject=None,InputXmlFile=None):
        '''ControlMetricsByClass enables and disables the collection of metrics. It is used to control the collection of each type of metric for all instances of a class or the collection of a specific metric for all instances of a class. \n If the Definition parameter is NULL, and the MetricCollectionEnabled parameter has the value 2 Enabled or 3 Disabled , upon successful completion of the method, the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references an instance of the class identified by the Subject parameter and references an instance of CIM_BaseMetricDefinition that is associated to the CIM_BaseMetricService through the CIM_ServiceAffectsElement association shall have the value of the MetricCollectionEnabled parameter. If the Definition parameter is NULL, and the MetricCollectionEnabled parameter has the value 4 Reset , upon successful completion of the method, the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references an instance of the class identified by the Subject parameter and references an instance of CIM_BaseMetricDefinition that is associated to the CIM_BaseMetricService through the CIM_ServiceAffectsElement association shall transition to 3 Disabled then to 2 Enabled . If the Definition parameter is non-NULL, and the MetricCollectionEnabled parameter has the value 2 Enable or 3 Disable , upon successful completion of the method the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references the instance of CIM_BaseMetricDefinition identified by the Definition parameter and references an instance of the class identified by the Subject parameter shall have the value of the MetricCollectionEnabled parameter. If the Definition parameter is non-NULL, and the MetricCollectionEnabled parameter has the value 4 Reset , upon successful completion of the method the MetricCollectionEnabled property of each instance of CIM_MetricDefForME that references the instance of CIM_BaseMetricDefinition identified by the Definition parameter and references an instance of the class identified by the Subject parameter shall transition to 3 Disabled then to 2 Enabled . For each instance of the class identified by the Subject parameter, if there is not an instance of CIM_MetricDefForME that associates the CIM_BaseMetricDefinition instance identified by the Definition parameter to the instance, the method shall return 2 Failed . If the Subject and Definition parameters are both NULL, the method shall return 2 Failed . If the Definition parameter is a reference to an instance of CIM_BaseMetricDefinition that is not associated to the CIM_MetricService through CIM_ServiceAffectsElement, the method shall return 2 Failed . If the Subject parameter does not identify a single CIM Class the Method shall return 2 Failed .

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies a CIM_BaseMetricDefinition for which metrics will be controlled.
    CIM_ManagedElement REF Subject          :        The Subject parameter identifies the CIM class for which metrics will be controlled.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetricsByClass',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetricsByClass',{'Definition': Definition, 'Subject': Subject}))
    def showmetricsbyclass(self,Definition=None,MetricNames=None,Subject=None,DefinitionList=None,InputXmlFile=None):
        '''ShowMetricsByClass reports the Metrics available to be collected for all instances of a CIM class. The CIM classes for which a metric defined by an instance of CIM_BaseMetricDefinition is available to be collected, and whether or not a particular metric is currently being collected for a ManagedElement. \n If the Subject parameter is specified and the Definition parameter is NULL, upon successful completion of the method, the DefinitionList$AB parameter shall contain a reference to an instance of CIM_BaseMetricDefinition for each instance of CIM_BaseMetricDefinition that is associated with all instances of the class identified by the Subject parameter, where the CIM_BaseMetricDefinition instance is associated to the CIM_MetricService instance through CIM_ServiceAffectsElement; the MetricCollectionEnabled parameter shall contain the value 2 Enabled if the value of the MetricCollectionEnabled property has the value 2 Enabled for every instance of CIM_MetricDefForME that associates the CIM_ManagedElement identified by the Subject parameter with the CIM_BaseMetricDefinition for which a reference CIM_BaseMetricDefinition is returned in the DefinitionList parameter at the same array index as the reference and the MetricCollectionEnabled parameter shall contain the value 3 Disabled if the value of the MetricCollectionEnabled property does not have the value 2 Enabled for every instance of CIM_MetricDefForME that associates the CIM_ManagedElement identified by the Subject parameter with the CIM_BaseMetricDefinition for which a reference CIM_BaseMetricDefinition is returned in the DefinitionList parameter at the same array index as the reference. \n If the Subject parameter and Definition parameter are both non-NULL, the method shall return NULL value for the DefinitionList parameter and the MetricCollectionEnabled parameter shall contain a single value that corresponds to the value of the MetricCollectionEnabled property of the instance of CIM_MetricDefForME that associates the instance of CIM_ManagedElement identified by the Subject parameter with the instance of CIM_BaseMetricDefinition identified by the Definition parameter. If the Subject and Definition parameters are both NULL, the method shall return 2 Failed . If the Definition parameter is a reference to an instance of CIM_BaseMetricDefinition that is not associated to the CIM_MetricService through CIM_ServiceAffectsElement, the method shall return 2 Failed . If the Subject parameter does not identify a single CIM Class the Method shall return 2 Failed .

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies an instance of CIM_BaseMetricDefinition. The method returns references to instances of CIM_ManagedElement for which metrics defined by the instance of CIM_BaseMetricDefinition are available to be collected.
    string[] MetricNames                    :        Upon successful completion of the method, each array index of the MetricNames parameter shall contain the value of the Name property for the instance of CIM_BaseMetricDefinition referenced by the corresponding array index of the DefinitionList parameter.
    CIM_ManagedElement REF Subject          :        The Subject parameter identifies a CIM class for which the method returns references to instances of CIM_BaseMetricDefinition that define metrics that are available to be captured for all instances of the class.
    CIM_BaseMetricDefinition REF[] DefinitionList:        Upon successful completion of the method, the DefinitionList parameter may contain references to instances of CIM_BaseMetricDefinitions that define metrics available for collection for the CIM_ManagedElement identified by the Subject parameter.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowMetricsByClass',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowMetricsByClass',{'Definition': Definition, 'Subject': Subject, 'DefinitionList': DefinitionList, 'MetricNames': MetricNames}))
class __CIM_PowerManagementService__(__BaseClass__, __CIM_Service__):
    '''A class derived from Service that describes power management functionality, hosted on a System. Whether this service might be used to affect the power state of a particular element is defined by the CIM_ServiceAvailable ToElement association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PowerManagementService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'setpowerstate':self.setpowerstate,
            'requestpowerstatechange':self.requestpowerstatechange,
            }
    def setpowerstate(self,PowerState=None,ManagedElement=None,InputXmlFile=None):
        '''The CIM_PowerManagementService.RequestPowerStateChange method should be used instead of SetPowerState method, which is deprecated. SetPowerState defines the desired power state of the managed element and when the element should be put into that state. The SetPowerState method has three input parameters, no output parameters, and a result. \n - PowerState indicates the desired power state. \n - ManagedElement indicates the element whose state is set. This element should be associated with the service using the ServiceAvailableToElement relationship. \n - Time indicates when the power state should be set, either as a regular date-time value or as an interval value (where the interval begins when the method invocation is received). \n Note that when the PowerState parameter is equal to 5, Power Cycle (Off -Soft) , the Time parameter indicates when the managed element should be powered on again. Power-off is immediate. \n SetPowerState should return 0 if successful, 1 if the specified State and Time request is not supported for the element, and some other value if any other error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PowerState                       :        The power state for ManagedElement.
    CIM_ManagedElement REF ManagedElement   :        ManagedElement indicates the element whose state is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',{'PowerState': PowerState, 'ManagedElement': ManagedElement}))
    def requestpowerstatechange(self,TimeoutPeriod=None,PowerState=None,ManagedElement=None,Job=None,Time=None,InputXmlFile=None):
        '''RequestPowerStateChange defines the desired power state of the managed element, and when the element should be put into that state. The RequestPowerStateChange method has five input parameters and a result code. \n - PowerState indicates the desired power state. \n - ManagedElement indicates the element whose state is set. This element SHOULD be associated to the service using the AssociatedPowerManagementService relationship. \n - Time indicates when the power state should be set, either as a regular date-time value or as an interval value (where the interval begins when the method invocation is received). \n - Job is a reference to the job if started. \n - TimeOutPeriod indicates the maximum amount of time a client is expects the transition to take. \n See CIM_PowerStateCapabilities for descriptions of PowerState parameter enumerations.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    datetime TimeoutPeriod                  :        A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of Use Of Timeout Parameter Not Supported must be returned.
    uint16 PowerState                       :        The power state for ManagedElement.
    CIM_ManagedElement REF ManagedElement   :        ManagedElement indicates the element whose state is set.
    CIM_ConcreteJob REF Job                 :        Reference to the job (can be null if the task is completed).
    datetime Time                           :        Time indicates when the power state should be set, either as a regular date-time value or as an interval value (where the interval begins when the method invocation is received.

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestPowerStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestPowerStateChange',{'Job': Job, 'TimeoutPeriod': TimeoutPeriod, 'PowerState': PowerState, 'Time': Time, 'ManagedElement': ManagedElement}))
class __CIM_SecurityService__(__BaseClass__, __CIM_Service__):
    '''A service providing security functionaity. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SecurityService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_SoftwareInstallationService__(__BaseClass__, __CIM_Service__):
    '''A subclass of service which provides methods to install (or update) Software Identities in ManagedElements. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_SoftwareInstallationService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'installfromuri':self.installfromuri,
            'checksoftwareidentity':self.checksoftwareidentity,
            'installfromsoftwareidentity':self.installfromsoftwareidentity,
            }
    def installfromuri(self,InstallOptions=None,Target=None,URI=None,Job=None,InstallOptionsValues=None,InputXmlFile=None):
        '''Start a job to install software from a specific URI in a ManagedElement. \n Note that this method is provided to support existing, alternative download mechanisms (such as used for firmware download). The normal mechanism will be to use the InstallFromSoftwareIdentity method.\n If 0 is returned, the function completed successfully and no ConcreteJob instance was required. If 4096/0x1000 is returned, a ConcreteJob will be started to to perform the install. The Job s reference will be returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16[] InstallOptions                 :        Options to control the install process. \nSee the InstallOptions parameter of the SoftwareInstallationService.InstallFromSoftwareIdentity method for the description of these values.
    CIM_ManagedElement REF Target           :        The installation target.
    string URI                              :        A URI for the software based on RFC 2079.
    CIM_ConcreteJob REF Job                 :        Reference to the job (may be null if job completed).
    string[] InstallOptionsValues           :        InstallOptionsValues is an array of strings providing additionalinformation to InstallOptions for the method to install the software. Each entry of this array is related to the entry in InstallOptions that is located at the same index providing additional information for InstallOptions. \nFor further information on the use of InstallOptionsValues parameter, see the description of the InstallOptionsValues parameter of the SoftwareInstallationService.InstallFromSoftwareIdentity method.

Output Parameters:
    string MessageID                        :        No documentation.
    string Message                          :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromURI',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromURI',{'InstallOptionsValues': InstallOptionsValues, 'Job': Job, 'InstallOptions': InstallOptions, 'Target': Target, 'URI': URI}))
    def checksoftwareidentity(self,Source=None,Target=None,Collection=None,InputXmlFile=None):
        '''This method allows a client application to determine whether a specific SoftwareIdentity can be installed (or updated) on a ManagedElement. It also allows other characteristics to be determined such as whether install will require a reboot. In addition a client can check whether the SoftwareIdentity can be added simulataneously to a specified SofwareIndentityCollection. A client MAY specify either or both of the Collection and Target parameters. The Collection parameter is only supported if SoftwareInstallationServiceCapabilities.CanAddToCollection is TRUE.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_SoftwareIdentity REF Source         :        Reference to the SoftwareIdentity to be checked.
    CIM_ManagedElement REF Target           :        Reference to the ManagedElement that the Software Identity is going to be installed in (or updated).
    CIM_Collection REF Collection           :        Reference to the Collection to which the Software Identity will be added.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckSoftwareIdentity',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckSoftwareIdentity',{'Source': Source, 'Target': Target, 'Collection': Collection}))
    def installfromsoftwareidentity(self,Source=None,Job=None,InstallOptions=None,Target=None,InstallOptionsValues=None,InputXmlFile=None):
        '''Start a job to install or update a SoftwareIdentity (Source) on a ManagedElement (Target). \n In addition the method can be used to add the SoftwareIdentity simulataneously to a specified SofwareIndentityCollection. A client MAY specify either or both of the Collection and Target parameters. The Collection parameter is only supported if SoftwareInstallationServiceCapabilities.CanAddToCollection is TRUE. \n If 0 is returned, the function completed successfully and no ConcreteJob instance was required. If 4096/0x1000 is returned, a ConcreteJob will be started to perform the install. The Job s reference will be returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_SoftwareIdentity REF Source         :        Reference to the source of the install.
    CIM_ConcreteJob REF Job                 :        Reference to the job (may be null if job completed).
    uint16[] InstallOptions                 :        Options to control the install process.\nDefer target/system reset : do not automatically reset the target/system.\nForce installation : Force the installation of the same or an older SoftwareIdentity. Install: Perform an installation of this software on the managed element.\nUpdate: Perform an update of this software on the managed element.\nRepair: Perform a repair of the installation of this software on the managed element by forcing all the files required for installing the software to be reinstalled.\nReboot: Reboot or reset the system immediately after the install or update of this software, if the install or the update requires a reboot or reset.\nPassword: Password will be specified as clear text without any encryption for performing the install or update.\nUninstall: Uninstall the software on the managed element.\nLog: Create a log for the install or update of the software.\nSilentMode: Perform the install or update without displaying any user interface.\nAdministrativeMode: Perform the install or update of the software in the administrative mode. ScheduleInstallAt: Indicates the time at which theinstall or update of the software will occur.
    CIM_ManagedElement REF Target           :        The installation target. If NULL then the SOftwareIdentity will be added to Collection only. The underlying implementation is expected to be able to obtain any necessary metadata from the Software Identity.
    string[] InstallOptionsValues           :        InstallOptionsValues is an array of strings providing additional information to InstallOptions for the method to install the software. Each entry of this array is related to the entry in InstallOptions that is located at the same index providing additional information for InstallOptions. \nIf the index in InstallOptions has the value Password  then a value at the corresponding index of InstallOptionValues shall not be NULL. \nIf the index in InstallOptions has the value ScheduleInstallAt then the value at the corresponding index of InstallOptionValues shall not be NULL and shall be in the datetime type format. \nIf the index in InstallOptions has the value Log  then a value at the corresponding index of InstallOptionValues may be NULL. \nIf the index in InstallOptions has the value Defer target/system reset, Force installation,Install, Update, Repair or Reboot then a value at the corresponding index of InstallOptionValues shall be NULL.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromSoftwareIdentity',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromSoftwareIdentity',{'Source': Source, 'Job': Job, 'InstallOptions': InstallOptions, 'Target': Target, 'InstallOptionsValues': InstallOptionsValues}))
class __CIM_TimeService__(__BaseClass__, __CIM_Service__):
    '''The TimeService manages time (retrieves or sets time) for one or more elements in a system. All elements to which the Service applies are associated using ServiceAffectsElement. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_TimeService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'managetime':self.managetime,
            }
    def managetime(self,TimeData=None,GetRequest=None,InputXmlFile=None):
        '''This method gets or sets the time for the specified element.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    datetime TimeData                       :        The current date and time. On input, this value is the time that is set on the specified element, if the GetRequest input parameter is TRUE. Otherwise, the input time is ignored. On output, this value is the time as it is known by the element.
    boolean GetRequest                      :        Indicates whether the request is to get (TRUE) or set (FALSE) the time for the specified element.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ManageTime',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ManageTime',{'TimeData': TimeData, 'GetRequest': GetRequest}))
class __DCIM_EFConfigurationService__(__BaseClass__, __CIM_Service__):
    ''')

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EFConfigurationService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'simulatetestevent':self.simulatetestevent,
            'seteventfilterbycategory':self.seteventfilterbycategory,
            'seteventfilterbyinstanceids':self.seteventfilterbyinstanceids,
            }
    def simulatetestevent(self,EFMessageIDs=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] EFMessageIDs                   :        This property identifies the event filters messageIDs.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SimulateTestEvent',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SimulateTestEvent',{'EFMessageIDs': EFMessageIDs}))
    def seteventfilterbycategory(self,Category=None,SubCategory=None,RequestedNotification=None,RequestedAction=None,Severity=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Category                         :        This property identifies the category
    string SubCategory                      :        This property identifies the sub-category
    uint16[] RequestedNotification          :         
    uint16 RequestedAction                  :         
    string Severity                         :        This category identifies the severity

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetEventFilterByCategory',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetEventFilterByCategory',{'Category': Category, 'RequestedNotification': RequestedNotification, 'Severity': Severity, 'SubCategory': SubCategory, 'RequestedAction': RequestedAction}))
    def seteventfilterbyinstanceids(self,InstanceID=None,RequestedNotification=None,RequestedAction=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] InstanceID                     :        Is a unique string identifying platform event filter. 
    uint16[] RequestedNotification          :         
    uint16 RequestedAction                  :         

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] Message                        :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetEventFilterByInstanceIDs',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetEventFilterByInstanceIDs',{'InstanceID': InstanceID, 'RequestedNotification': RequestedNotification, 'RequestedAction': RequestedAction}))
class __DCIM_JobService__(__BaseClass__, __CIM_Service__):
    '''DCIM_JobService is a derivation of CIM_Service )

Class Properties:
    uint16 CurrentNumberOfJobs              :    The current number of jobs in the Job Store
    uint16 DeleteOnCompletionTimeout        :    Jobs that have been completed for longer than theDeleteOnCompletionTimeout will be deleted during the auto-delete
    uint16 MaximumNumberOfJobs              :    The maximum number of jobs in the Job Store
    uint16 StartAutoDeleteAtThreshold       :    Percentage of the MaximumNumberOfJobs which, when reached, willcause all jobs that have been completed for longer than theDeleteOnCompletetionTimeout to be deleted
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_JobService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'setupjobqueue':self.setupjobqueue,
            'createjob':self.createjob,
            'deletejobs':self.deletejobs,
            'setdeleteoncompletiontimeout':self.setdeleteoncompletiontimeout,
            'deletejobqueue':self.deletejobqueue,
            'createrebootjob':self.createrebootjob,
            }
    def setupjobqueue(self,JobArray=None,StartTimeInterval=None,UntilTime=None,InputXmlFile=None):
        '''SetupJobQueue method schedule one more jobs in queue.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] JobArray                       :        No documentation.
    string StartTimeInterval                :        No documentation.
    string UntilTime                        :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetupJobQueue',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetupJobQueue',{'JobArray': JobArray, 'StartTimeInterval': StartTimeInterval, 'UntilTime': UntilTime}))
    def createjob(self,JobParameterNames=None,MessageArguments=None,JobParameterValues=None,MessageID=None,Message=None,JobType=None,InputXmlFile=None):
        '''CreateJob().This Method will return the jobID for the requested job type.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] JobParameterNames              :        The job specific parameter names.
    string[] MessageArguments               :        Substitution variables for dynamic error messages.
    string[] JobParameterValues             :        The job specific parameter values.
    string MessageID                        :        Error Message ID- can be used to index into DellMessage registry files
    string Message                          :        Completed error message in English
    uint16 JobType                          :        The job type of the CIM_ConcreteJob.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateJob',{'JobParameterNames': JobParameterNames, 'MessageArguments': MessageArguments, 'JobParameterValues': JobParameterValues, 'MessageID': MessageID, 'Message': Message, 'JobType': JobType}))
    def deletejobs(self,JobArray=None,InputXmlFile=None):
        '''DeleteJobs method deletes jobs that are not running.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] JobArray                       :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteJobs',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteJobs',{'JobArray': JobArray}))
    def setdeleteoncompletiontimeout(self,Message=None,DeleteOnCompletionTimeout=None,MessageID=None,InputXmlFile=None):
        '''SetDeleteOnCompletionTimeout().This Method will set the job store auto-deletion policy.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Completed error message in English
    uint16 DeleteOnCompletionTimeout        :        Timeout in minutes
    string MessageID                        :        Error Message ID- can be used to index into DellMessage registry files
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetDeleteOnCompletionTimeout',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetDeleteOnCompletionTimeout',{'Message': Message, 'DeleteOnCompletionTimeout': DeleteOnCompletionTimeout, 'MessageID': MessageID}))
    def deletejobqueue(self,JobID=None,InputXmlFile=None):
        '''DeleteJobQueue method deletes jobs that are not running.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string JobID                            :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteJobQueue',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteJobQueue',{'JobID': JobID}))
    def createrebootjob(self,Message=None,MessageID=None,RebootJobType=None,MessageArguments=None,InputXmlFile=None):
        '''CreateRebootJob().This Method will return the jobID for Rebootjob.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Completed error message in English
    string MessageID                        :        Error Message ID- can be used to index into DellMessage registry files
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle2 - Graceful Reboot without forced shutdown3 - Graceful Reboot with forced shutdown
    string[] MessageArguments               :        Substitution variables for dynamic error messages.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateRebootJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateRebootJob',{'Message': Message, 'MessageArguments': MessageArguments, 'RebootJobType': RebootJobType, 'MessageID': MessageID}))
class __DCIM_LicenseManagementService__(__BaseClass__, __CIM_Service__):
    '''DCIM_LicenseManagementService is a derivation of CIM_Service, and provides methods to service the License Manager )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LicenseManagementService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'deletelicense':self.deletelicense,
            'replacelicense':self.replacelicense,
            'importlicense':self.importlicense,
            'exportlicensetonetworkshare':self.exportlicensetonetworkshare,
            'exportlicense':self.exportlicense,
            'exportlicensebydevicetonetworkshare':self.exportlicensebydevicetonetworkshare,
            'exportlicensebydevice':self.exportlicensebydevice,
            'importlicensefromnetworkshare':self.importlicensefromnetworkshare,
            'showlicensebits':self.showlicensebits,
            }
    def deletelicense(self,DeleteOptions=None,EntitlementID=None,FQDD=None,InputXmlFile=None):
        '''DeleteLicense.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 DeleteOptions                    :        Flag to force delete or delete license from all like devices. 
    string EntitlementID                    :        Entitlement ID of the license to delete.
    string FQDD                             :        FQDD of the device to delete the license from.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteLicense',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteLicense',{'DeleteOptions': DeleteOptions, 'EntitlementID': EntitlementID, 'FQDD': FQDD}))
    def replacelicense(self,EntitlementID=None,FQDD=None,LicenseFile=None,ReplaceOptions=None,InputXmlFile=None):
        '''ReplaceLicense.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string EntitlementID                    :        Entitlement ID of the license being replaced.
    string FQDD                             :        FQDD of the device the license is being replaced on.
    string LicenseFile                      :        A base64 encoded XML License file.
    uint16 ReplaceOptions                   :        Flag to force or replace for all like devices.No options=0, force=1 and all=2.

Output Parameters:
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReplaceLicense',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReplaceLicense',{'ReplaceOptions': ReplaceOptions, 'EntitlementID': EntitlementID, 'LicenseFile': LicenseFile, 'FQDD': FQDD}))
    def importlicense(self,FQDD=None,LicenseFile=None,ImportOptions=None,InputXmlFile=None):
        '''ImportLicense.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string FQDD                             :        FQDD of the device to apply the License to.
    string LicenseFile                      :        A base64 encoded XML License file.
    uint16 ImportOptions                    :        Flag to force or install for all like devices.No options=0, force=1 and all=2.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportLicense',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportLicense',{'ImportOptions': ImportOptions, 'LicenseFile': LicenseFile, 'FQDD': FQDD}))
    def exportlicensetonetworkshare(self,UserName=None,EntitlementID=None,Workgroup=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''ExportLicenseToNetworkShare.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        Username for CIFS share authentication
    string EntitlementID                    :        Entitlement ID of the license being exported
    string Workgroup                        :        Name of the workgroup for CIFS share authentication.
    uint16 ShareType                        :        Type of network share.
    string ShareName                        :        Name of the CIFS share or full path to the NFS share
    string FileName                         :        If included, the exported license is renamed to <FileName>
    string Password                         :        Password for CIFS share authentication
    string IPAddress                        :        IP address of the machine hosting the NFS/CIFS share.

Output Parameters:
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseToNetworkShare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseToNetworkShare',{'UserName': UserName, 'EntitlementID': EntitlementID, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def exportlicense(self,EntitlementID=None,InputXmlFile=None):
        '''ExportLicense.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string EntitlementID                    :        Entitlement ID of the license being exported

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicense',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicense',{'EntitlementID': EntitlementID}))
    def exportlicensebydevicetonetworkshare(self,UserName=None,Workgroup=None,FQDD=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''ExportLicenseByDeviceToNetworkShare.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        Username for CIFS share authentication
    string Workgroup                        :        Name of the workgroup for CIFS share authentication.
    string FQDD                             :        FQDD of the device to export licenses from
    uint16 ShareType                        :        Type of network share.
    string ShareName                        :        Name of the CIFS share or full path to the NFS share
    string FileName                         :        If included, the exported license is renamed to <FileName>
    string Password                         :        Password for CIFS share authentication
    string IPAddress                        :        IP address of the machine hosting the NFS/CIFS share.

Output Parameters:
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseByDeviceToNetworkShare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseByDeviceToNetworkShare',{'UserName': UserName, 'Workgroup': Workgroup, 'FQDD': FQDD, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def exportlicensebydevice(self,FQDD=None,InputXmlFile=None):
        '''ExportLicenseByDevice.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string FQDD                             :        Entitlement ID of the license being exported

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseByDevice',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLicenseByDevice',{'FQDD': FQDD}))
    def importlicensefromnetworkshare(self,UserName=None,ImportOptions=None,Workgroup=None,FQDD=None,ShareType=None,ShareName=None,LicenseName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''ImportLicenseFromNetworkShare.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        Username for CIFS share authentication
    uint16 ImportOptions                    :        Flag to force or install for all like devices.No options=0, force=1 and all=2.
    string Workgroup                        :        Name of the workgroup for CIFS share authentication.
    string FQDD                             :        Fully qualified device descriptor
    uint16 ShareType                        :        Type of network share.
    string ShareName                        :        Name of the CIFS share or full path to the NFS share
    string LicenseName                      :        If included, the exported license is renamed to <FileName>
    string Password                         :        Password for CIFS share authentication
    string IPAddress                        :        IP address of the machine hosting the NFS/CIFS share.

Output Parameters:
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportLicenseFromNetworkShare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportLicenseFromNetworkShare',{'UserName': UserName, 'ImportOptions': ImportOptions, 'Workgroup': Workgroup, 'FQDD': FQDD, 'ShareType': ShareType, 'ShareName': ShareName, 'LicenseName': LicenseName, 'Password': Password, 'IPAddress': IPAddress}))
    def showlicensebits(self,InputXmlFile=None):
        '''ShowLicenseBits.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID returned if the method fails to execute.
    string LicenseBits                      :        256-bit License bit string
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowLicenseBits',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowLicenseBits',{}))
class __DCIM_OSDeploymentService__(__BaseClass__, __CIM_Service__):
    '''DCIM_OSDeploymentService is a Dell extension of CIM_Service. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_OSDeploymentService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'getrfsisoimageconnectioninfo':self.getrfsisoimageconnectioninfo,
            'boottoiso':self.boottoiso,
            'detachisofromvflash':self.detachisofromvflash,
            'deleteisofromvflash':self.deleteisofromvflash,
            'gethostmacinfo':self.gethostmacinfo,
            'downloadisoimage':self.downloadisoimage,
            'downloadisotovflash':self.downloadisotovflash,
            'connectrfsisoimage':self.connectrfsisoimage,
            'detachdrivers':self.detachdrivers,
            'unpackandshare':self.unpackandshare,
            'configurableboottonetworkiso':self.configurableboottonetworkiso,
            'connectnetworkisoimage':self.connectnetworkisoimage,
            'boottopxe':self.boottopxe,
            'getattachstatus':self.getattachstatus,
            'getdriverpackinfo':self.getdriverpackinfo,
            'skipisoimageboot':self.skipisoimageboot,
            'detachisoimage':self.detachisoimage,
            'boottoisofromvflash':self.boottoisofromvflash,
            'disconnectnetworkisoimage':self.disconnectnetworkisoimage,
            'unpackandattach':self.unpackandattach,
            'disconnectrfsisoimage':self.disconnectrfsisoimage,
            'boottonetworkiso':self.boottonetworkiso,
            'boottohd':self.boottohd,
            'getnetworkisoimageconnectioninfo':self.getnetworkisoimageconnectioninfo,
            }
    def getrfsisoimageconnectioninfo(self,UserName=None,Message=None,FilePath=None,MessageID=None,InputXmlFile=None):
        '''GetRFSISOImageConnectionInfo. This method will give the status of the ISO Image that has been exposed to host.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        User Name as specified in the ConnectNetworkISOImage method
    string Message                          :        Description of error message in english part of the OSD message registry
    string FilePath                         :        File Path of ISO Image in the form of URI that includes ip addr, share name and Image name
    string MessageID                        :        Error message ID part of the OSD message registry
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRFSISOImageConnectionInfo',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRFSISOImageConnectionInfo',{'UserName': UserName, 'Message': Message, 'MessageID': MessageID, 'FilePath': FilePath}))
    def boottoiso(self,Message=None,MessageID=None,ExposeDuration=None,Job=None,InputXmlFile=None):
        '''BootToISO.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
    datetime ExposeDuration                 :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToISO',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToISO',{'Message': Message, 'ExposeDuration': ExposeDuration, 'Job': Job, 'MessageID': MessageID}))
    def detachisofromvflash(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DetachISOFromVFlash.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachISOFromVFlash',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachISOFromVFlash',{'Message': Message, 'MessageID': MessageID}))
    def deleteisofromvflash(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DeleteISOFromVFlash.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteISOFromVFlash',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteISOFromVFlash',{'Message': Message, 'MessageID': MessageID}))
    def gethostmacinfo(self,Message=None,MACList=None,MessageID=None,InputXmlFile=None):
        '''GetHostMACInfo.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string[] MACList                        :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetHostMACInfo',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetHostMACInfo',{'Message': Message, 'MACList': MACList, 'MessageID': MessageID}))
    def downloadisoimage(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,HashType=None,Job=None,ImageName=None,MessageID=None,Message=None,Password=None,IPAddress=None,Port=None,InputXmlFile=None):
        '''DownloadISOImage.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Description goes here
    string HashValue                        :        Description goes here
    string Workgroup                        :        Description goes here
    uint16 ShareType                        :        Description goes here
    string ShareName                        :        Description goes here
    uint16 HashType                         :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string ImageName                        :        Description goes here
    string MessageID                        :        Description goes here
    string Message                          :        Description goes here
    string Password                         :        Description goes here
    string IPAddress                        :        Description goes here
    uint16 Port                             :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadISOImage',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'MessageID': MessageID, 'Message': Message, 'Password': Password, 'IPAddress': IPAddress, 'Port': Port}))
    def downloadisotovflash(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,HashType=None,Job=None,ImageName=None,MessageID=None,Message=None,Password=None,IPAddress=None,Port=None,InputXmlFile=None):
        '''DownloadISOToVFlash.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Description goes here
    string HashValue                        :        Description goes here
    string Workgroup                        :        Description goes here
    uint16 ShareType                        :        Description goes here
    string ShareName                        :        Description goes here
    uint16 HashType                         :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string ImageName                        :        Description goes here
    string MessageID                        :        Description goes here
    string Message                          :        Description goes here
    string Password                         :        Description goes here
    string IPAddress                        :        Description goes here
    uint16 Port                             :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadISOToVFlash',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadISOToVFlash',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'MessageID': MessageID, 'Message': Message, 'Password': Password, 'IPAddress': IPAddress, 'Port': Port}))
    def connectrfsisoimage(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,HashType=None,Job=None,ImageName=None,MessageID=None,Message=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''ConnectRFSISOImage. This method will connect the ISO and attach it to the host server as usb cdrom device via RFS end point.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string HashValue                        :        Checksum value in string format computed using HashType algorithm
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Share name of the server that hosts the ISO Image
    uint16 HashType                         :        Type of Hash algorithm used to compute checksum
    CIM_ConcreteJob REF Job                 :        Reference to a CIM_ConcreteJob
    string ImageName                        :        ISO Image name on the server
    string MessageID                        :        Error message ID part of the OSD message registry
    string Message                          :        Description of error message in english part of the OSD message registry
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the server that hosts the ISO Image
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConnectRFSISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConnectRFSISOImage',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'MessageID': MessageID, 'Message': Message, 'Password': Password, 'IPAddress': IPAddress}))
    def detachdrivers(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DetachDrivers.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachDrivers',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachDrivers',{'Message': Message, 'MessageID': MessageID}))
    def unpackandshare(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,OSName=None,FolderName=None,Job=None,MessageID=None,Message=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''UnpackAndShare.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Description goes here
    string Workgroup                        :        Description goes here
    uint16 ShareType                        :        Description goes here
    string ShareName                        :        Description goes here
    string OSName                           :        Description goes here
    string FolderName                       :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string MessageID                        :        Description goes here
    string Message                          :        Description goes here
    string Password                         :        Description goes here
    string IPAddress                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnpackAndShare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnpackAndShare',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'OSName': OSName, 'FolderName': FolderName, 'Job': Job, 'MessageID': MessageID, 'Message': Message, 'Password': Password, 'IPAddress': IPAddress}))
    def configurableboottonetworkiso(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,HashType=None,Job=None,ImageName=None,ResetType=None,MessageID=None,ExposeDuration=None,Password=None,IPAddress=None,Message=None,InputXmlFile=None):
        '''ConfigurableBootToNetworkISO.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Description goes here
    string HashValue                        :        Description goes here
    string Workgroup                        :        Description goes here
    uint16 ShareType                        :        Description goes here
    string ShareName                        :        Description goes here
    uint16 HashType                         :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string ImageName                        :        Description goes here
    uint16 ResetType                        :        Description goes here
    string MessageID                        :        Description goes here
    datetime ExposeDuration                 :        Description goes here
    string Password                         :        Description goes here
    string IPAddress                        :        Description goes here
    string Message                          :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConfigurableBootToNetworkISO',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConfigurableBootToNetworkISO',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'ResetType': ResetType, 'MessageID': MessageID, 'ExposeDuration': ExposeDuration, 'Password': Password, 'IPAddress': IPAddress, 'Message': Message}))
    def connectnetworkisoimage(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,HashType=None,Job=None,ImageName=None,MessageID=None,Message=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''ConnectNetworkISOImage.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string HashValue                        :        Checksum value in string format computed using HashType algorithm
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Share name of the server that hosts the ISO Image
    uint16 HashType                         :        Type of Hash algorithm used to compute checksum
    CIM_ConcreteJob REF Job                 :        Reference to a CIM_ConcreteJob
    string ImageName                        :        ISO Image name on the server
    string MessageID                        :        Error message ID part of the OSD message registry
    string Message                          :        Description of error message in english part of the OSD message registry
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the server that hosts the ISO Image
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConnectNetworkISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConnectNetworkISOImage',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'MessageID': MessageID, 'Message': Message, 'Password': Password, 'IPAddress': IPAddress}))
    def boottopxe(self,Message=None,MessageID=None,InputXmlFile=None):
        '''BootToPXE.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToPXE',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToPXE',{'Message': Message, 'MessageID': MessageID}))
    def getattachstatus(self,Message=None,DriversAttachStatus=None,ISOAttachStatus=None,MessageID=None,InputXmlFile=None):
        '''GetAttachStatus.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    uint8 DriversAttachStatus               :        Description goes here
    uint8 ISOAttachStatus                   :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAttachStatus',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAttachStatus',{'Message': Message, 'MessageID': MessageID, 'ISOAttachStatus': ISOAttachStatus, 'DriversAttachStatus': DriversAttachStatus}))
    def getdriverpackinfo(self,Message=None,Version=None,OSList=None,Job=None,MessageID=None,InputXmlFile=None):
        '''GetDriverPackInfo.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string Version                          :        Description goes here
    string[] OSList                         :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetDriverPackInfo',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetDriverPackInfo',{'Message': Message, 'Version': Version, 'OSList': OSList, 'Job': Job, 'MessageID': MessageID}))
    def skipisoimageboot(self,Message=None,MessageID=None,InputXmlFile=None):
        '''SkipISOImageBoot. This method will allow BIOS to boot to the first device in boot list.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description of error message in english part of the OSD message registry
    string MessageID                        :        Error message ID part of the OSD message registry
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SkipISOImageBoot',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SkipISOImageBoot',{'Message': Message, 'MessageID': MessageID}))
    def detachisoimage(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DetachISOImage.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachISOImage',{'Message': Message, 'MessageID': MessageID}))
    def boottoisofromvflash(self,Message=None,MessageID=None,ExposeDuration=None,Job=None,InputXmlFile=None):
        '''BootToISOFromVFlash.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
    datetime ExposeDuration                 :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToISOFromVFlash',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToISOFromVFlash',{'Message': Message, 'ExposeDuration': ExposeDuration, 'Job': Job, 'MessageID': MessageID}))
    def disconnectnetworkisoimage(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DisconnectNetworkISOImage. This method will disconnect and detach the ISO Image from the host server.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description of error message in english part of the OSD message registry
    string MessageID                        :        Error message ID part of the OSD message registry
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DisconnectNetworkISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DisconnectNetworkISOImage',{'Message': Message, 'MessageID': MessageID}))
    def unpackandattach(self,OSName=None,Message=None,ExposeDuration=None,Job=None,MessageID=None,InputXmlFile=None):
        '''UnpackAndAttach.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string OSName                           :        Description goes here
    string Message                          :        Description goes here
    datetime ExposeDuration                 :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnpackAndAttach',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnpackAndAttach',{'Message': Message, 'MessageID': MessageID, 'OSName': OSName, 'ExposeDuration': ExposeDuration, 'Job': Job}))
    def disconnectrfsisoimage(self,Message=None,MessageID=None,InputXmlFile=None):
        '''DisconnectRFSISOImage. This method will disconnect and detach the ISO Image from the host server.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description of error message in english part of the OSD message registry
    string MessageID                        :        Error message ID part of the OSD message registry
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DisconnectRFSISOImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DisconnectRFSISOImage',{'Message': Message, 'MessageID': MessageID}))
    def boottonetworkiso(self,Username=None,HashValue=None,Workgroup=None,ShareType=None,ShareName=None,FolderName=None,HashType=None,Job=None,ImageName=None,MessageID=None,ExposeDuration=None,Password=None,IPAddress=None,Message=None,InputXmlFile=None):
        '''BootToNetworkISO.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Description goes here
    string HashValue                        :        Description goes here
    string Workgroup                        :        Description goes here
    uint16 ShareType                        :        Description goes here
    string ShareName                        :        Description goes here
    string FolderName                       :        Description goes here
    uint16 HashType                         :        Description goes here
    CIM_ConcreteJob REF Job                 :        Description goes here
    string ImageName                        :        Description goes here
    string MessageID                        :        Description goes here
    datetime ExposeDuration                 :        Description goes here
    string Password                         :        Description goes here
    string IPAddress                        :        Description goes here
    string Message                          :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToNetworkISO',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToNetworkISO',{'Username': Username, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FolderName': FolderName, 'HashType': HashType, 'Job': Job, 'ImageName': ImageName, 'MessageID': MessageID, 'ExposeDuration': ExposeDuration, 'Password': Password, 'IPAddress': IPAddress, 'Message': Message}))
    def boottohd(self,Message=None,MessageID=None,InputXmlFile=None):
        '''BootToHD.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Message                          :        Description goes here
    string MessageID                        :        Description goes here
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToHD',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BootToHD',{'Message': Message, 'MessageID': MessageID}))
    def getnetworkisoimageconnectioninfo(self,UserName=None,Workgroup=None,ShareName=None,IPAddr=None,HostBootedFromISO=None,ImageName=None,MessageID=None,ISOConnectionStatus=None,Message=None,HostAttachedStatus=None,InputXmlFile=None):
        '''GetNetworkISOImageConnectionInfo. This method will give the status of the ISO Image that has been exposed to host.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        User Name as specified in the ConnectNetworkISOImage method
    string Workgroup                        :        Workgroup as specified in the ConnectNetworkISOImage method
    string ShareName                        :        Share Name as specified in the ConnectNetworkISOImage method
    string IPAddr                           :        IP Address as specified in the ConnectNetworkISOImage method
    uint8 HostBootedFromISO                 :        Describes ISO boot status. If the ISO has been booted atleast once or not.
    string ImageName                        :        ISO Image Name as specified in the ConnectNetworkISOImage method
    string MessageID                        :        Error message ID part of the OSD message registry
    uint8 ISOConnectionStatus               :        Describes the session status
    string Message                          :        Description of error message in english part of the OSD message registry
    uint8 HostAttachedStatus                :        Describes ISO attached status
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetNetworkISOImageConnectionInfo',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetNetworkISOImageConnectionInfo',{'UserName': UserName, 'Workgroup': Workgroup, 'ShareName': ShareName, 'IPAddr': IPAddr, 'HostBootedFromISO': HostBootedFromISO, 'ImageName': ImageName, 'MessageID': MessageID, 'ISOConnectionStatus': ISOConnectionStatus, 'Message': Message, 'HostAttachedStatus': HostAttachedStatus}))
class __DCIM_PersistentStorageService__(__BaseClass__, __CIM_Service__):
    '''DCIM_PersistentStorageService is a derivation of CIM_Service with extrinsic method extensions to support VFlash functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PersistentStorageService'
        self.__parent__ = 'CIM_Service'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'modifypartition':self.modifypartition,
            'vflashstatechange':self.vflashstatechange,
            'createpartitionusingimage':self.createpartitionusingimage,
            'createpartition':self.createpartition,
            'deletepartition':self.deletepartition,
            'initializemedia':self.initializemedia,
            'detachpartition':self.detachpartition,
            'formatpartition':self.formatpartition,
            'exportdatafrompartition':self.exportdatafrompartition,
            'attachpartition':self.attachpartition,
            }
    def modifypartition(self,PartitionIndex=None,AccessType=None,InputXmlFile=None):
        '''This method is called to modify a partition on a storage device.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PartitionIndex                   :        The partition index of which is to be formatted 
    uint16 AccessType                       :        Type of access level 

Output Parameters:
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPartition',{'PartitionIndex': PartitionIndex, 'AccessType': AccessType}))
    def vflashstatechange(self,RequestedState=None,InputXmlFile=None):
        '''This method is called to enable, disable or reset virtual flash media.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RequestedState                   :        The state to set to

Output Parameters:
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'VFlashStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'VFlashStateChange',{'RequestedState': RequestedState}))
    def createpartitionusingimage(self,Username=None,PartitionIndex=None,HashValue=None,OSVolumeLabel=None,Workgroup=None,ShareType=None,URI=None,SharePath=None,HashType=None,ImageName=None,Password=None,IPAddress=None,Port=None,PartitionType=None,InputXmlFile=None):
        '''This method is called to create a partition using an image provided by the user.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        The username to be used to access the file 
    uint16 PartitionIndex                   :        The index of the partition.  1..16 
    string HashValue                        :        The hash value string based on the HashType parameter 
    string OSVolumeLabel                    :        Label seen in the OS after attaching the partitionLimit to 6 characters. 
    string Workgroup                        :        Name of the workgroup depending on if its needed 
    uint16 ShareType                        :        Type of share 
    string URI                              :        URI location of firmware to update a component Supported protocols are FTP,HTTP. 
    string SharePath                        :        NFS sharepoint address 
    uint16 HashType                         :        The hash type 
    string ImageName                        :        Name of the ISO or IMG image 
    string Password                         :        The password to be used to access the file 
    string IPAddress                        :        IP address of TFTP or NFS share 
    uint16 Port                             :        	The port number to be used 
    uint16 PartitionType                    :        The Partition Type

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in English corresponding to the MessageID 
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreatePartitionUsingImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreatePartitionUsingImage',{'Username': Username, 'HashType': HashType, 'HashValue': HashValue, 'OSVolumeLabel': OSVolumeLabel, 'Workgroup': Workgroup, 'ShareType': ShareType, 'URI': URI, 'Port': Port, 'PartitionIndex': PartitionIndex, 'ImageName': ImageName, 'Password': Password, 'IPAddress': IPAddress, 'SharePath': SharePath, 'PartitionType': PartitionType}))
    def createpartition(self,OSVolumeLabel=None,PartitionIndex=None,SizeUnit=None,PartitionType=None,Size=None,InputXmlFile=None):
        '''This method is called to create a new partition on a storage device.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string OSVolumeLabel                    :        Label seen in the OS after attaching the partitionLimit to 6 characters. 
    uint16 PartitionIndex                   :        The index of the partition. 1..16 
    uint16 SizeUnit                         :        The unit of the size 
    uint16 PartitionType                    :        The Partition Type
    uint16 Size                             :        The size of the partition to be created.

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in English corresponding to the MessageID 
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreatePartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreatePartition',{'PartitionIndex': PartitionIndex, 'SizeUnit': SizeUnit, 'Size': Size, 'OSVolumeLabel': OSVolumeLabel, 'PartitionType': PartitionType}))
    def deletepartition(self,PartitionIndex=None,InputXmlFile=None):
        '''This method is called to delete a partition on a storage device.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PartitionIndex                   :        The index of the partitions.  1..16 

Output Parameters:
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePartition',{'PartitionIndex': PartitionIndex}))
    def initializemedia(self,InputXmlFile=None):
        '''This method is called to initialize or format virtual flash media.

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InitializeMedia',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InitializeMedia',{}))
    def detachpartition(self,PartitionIndex=None,InputXmlFile=None):
        '''This method is called to detach partitions from OS

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PartitionIndex                   :        The index of the partitions.  1..16 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachPartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DetachPartition',{'PartitionIndex': PartitionIndex}))
    def formatpartition(self,PartitionIndex=None,FormatType=None,InputXmlFile=None):
        '''This method is called to format partitions on a storage device.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PartitionIndex                   :        The partition index of which is to be formatted 
    uint16 FormatType                       :        The list of types to format to. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'FormatPartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'FormatPartition',{'PartitionIndex': PartitionIndex, 'FormatType': FormatType}))
    def exportdatafrompartition(self,Username=None,PartitionIndex=None,HashValue=None,Workgroup=None,ShareType=None,SharePath=None,HashType=None,ImageName=None,Password=None,IPAddress=None,Port=None,InputXmlFile=None):
        '''This method is called to export an image from a partition.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        The username to be used to access the file 
    uint16 PartitionIndex                   :        The partition index of which is to be formatted 
    string HashValue                        :        Not documented 
    string Workgroup                        :        Name of the workgroup depending on if its needed 
    uint16 ShareType                        :        Type of share 
    string SharePath                        :        NFS sharepoint address 
    uint16 HashType                         :        Not documented 
    string ImageName                        :        Name of the ISO or IMG image 
    string Password                         :        The password to be used to access the file 
    string IPAddress                        :        IP address of TFTP or NFS share 
    uint16 Port                             :        The port number if applicable 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in English corresponding to the MessageID 
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportDataFromPartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportDataFromPartition',{'Username': Username, 'HashType': HashType, 'HashValue': HashValue, 'Workgroup': Workgroup, 'ShareType': ShareType, 'Port': Port, 'PartitionIndex': PartitionIndex, 'ImageName': ImageName, 'Password': Password, 'IPAddress': IPAddress, 'SharePath': SharePath}))
    def attachpartition(self,PartitionIndex=None,InputXmlFile=None):
        '''This method is called to attach partitions to OS

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 PartitionIndex                   :        The index of the partitions.  1..16  

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreateJob is returned
    string Message                          :        Error Message in English corresponding to the MessageID 
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AttachPartition',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AttachPartition',{'PartitionIndex': PartitionIndex}))
class __DCIM_BIOSService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_BIOSService is a derivation of CIM_BIOSService with extrinsic method extensions to support BIOS functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BIOSService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'deletependingconfiguration':self.deletependingconfiguration,
            'setattribute':self.setattribute,
            'changepassword':self.changepassword,
            'setattributes':self.setattributes,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the BIOSAttribute instances.
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RebootJobType': RebootJobType}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the BIOSAttribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of BIOSAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified BIOSAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified BIOSAttribute.
    string AttributeName                    :        A reference to a BIOSAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the BIOSAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def changepassword(self,OldPassword=None,Target=None,NewPassword=None,PasswordType=None,InputXmlFile=None):
        '''This method is used to change the BIOS password

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string OldPassword                      :        Old Password
    string Target                           :        This Parameter is the FQDD of the BIOSAttribute instances.
    string NewPassword                      :        New Password
    uint16 PasswordType                     :        Password Type1 - System Password 2 - Setup Password 

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangePassword',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangePassword',{'NewPassword': NewPassword, 'OldPassword': OldPassword, 'Target': Target, 'PasswordType': PasswordType}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of NICAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified BIOSAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified BIOSAttribute.
    string[] AttributeName                  :        A reference to a BIOSAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the BIOSAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
class __DCIM_FCService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_FCService is a derivation of CIM_BIOSService with extrinsic method extensions to support Fiber Channel Host Bus Adapter functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'deletependingconfiguration':self.deletependingconfiguration,
            'setattribute':self.setattribute,
            'setattributes':self.setattributes,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the FCAttribute instances.
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RebootJobType': RebootJobType}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the FCAttribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of FCAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified FCAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified FCAttribute.
    string AttributeName                    :        A reference to a FCAttribute specified by AttributeName of the FCAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the FCAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of FCAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified FCAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified FCAttribute.
    string[] AttributeName                  :        A reference to a FCAttribute specified by AttributeName of the FCAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the FCAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
class __DCIM_LCService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_LCService is a derivation of CIM_BIOSService with extrinsic method extensions to support Lifecycle Controller functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'restoreimage':self.restoreimage,
            'exportcompletelclog':self.exportcompletelclog,
            'deleteautodiscoveryserverpublickey':self.deleteautodiscoveryserverpublickey,
            'createconfigjob':self.createconfigjob,
            'setattribute':self.setattribute,
            'deleteautodiscoveryclientcerts':self.deleteautodiscoveryclientcerts,
            'reinitiateautodiscovery':self.reinitiateautodiscovery,
            'exportsystemconfiguration':self.exportsystemconfiguration,
            'reinitiatedhs':self.reinitiatedhs,
            'exporterrormsgregistry':self.exporterrormsgregistry,
            'clearbackupschedule':self.clearbackupschedule,
            'exportepsadiagnosticsresult':self.exportepsadiagnosticsresult,
            'getbackupschedule':self.getbackupschedule,
            'exporttechsupportreport':self.exporttechsupportreport,
            'getrsstatus':self.getrsstatus,
            'clearprovisioningserver':self.clearprovisioningserver,
            'downloadserverpublickey':self.downloadserverpublickey,
            'lcwipe':self.lcwipe,
            'setpubliccertificate':self.setpubliccertificate,
            'exportserverscreenshot':self.exportserverscreenshot,
            'importsystemconfigurationpreview':self.importsystemconfigurationpreview,
            'setcertificateandprivatekey':self.setcertificateandprivatekey,
            'exporthwinventory':self.exporthwinventory,
            'exportfactoryconfiguration':self.exportfactoryconfiguration,
            'runepsadiagnostics':self.runepsadiagnostics,
            'backupimage':self.backupimage,
            'getremoteservicesapistatus':self.getremoteservicesapistatus,
            'importsystemconfiguration':self.importsystemconfiguration,
            'exportlclog':self.exportlclog,
            'systemerase':self.systemerase,
            'exportcertificate':self.exportcertificate,
            'testnetworkshare':self.testnetworkshare,
            'insertcommentinlclog':self.insertcommentinlclog,
            'downloadclientcerts':self.downloadclientcerts,
            'setbackupschedule':self.setbackupschedule,
            'updateosapphealthdata':self.updateosapphealthdata,
            'setattributes':self.setattributes,
            }
    def restoreimage(self,Username=None,UntilTime=None,Workgroup=None,ShareType=None,ShareName=None,ScheduledStartTime=None,ImageName=None,Passphrase=None,Password=None,PreserveVDConfig=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to restore backed up host image from a share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        The username to access the network share
    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Workgroup                        :        The password to access the network share
    uint16 ShareType                        :        The storage type for the share location
    string ShareName                        :        The share name for the network share
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    string ImageName                        :        The backup image name
    string Passphrase                       :        The passphrase for the restore image
    string Password                         :        The password to access the network share
    uint16 PreserveVDConfig                 :        Whether to preserve VD configuration
    string IPAddress                        :        The IP address for the network share for the backup image

Output Parameters:
    CIM_ConcreteJob REF Job                 :        The concreate job output
    string MessageID                        :        The message ID for the output message
    string Message                          :        The message string for the output message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RestoreImage',{'Username': Username, 'UntilTime': UntilTime, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'ScheduledStartTime': ScheduledStartTime, 'ImageName': ImageName, 'Passphrase': Passphrase, 'Password': Password, 'PreserveVDConfig': PreserveVDConfig, 'IPAddress': IPAddress}))
    def exportcompletelclog(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export Full Lifecycle Controller log in compressed format to a network share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        netowrk share name
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportCompleteLCLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportCompleteLCLog',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def deleteautodiscoveryserverpublickey(self,InputXmlFile=None):
        '''This method is called to delete the server public key previously downloaded

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteAutoDiscoveryServerPublicKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteAutoDiscoveryServerPublicKey',{}))
    def createconfigjob(self,RebootIfRequired=None,ScheduledStartTime=None,InputXmlFile=None):
        '''This method is called to apply the pending values set using the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    boolean RebootIfRequired                :        Not documented
    datetime ScheduledStartTime             :        Not documented

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateConfigJob',{'RebootIfRequired': RebootIfRequired, 'ScheduledStartTime': ScheduledStartTime}))
    def setattribute(self,AttributeValue=None,AttributeName=None,InputXmlFile=None):
        '''This method is called to modify instances of LCAttribute associated with this LCService.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified LCAttribute. If this value is valid, it will be applied to the CurrentValue or PendingValue property of the specified LCAttribute depending on the Lifecycle Controller implementation and any requirements for a system restart.
    string AttributeName                    :        A reference to a LCAttribute specified by AttributeName of the LCAttribute to be modified.

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns the result of invoking the SetAttribute method when the method return code is 0 completed with no error.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue}))
    def deleteautodiscoveryclientcerts(self,InputXmlFile=None):
        '''This method is called to delete the client certificates previously downloaded

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteAutoDiscoveryClientCerts',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteAutoDiscoveryClientCerts',{}))
    def reinitiateautodiscovery(self,Domain=None,Mask=None,PerformAutoDiscovery=None,DNS=None,ProvisioningServer=None,IPAddress=None,Gateway=None,InputXmlFile=None):
        '''This method is called to reinitialize the Lifecycle Controller to factory default settings with auto discovery enabled and static IP configuration.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Domain                           :        This is an optional parameter to specify the domain name. If not specified, iDRAC static domain name setting will be used.
    string Mask                             :        This is an optional parameter to specify the subnet mask. If not specified, iDRAC static mask setting will be used.
    uint16 PerformAutoDiscovery             :        Off disables auto discovery, Now enables and initiates auto discovery immediately and NextBoot will delay reconfiguration and auto discovery until next powercycle.
    string DNS                              :        This is an optional parameter to specify the DNS IP address. If not specified, iDRAC static DNS IP address setting will be used.
    string ProvisioningServer               :        This is an optional parameter to specify Provisioning Server addresses and ports used for auto discovery, if omitted, the Lifecycle Controller will get the value from DHCP or DNS
    string IPAddress                        :        This is an optional parameter to specify the static IP address. If not specified, iDRAC static IP address setting will be used.
    string Gateway                          :        This is an optional parameter to specify the gateway. If not specified, iDRAC static gateway setting will be used.

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReInitiateAutoDiscovery',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReInitiateAutoDiscovery',{'Domain': Domain, 'Mask': Mask, 'PerformAutoDiscovery': PerformAutoDiscovery, 'DNS': DNS, 'ProvisioningServer': ProvisioningServer, 'IPAddress': IPAddress, 'Gateway': Gateway}))
    def exportsystemconfiguration(self,Username=None,ExportUse=None,Target=None,ShareType=None,ShareName=None,FileName=None,IncludeInExport=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the system configuration from the Lifecycle Controller to a file on a remote share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    uint16 ExportUse                        :        		This parameter specifies whether the usage scenario is for		clone or replace
    string[] Target                         :        This parameter specifies the FQDDs of the targeted attributes. If not specified, all supported attributes will be exported. 
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Network share name
    string FileName                         :        File Name
    uint16 IncludeInExport                  :        	Extra information to be provided in the export
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportSystemConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportSystemConfiguration',{'Username': Username, 'ExportUse': ExportUse, 'Target': Target, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'IncludeInExport': IncludeInExport, 'Password': Password, 'IPAddress': IPAddress}))
    def reinitiatedhs(self,ProvisioningServer=None,ResetToFactoryDefaults=None,PerformAutoDiscovery=None,InputXmlFile=None):
        '''This method is called to reinitialize the Lifecycle Controller to factory default settings with auto discovery enabled.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string ProvisioningServer               :        This is an optional parameter to specify Provisioning Server addresses and ports used for auto discovery, if omitted, the Lifecycle Controller will get the value from DHCP or DNS
    boolean ResetToFactoryDefaults          :        If true, all configuration information is replaced with auto discovery factory defaults. If false, an error will be returned
    uint16 PerformAutoDiscovery             :        Off disables auto discovery, Now enables and initiates auto discovery immediately and NextBoot will delay reconfiguration and auto discovery until next powercycle.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReInitiateDHS',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReInitiateDHS',{'ProvisioningServer': ProvisioningServer, 'PerformAutoDiscovery': PerformAutoDiscovery, 'ResetToFactoryDefaults': ResetToFactoryDefaults}))
    def exporterrormsgregistry(self,Username=None,Workgroup=None,Language=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the Lifecycle Controller log to a network share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        		Username of the account to access the share
    string Workgroup                        :        		Workgroup of the account to access the share
    uint16 Language                         :         Default Language is English - 0 
    uint16 ShareType                        :        		Type of the share
    string ShareName                        :        		netowrk share name
    string FileName                         :        		File Name
    string Password                         :        		Password of the account to access the share
    string IPAddress                        :        		IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        		a reference to the ConcreteJob is returned
    string MessageID                        :        		Error MessageID is returned if the method fails 		to execute.
    string Message                          :        		Error Message in english corresponding to the 		MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportErrorMsgRegistry',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportErrorMsgRegistry',{'Username': Username, 'Workgroup': Workgroup, 'Language': Language, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def clearbackupschedule(self,InputXmlFile=None):
        '''This method is called to clear any automatic backup settings

Output Parameters:
    string Message                          :        Error Message
    string MessageID                        :        Error Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearBackupSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearBackupSchedule',{}))
    def exportepsadiagnosticsresult(self,Username=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export diagnostics result to a network share.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    uint8 ShareType                         :        Type of the share
    string ShareName                        :        network share name
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportePSADiagnosticsResult',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportePSADiagnosticsResult',{'Username': Username, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def getbackupschedule(self,InputXmlFile=None):
        '''This method is called to get automatic backup parameters that have been configured

Output Parameters:
    string UserName                         :        User name for the remote share
    string DayOfWeek                        :        *, Mon, Tue, Wed, Thu, Fri, Sat, Sun
    string Domain                           :        Domain for the share
    uint16 Repeat                           :        1-366
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Share name of the network share
    string Time                             :        hh:mm - Hour and minute of day to run
    uint16 MaxNumberOfBackupArchives        :        1-50
    string ImageName                        :        Name of the Backup file
    string WeekOfMonth                      :        *, 1-4, L
    string Passphrase                       :        Passphrase for the image
    string MessageID                        :        Error Message ID
    string Message                          :        Error Message
    string IPAddress                        :        IP address of the network share
    string DayOfMonth                       :        *, 1-28, L
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetBackupSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetBackupSchedule',{}))
    def exporttechsupportreport(self,Username=None,ShareType=None,ShareName=None,DataSelectorArrayIn=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export Tech Support report to a network share.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        network share name
    uint16[] DataSelectorArrayIn            :        DataSelectorArrayIn to select the data
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportTechSupportReport',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportTechSupportReport',{'Username': Username, 'ShareType': ShareType, 'ShareName': ShareName, 'DataSelectorArrayIn': DataSelectorArrayIn, 'Password': Password, 'IPAddress': IPAddress}))
    def getrsstatus(self,InputXmlFile=None):
        '''Checks the status of remote services. LC configuration can only succeed if the remote services are ready.

Output Parameters:
    string status                           :        The Status of the Data Manage. The statuses include Ready, Not Ready, and Reloading
    string Message                          :        The message string for the output message
    string MessageID                        :        The message ID for the output message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRSStatus',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRSStatus',{}))
    def clearprovisioningserver(self,InputXmlFile=None):
        '''This method is called to clear the values for provisioning server

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearProvisioningServer',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearProvisioningServer',{}))
    def downloadserverpublickey(self,KeyContent=None,KeyHashType=None,KeyHash=None,InputXmlFile=None):
        '''This method is called to replace the CA certificate used to authenticate the auto discovery provisioning server

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string KeyContent                       :        base64 encoded string containing the CA certificate content
    uint16 KeyHashType                      :        Not documented
    string KeyHash                          :        Not documented

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadServerPublicKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadServerPublicKey',{'KeyContent': KeyContent, 'KeyHash': KeyHash, 'KeyHashType': KeyHashType}))
    def lcwipe(self,InputXmlFile=None):
        '''This method is called to wipe all configuration from the Lifecycle controller before the system is retired

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'LCWipe',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'LCWipe',{}))
    def setpubliccertificate(self,Type=None,Certificate=None,InputXmlFile=None):
        '''This method is called to update a public SSL Certificate on the iDRAC.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Type                             :        	This parameter specifies the service the certificate is 	for.  The value directoryCA is used for the Active 	Directory or LDAP CA certificate.
    string Certificate                      :        	An input parameter that represents the certificate to 	upload.  The certificate must be in X509 format and Base64 	encoded.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPublicCertificate',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPublicCertificate',{'Type': Type, 'Certificate': Certificate}))
    def exportserverscreenshot(self,InputXmlFile=None):
        '''This method is used to export the server screen shot file(*.png) from the idrac

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    uint16 FileName                         :        Name of the server screen shot file, which is appending with the service tag of server
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportServerScreenShot',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportServerScreenShot',{}))
    def importsystemconfigurationpreview(self,Username=None,Target=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to preview before importing the system configuration to the Lifecycle Controller from a file on a remote share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string[] Target                         :        Strng which identifies the components for import
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Network share name
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSystemConfigurationPreview',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSystemConfigurationPreview',{'Username': Username, 'Target': Target, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def setcertificateandprivatekey(self,Type=None,PKCS12pin=None,PKCS12=None,InputXmlFile=None):
        '''This method is called to update iDRAC certificate and private key pairs using the contents of a PKCS#12 file.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Type                             :        This parameter specifies the service the certificate is for.  The value server is used for the iDRAC web server.
    string PKCS12pin                        :        Password to decode the PKCS12
    string PKCS12                           :        An input parameter that represents the Base64 encoded contents of PKCS#12 file to upload.  Note this is the contents of the file and not a filename.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetCertificateAndPrivateKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetCertificateAndPrivateKey',{'PKCS12pin': PKCS12pin, 'Type': Type, 'PKCS12': PKCS12}))
    def exporthwinventory(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,XMLSchema=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the Hardware Inventory to a network share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Network share name
    uint8 XMLSchema                         :        Type of XML output format
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportHWInventory',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportHWInventory',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'XMLSchema': XMLSchema, 'Password': Password, 'IPAddress': IPAddress}))
    def exportfactoryconfiguration(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the factory configuration from the Lifecycle Controller to a file on a remote share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Network share name
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportFactoryConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportFactoryConfiguration',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def runepsadiagnostics(self,UntilTime=None,RunMode=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to run diagnostics.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. If not specified, There will be no end time. 
    uint32 RunMode                          :        RunMode to run the diagnostics
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate. If not specified, it will be scheduled immediately. 
    uint32 RebootJobType                    :        RebootJobType to execute the job

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RunePSADiagnostics',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RunePSADiagnostics',{'RunMode': RunMode, 'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'RebootJobType': RebootJobType}))
    def backupimage(self,Username=None,UntilTime=None,Workgroup=None,ShareType=None,ShareName=None,CheckBackupDestinationAvailability=None,JobName=None,ScheduledStartTime=None,ImageName=None,Passphrase=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to backup the host image on a share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        The username to access the network share
    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Workgroup                        :        The workgroup name for the share
    uint16 ShareType                        :        The type for the share
    string ShareName                        :        The share name for the network share
    uint16 CheckBackupDestinationAvailability:        Check backup destination availability. Default is 0
    string JobName                          :        A name for the job. Default is Backup:Image
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    string ImageName                        :        The backup image name
    string Passphrase                       :        The passphrase for the backup image
    string Password                         :        The password to access the network share
    string IPAddress                        :        The IP address for the network share for the backup image

Output Parameters:
    CIM_ConcreteJob REF Job                 :        The concreate job output
    string MessageID                        :        The message ID for the output message
    string Message                          :        The message string for the output message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BackupImage',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BackupImage',{'Username': Username, 'UntilTime': UntilTime, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'CheckBackupDestinationAvailability': CheckBackupDestinationAvailability, 'JobName': JobName, 'ScheduledStartTime': ScheduledStartTime, 'ImageName': ImageName, 'Passphrase': Passphrase, 'Password': Password, 'IPAddress': IPAddress}))
    def getremoteservicesapistatus(self,InputXmlFile=None):
        '''

Output Parameters:
    uint8 RTStatus                          :        		The RealTime Status of the Host Server		The Status include Ready, Not Ready
    uint8 Status                            :        The overall status indicating if the provisioning tasks can be performed now or not. The statuses include Ready and Not Ready
    uint8 LCStatus                          :        The Status of the Lifecycle Controller. The statuses include Ready, Not Initialized, Reloading Data, Disabled, In Recovery, and In Use
    uint8 ServerStatus                      :        The Status of the Host Server. The statuses include Powered Off, In POST, Out Of POST, Running Collecting System Inventory, Running Automated Task Application and Running Unified Server Configurator
    string MessageID                        :        The message ID for the output message
    string Message                          :        The message string for the output message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRemoteServicesAPIStatus',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRemoteServicesAPIStatus',{}))
    def importsystemconfiguration(self,Username=None,UntilTime=None,Target=None,EndHostPowerState=None,ShareType=None,ShareName=None,ShutdownType=None,FileName=None,ScheduledStartTime=None,TimeToWait=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to import the system configuration to the Lifecycle Controller from a file on a remote share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. If not specified, There will be no end time. 
    string[] Target                         :        This parameter specifies the FQDDs of the targeted attributes. If not specified, all supported attributes will be exported. 
    uint16 EndHostPowerState                :        The desired host power state after the import operation is finished. Default value is 1 - On. 
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Network share name
    uint16 ShutdownType                     :        Type of the host shutdown type before perform the import operation. Default value is 0 - Graceful. 
    string FileName                         :        File Name
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate. If not specified, it will be scheduled immediately. 
    uint16 TimeToWait                       :        The time to wait for the host to shutdown. Default time is 60 seconds. Maximum is 3600 seconds. 
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSystemConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSystemConfiguration',{'Username': Username, 'UntilTime': UntilTime, 'Target': Target, 'EndHostPowerState': EndHostPowerState, 'ShareType': ShareType, 'ShareName': ShareName, 'ScheduledStartTime': ScheduledStartTime, 'FileName': FileName, 'ShutdownType': ShutdownType, 'TimeToWait': TimeToWait, 'Password': Password, 'IPAddress': IPAddress}))
    def exportlclog(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the Lifecycle Controller log to a network share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        netowrk share name
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLCLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportLCLog',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def systemerase(self,Component=None,InputXmlFile=None):
        '''This method is called to erase System Components as well as user data such as HDD.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] Component                      :        Array to select the component to be erased

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    CIM_ConcreteJob REF Job                 :        a reference to the Job is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SystemErase',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SystemErase',{'Component': Component}))
    def exportcertificate(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,Password=None,Type=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export Certificate to a network share.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        network share name
    string Password                         :        Password of the account to access the share
    uint16 Type                             :        The type of the certificate
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportCertificate',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportCertificate',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'Password': Password, 'Type': Type, 'IPAddress': IPAddress}))
    def testnetworkshare(self,Username=None,ShareType=None,ShareName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to test network connection

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        The username to access the network share
    uint16 ShareType                        :        The type for the share
    string ShareName                        :        The share name for the network share
    string Password                         :        The password to access the network share
    string IPAddress                        :        The IP address for the network share 

Output Parameters:
    string MessageID                        :        The message ID for the output message
    string Message                          :        The message string for the output message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'TestNetworkShare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'TestNetworkShare',{'Username': Username, 'ShareType': ShareType, 'Password': Password, 'IPAddress': IPAddress, 'ShareName': ShareName}))
    def insertcommentinlclog(self,Comment=None,InputXmlFile=None):
        '''This method is called to insert a comment in the Lifecycle controller.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Comment                          :        Comment to be inserted in the Lifecycle Controller log.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InsertCommentInLCLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InsertCommentInLCLog',{'Comment': Comment}))
    def downloadclientcerts(self,KeyContent=None,KeyHash=None,CAHash=None,HashType=None,CAContent=None,Password=None,PWHash=None,InputXmlFile=None):
        '''This method is called to generate a client certificate and private key using the provided CA certificate, CA private key and CA password

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string KeyContent                       :        base64 encoded string containing the CA private key content
    string KeyHash                          :        Not documented
    string CAHash                           :        Not documented
    uint16 HashType                         :        Not documented
    string CAContent                        :        base64 encoded string containing CA Certificate content
    string Password                         :        CA private key password
    string PWHash                           :        Not documented

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadClientCerts',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DownloadClientCerts',{'KeyContent': KeyContent, 'CAHash': CAHash, 'HashType': HashType, 'KeyHash': KeyHash, 'CAContent': CAContent, 'Password': Password, 'PWHash': PWHash}))
    def setbackupschedule(self,UserName=None,DayOfWeek=None,Domain=None,Repeat=None,ShareType=None,ShareName=None,Time=None,MaxNumberOfBackupArchives=None,ImageName=None,WeekOfMonth=None,Passphrase=None,Password=None,IPAddress=None,DayOfMonth=None,InputXmlFile=None):
        '''This method is called to setup automatic backup to a NFS/CIFS share or vFlash

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        User name for the remote share
    string DayOfWeek                        :        *, Mon, Tue, Wed, Thu, Fri, Sat, Sun
    string Domain                           :        Domain for the share
    uint16 Repeat                           :        1-366
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        Share name of the network share
    string Time                             :        hh:mm - Hour and minute of day to run
    uint16 MaxNumberOfBackupArchives        :        1-50
    string ImageName                        :        Name of the Backup file
    string WeekOfMonth                      :        *, 1-4, L
    string Passphrase                       :        Passphrase for the image
    string Password                         :        Password for the remote share
    string IPAddress                        :        IP address of the network share
    string DayOfMonth                       :        *, 1-28, L

Output Parameters:
    string MessageID                        :        Error Message ID
    string Message                          :        Error Message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBackupSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetBackupSchedule',{'UserName': UserName, 'DayOfWeek': DayOfWeek, 'Domain': Domain, 'Repeat': Repeat, 'ShareType': ShareType, 'ShareName': ShareName, 'MaxNumberOfBackupArchives': MaxNumberOfBackupArchives, 'ImageName': ImageName, 'WeekOfMonth': WeekOfMonth, 'Passphrase': Passphrase, 'Time': Time, 'Password': Password, 'IPAddress': IPAddress, 'DayOfMonth': DayOfMonth}))
    def updateosapphealthdata(self,UpdateType=None,InputXmlFile=None):
        '''This method is called to get the latest OSAppHealth data based on the input parameter UpdateType

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 UpdateType                       :        UpdateType parameter is used to choose OSAppHealthData updateeither using Automatic or Manual

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UpdateOSAppHealthData',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UpdateOSAppHealthData',{'UpdateType': UpdateType}))
    def setattributes(self,AttributeValue=None,AttributeName=None,InputXmlFile=None):
        '''This method is called to modify multiple instances of LCAttribute associated with this LCService.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified LCAttribute. If this value is valid, it will be applied to the CurrentValue or PendingValue property of the specified LCAttribute depending on the Lifecycle Controller implementation and any requirements for a system restart.
    string[] AttributeName                  :        A reference to a LCAttribute specified by AttributeName of the LCAttribute to be modified.

Output Parameters:
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttributes may result in a set to CurrentValue property or the PendingValue property. SetResult returns the result of invoking the SetAttributes method when the method return code is 0 completed with no error.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue}))
class __DCIM_NICService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_NICService is a derivation of CIM_BIOSService with extrinsic method extensions to support NIC functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'deletependingconfiguration':self.deletependingconfiguration,
            'setattribute':self.setattribute,
            'setattributes':self.setattributes,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the NICAttribute instances.
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RebootJobType': RebootJobType}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of NICAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified NICAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified NICAttribute.
    string AttributeName                    :        A reference to a NICAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of NICAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified NICAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified NICAttribute.
    string[] AttributeName                  :        A reference to a NICAttribute specified by AttributeName of the NICAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
class __DCIM_RAIDService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_RAIDService is a derivation of CIM_BIOSService with extrinsic method extensions to support RAID functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RAIDService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'importforeignconfig':self.importforeignconfig,
            'preparetoremove':self.preparetoremove,
            'setattribute':self.setattribute,
            'unblinktarget':self.unblinktarget,
            'removecontrollerkey':self.removecontrollerkey,
            'deletevirtualdisk':self.deletevirtualdisk,
            'assignspare':self.assignspare,
            'secureerase':self.secureerase,
            'lockvirtualdisk':self.lockvirtualdisk,
            'getraidlevels':self.getraidlevels,
            'getavailabledisks':self.getavailabledisks,
            'setcontrollerkey':self.setcontrollerkey,
            'initializevirtualdisk':self.initializevirtualdisk,
            'enablecontrollerencryption':self.enablecontrollerencryption,
            'startpatrolread':self.startpatrolread,
            'checkvdvalues':self.checkvdvalues,
            'clearforeignconfig':self.clearforeignconfig,
            'createvirtualdisk':self.createvirtualdisk,
            'getdhsdisks':self.getdhsdisks,
            'cancelcheckconsistency':self.cancelcheckconsistency,
            'checkconsistency':self.checkconsistency,
            'rekey':self.rekey,
            'stoppatrolread':self.stoppatrolread,
            'blinktarget':self.blinktarget,
            'converttoraid':self.converttoraid,
            'deletependingconfiguration':self.deletependingconfiguration,
            'resetconfig':self.resetconfig,
            'unassignspare':self.unassignspare,
            'converttononraid':self.converttononraid,
            'setattributes':self.setattributes,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,RealTime=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by RAID methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView
    uint16 RealTime                         :        Input Parameter represents if it is Realtime or Staged 0 - Staged1 - RealTime
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'RebootJobType': RebootJobType, 'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RealTime': RealTime}))
    def importforeignconfig(self,Target=None,InputXmlFile=None):
        '''This method is called to This feature allows users to import/recover a foreign configuration

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportForeignConfig',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportForeignConfig',{'Target': Target}))
    def preparetoremove(self,Target=None,InputXmlFile=None):
        '''This method is called to allow users to safely remove a SSD from the system

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the SSD

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PrepareToRemove',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PrepareToRemove',{'Target': Target}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of RAIDAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified RAIDAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified RAIDAttribute.
    string AttributeName                    :        A reference to a RAIDAttribute specified by AttributeName 
    string Target                           :        This parameter is the FQDD of the RAIDAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def unblinktarget(self,Target=None,InputXmlFile=None):
        '''This method is called to allow users to stop blinking on the Target device .Target Device can be physical disk or SSD or Virtual disk depends on FQDD

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Physical Disk, SSD and Virtual Disk

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnBlinkTarget',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnBlinkTarget',{'Target': Target}))
    def removecontrollerkey(self,Target=None,InputXmlFile=None):
        '''The Remove ControllerKey method erases the encryption key on controller. All encrypted drives are also erased on this operation

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RemoveControllerKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RemoveControllerKey',{'Target': Target}))
    def deletevirtualdisk(self,Target=None,InputXmlFile=None):
        '''This method is used to delete a single virtual disk from the targeted controller. The successful execution of this method results in the marking of this virtual disk for deletion. The ObjectStatus property in the VirtualDiskView will have the property PendingDelete.The VD is not deleted until a configjob is scheduled and the system rebooted

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        FQDD of target device(virtual disk)

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteVirtualDisk',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteVirtualDisk',{'Target': Target}))
    def assignspare(self,VirtualDiskArray=None,Target=None,InputXmlFile=None):
        '''This method is used to assign a physical disk as a dedicated hot spare for a virtual disk or as a global hot spare

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] VirtualDiskArray               :        Array of ElementName(s) where each identifies a different VD Currently only one Vd can be passed 
    string Target                           :        This Parameter is the FQDD of the target device (physical disk).

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignSpare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignSpare',{'VirtualDiskArray': VirtualDiskArray, 'Target': Target}))
    def secureerase(self,Target=None,InputXmlFile=None):
        '''This method is called to allow users to do cryptographic erase of data on the PCIeSSD

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the SSD

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SecureErase',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SecureErase',{'Target': Target}))
    def lockvirtualdisk(self,Target=None,InputXmlFile=None):
        '''This method encrypts the virtual disk

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        FQDD of target device (Virtual Disk)

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'LockVirtualDisk',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'LockVirtualDisk',{'Target': Target}))
    def getraidlevels(self,Target=None,T10PIStatus=None,DiskType=None,Diskprotocol=None,PDArray=None,BlockSizeInBytes=None,DiskEncrypt=None,InputXmlFile=None):
        '''This method is used to determine possible choices of RAID levels to create virtual disks If the list of physical disks is not provided this method will operate on all connected disks

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the target device (Controller).
    uint32 T10PIStatus                      :        0- Include T10PI capable and non T10PI capable disks1- Include T10PI disks only2- Include only non T10PI disks
    uint32 DiskType                         :        Corresponds to MediaType in PDView0-Include all types, 1-Include HDD Only, 2 - Include SSD only
    uint32 Diskprotocol                     :        0-Include all protocols, 1-Include SATA, 2 - Include SAS
    string[] PDArray                        :        Array of FQDD(s) identifies physical disk(s)
    uint32 BlockSizeInBytes                 :        0- Include all block size disks512- Include 512 bytes block size disks only4096- Include 4096 bytes block size disks
    uint32 DiskEncrypt                      :        0- Include FDE capable and non encryption capable disks1- Include FDE disks only2- Include only non FDE disks

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string[] VDRAIDEnumArray                :        Indexed array of VirtualDisk RAID level enum values
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRAIDLevels',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRAIDLevels',{'DiskEncrypt': DiskEncrypt, 'Target': Target, 'DiskType': DiskType, 'Diskprotocol': Diskprotocol, 'PDArray': PDArray, 'BlockSizeInBytes': BlockSizeInBytes, 'T10PIStatus': T10PIStatus}))
    def getavailabledisks(self,Target=None,RaidLevel=None,DiskType=None,Diskprotocol=None,T10PIStatus=None,BlockSizeInBytes=None,DiskEncrypt=None,InputXmlFile=None):
        '''This method is used to determine possible choices of drives to create virtual disks

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the target device (Controller).
    uint32 RaidLevel                        :        Corresponds to RAID Types in VD View - 0/1/5/10/50/6/60
    uint32 DiskType                         :        Corresponds to MediaType in PDView0-Include all types, 1-Include HDD Only, 2 - Include SSD only
    uint32 Diskprotocol                     :        0-Include all protocols, 1-Include SATA, 2 - Include SAS
    uint32 T10PIStatus                      :        0- Include T10PI capable and non T10PI capable disks1- Include T10PI disks only2- Include only non T10PI disks
    uint32 BlockSizeInBytes                 :        0- Include all block size disks512- Include 512 bytes block size disks only4096- Include 4096 bytes block size disks
    uint32 DiskEncrypt                      :        0- Include FDE capable and non encryption capable disks1- Include FDE disks only2- Include only non FDE disks

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string[] PDArray                        :        Array of FQDD(s) identifies physical disk(s)
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAvailableDisks',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAvailableDisks',{'DiskEncrypt': DiskEncrypt, 'Target': Target, 'RaidLevel': RaidLevel, 'DiskType': DiskType, 'Diskprotocol': Diskprotocol, 'BlockSizeInBytes': BlockSizeInBytes, 'T10PIStatus': T10PIStatus}))
    def setcontrollerkey(self,Keyid=None,Target=None,Key=None,InputXmlFile=None):
        '''This method sets the key on controllers that support encryption of drives

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Keyid                            :        Key identifier - Describes Key. The Keyid can be maximum 32 characters long and should not have spaces in it.
    string Target                           :        FQDD of target device (controller)
    string Key                              :        The Key can be maximum 32 characters long, and  should have one character from each of the following set.  1  Upper Case  2   Lower Case  3   Number      4   Special Character  The special characters in the following set need to be passed  as mentioned below. 

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetControllerKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetControllerKey',{'Keyid': Keyid, 'Target': Target, 'Key': Key}))
    def initializevirtualdisk(self,InitType=None,VirtualDisk=None,InputXmlFile=None):
        '''This method is called to initialize a Virtual Disk.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 InitType                         :        This Parameter is the type of the initialization.0 - fast
    string VirtualDisk                      :        This Parameter is the FQDD of the Virtual Disk.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InitializeVirtualDisk',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InitializeVirtualDisk',{'VirtualDisk': VirtualDisk, 'InitType': InitType}))
    def enablecontrollerencryption(self,Keyid=None,Target=None,Mode=None,Key=None,InputXmlFile=None):
        '''This method sets the key on controllers that support encryption of drives

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Keyid                            :        Key identifier - Describes Key. The Keyid can be maximum 32 characters long and should not have spaces in it.
    string Target                           :        FQDD of target device (controller)
    uint16 Mode                             :        Mode can be either LKM or DKM
    string Key                              :        The Key can be maximum 32 characters long, and  should have one character from each of the following set.  1  Upper Case  2   Lower Case  3   Number      4   Special Character.  The special characters in the following set need to be passed  as mentioned below. 

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'EnableControllerEncryption',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'EnableControllerEncryption',{'Keyid': Keyid, 'Target': Target, 'Key': Key, 'Mode': Mode}))
    def startpatrolread(self,Target=None,InputXmlFile=None):
        '''This method is called to Start the Patrol Read Operation Manually

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Raid Controller Device

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StartPatrolRead',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StartPatrolRead',{'Target': Target}))
    def checkvdvalues(self,VDPropNameArrayIn=None,Target=None,VDPropValueArrayIn=None,PDArray=None,InputXmlFile=None):
        '''This method is used to determine possible sizes of. virtual disks as well as default settings, given a given a RAID level and a set of disks. The VDPropArray is filled with size and other values on successful execution

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] VDPropNameArrayIn              :        This Parameter is the list of Property Names with values in the VDPropValueArray parameter one of the following values Size            uint64  RAIDLevel       uint32  SpanDepth       uint32  SpanLength      uint32  StartingLBA     uint64 		 T10PIStatus     uint32 
    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.
    string[] VDPropValueArrayIn             :        This Parameter is the list of Property Values that map to the vdpropnamearray parameter The Values for the properties can be as follows. Size        The Value is in MB. optional RAIDLevel   Refer Values in DCIM_VirtualDiskView MOF.required SpanDepth   The value is optional SpanLength  The Value is optional StartingLBA The value is optional T10PIStatus The value is optional 
    string[] PDArray                        :        Array of FQDD(s) identifies physical disk(s)

Output Parameters:
    string[] VDPropValueArray               :        Indexed array of Virtual Disk property values relative to VDPropValueName parameter.
    string[] VDPropNameArray                :        Indexed array of Virtual Disk property names with relative values contained in VDPropValueArray parameter
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckVDValues',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckVDValues',{'VDPropValueArrayIn': VDPropValueArrayIn, 'VDPropNameArrayIn': VDPropNameArrayIn, 'PDArray': PDArray, 'Target': Target}))
    def clearforeignconfig(self,Target=None,InputXmlFile=None):
        '''This method is used to prepare any foreign physical disks for inclusion in the local configuration

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearForeignConfig',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearForeignConfig',{'Target': Target}))
    def createvirtualdisk(self,Target=None,VDPropValueArray=None,VDPropNameArray=None,PDArray=None,InputXmlFile=None):
        '''This method is called to create a new Virtual Disk.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.
    string[] VDPropValueArray               :        This Parameter is the list of Property Values that will be used to create a virtual Disk. The property values are for the property names in the corresponding location The Values for the properties can be as follows. Size             The Value is in MB. optional StartingLBA      The Value is in BlocksRAIDLevel        Refer Values in DCIM_VirtualDiskView MOF. required SpanDepth        optional SpanLength       Number of Physicals Disks  SpanDepth. If the                  SpanDepth is not set then the SpanLength is Number                  of Physicals Disks .required StripeSize       Refer Values in DCIM_VirtualDiskView MOF. optionalReadPolicy       Refer Values in DCIM_VirtualDiskView MOF. optional WritePolicy      Refer Values in DCIM_VirtualDiskView MOF. optional DiskCachePolicy  Refer Values in DCIM_VirtualDiskView MOF. optional 	T10PIStatus      Refer Values in DCIM_VirtualDiskView MOF. optional Cachecade        Refer Values in DCIM_VirtualDiskView MOF. optional VirtualDiskName  optional Initialize       FAST  set to 0 optional
    string[] VDPropNameArray                :        This Parameter is the list of Property Names that will be used to create a virtual Disk.  The parameter list one of the following valuesSize            uint64 StartingLBA     uint64 RAIDLevel       uint32 SpanDepth       uint32 SpanLength      uint32 StripeSize      uint32 ReadPolicy      uint32 WritePolicy     uint32 DiskCachePolicy uint32 	T10PIStatus     uint32 Cachecade       uint32 VirtualDiskName string of 16 characters Initialize      uint32
    string[] PDArray                        :        This Parameter is the list of Physical Disk FQDDs that will be used to create a virtual Disk 

Output Parameters:
    DCIM_VirtualDiskView REF NewVirtualDisk :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string RebootRequired                   :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateVirtualDisk',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateVirtualDisk',{'VDPropNameArray': VDPropNameArray, 'PDArray': PDArray, 'Target': Target, 'VDPropValueArray': VDPropValueArray}))
    def getdhsdisks(self,Target=None,InputXmlFile=None):
        '''This method is used to determine possible choices of drives to be a dedicated hotspare for the identified virtual disk

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the target device (virtual disk).

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string[] PDArray                        :        Array of FQDD(s) identifies physical disk(s)
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetDHSDisks',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetDHSDisks',{'Target': Target}))
    def cancelcheckconsistency(self,Target=None,InputXmlFile=None):
        '''This method is called to allows user to Cancel Check Consistency operation that is in progress

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Target device

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CancelCheckConsistency',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CancelCheckConsistency',{'Target': Target}))
    def checkconsistency(self,Target=None,InputXmlFile=None):
        '''This method is called to allows users to check/verify the accuracy of the redundancy or parity information for VDs which are redundant

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Target device

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckConsistency',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CheckConsistency',{'Target': Target}))
    def rekey(self,NewKey=None,OldKey=None,Keyid=None,Target=None,Mode=None,InputXmlFile=None):
        '''This method sets the key on controllers that support encryption of drives

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string NewKey                           :        The Key can be maximum 32 characters long, and  should have one character from each of the following set.  1  Upper Case  2   Lower Case  3   Number      4   Special Character  The special characters in the following set need to be passed  as mentioned below. 
    string OldKey                           :        Old Controller Key
    string Keyid                            :        Key identifier - Describes Key. The Keyid can be maximum 32 characters long and should not have spaces in it.
    string Target                           :        FQDD of target device (controller)
    uint16 Mode                             :        Mode can be either LKM or DKM

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReKey',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ReKey',{'NewKey': NewKey, 'OldKey': OldKey, 'Keyid': Keyid, 'Target': Target, 'Mode': Mode}))
    def stoppatrolread(self,Target=None,InputXmlFile=None):
        '''This method is called to Stop the Patrol Read Operation Manually

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Raid Controller Device

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StopPatrolRead',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'StopPatrolRead',{'Target': Target}))
    def blinktarget(self,Target=None,InputXmlFile=None):
        '''This method is called to allow users to find the disks associated with a Physical disk within an enclosure by blinking one of the LEDs on each disk

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the Physical Disk,SSD or Virtual Disk

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BlinkTarget',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'BlinkTarget',{'Target': Target}))
    def converttoraid(self,PDArray=None,InputXmlFile=None):
        '''This method is called to convert PhysicalDisks in Non-RAID state to a state usable for RAID

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] PDArray                        :        This parameter takes a list of Physical Disks FQDDs

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConvertToRAID',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConvertToRAID',{'PDArray': PDArray}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def resetconfig(self,Target=None,InputXmlFile=None):
        '''This method is called to reset the controller configuration.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the DCIM_ControllerView.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot see the changes
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ResetConfig',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ResetConfig',{'Target': Target}))
    def unassignspare(self,Target=None,InputXmlFile=None):
        '''This method is used to unassign a physical disk as a dedicated hot spare for a virtual disk or as a global hot spare

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the target device (physical disk).

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string RebootRequired                   :        RebootRequired specifies if you need to reboot to set the values
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnassignSpare',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'UnassignSpare',{'Target': Target}))
    def converttononraid(self,PDArray=None,InputXmlFile=None):
        '''This method is called to convert PhysicalDisks in a RAID state of Ready to Non-RAID state

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] PDArray                        :        This parameter takes a list of Physical Disks FQDDs

Output Parameters:
    string[] Message                        :        List of error Message in english corresponding to the MessageID
    uint8 RebootRequired                    :        RebootRequired specifies if you need to reboot see the changes
    string[] MessageID                      :        List of error MessageIDs is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConvertToNonRAID',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ConvertToNonRAID',{'PDArray': PDArray}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of RAIDAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified RAIDAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified RAIDAttribute.
    string[] AttributeName                  :        A reference to a RAIDAttribute specified by AttributeName 
    string Target                           :        This parameter is the FQDD of the RAIDAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
class __DCIM_SystemManagementService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_SystemManagementService is a derivation of CIM_BIOSService with extrinsic method extensions to support System functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemManagementService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'setattribute':self.setattribute,
            'showerrorsonlcd':self.showerrorsonlcd,
            'deletependingconfiguration':self.deletependingconfiguration,
            'identifychassis':self.identifychassis,
            'setattributes':self.setattributes,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the SystemAttribute instances.
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RebootJobType': RebootJobType}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of SystemAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified SystemAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified SystemAttribute.
    string AttributeName                    :        A reference to a SystemAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the SystemAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def showerrorsonlcd(self,Show=None,InputXmlFile=None):
        '''This method is called to hide and unhide LCD Errors

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    boolean Show                            :        Input Parameter represents whether to Hide or unhide LCD Error 0 - False 1- True 

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowErrorsOnLCD',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowErrorsOnLCD',{'Show': Show}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the SystemAttribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def identifychassis(self,DurationLimit=None,IdentifyState=None,InputXmlFile=None):
        '''This method is used to turn on and off LEDs on the chassis in order to identify it.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint8 DurationLimit                     :        This parameter represents the requested time limit in seconds for identifying chassis before the identifying LED turns back off. The parameter shall be specified and non-NULL, if the IdentifyState parameter has value 2 - Time Limited Enabled.
    uint8 IdentifyState                     :        This parameter represents the requested state of the identifying LED.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'IdentifyChassis',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'IdentifyChassis',{'DurationLimit': DurationLimit, 'IdentifyState': IdentifyState}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of SystemAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified SystemAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified SystemAttribute.
    string[] AttributeName                  :        A reference to a SystemAttribute specified by AttributeName of the SystemAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the SystemAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
class __DCIM_iDRACCardService__(__BaseClass__, __CIM_BIOSService__):
    '''DCIM_iDRACCardService is a derivation of CIM_BIOSService with extrinsic method extensions to support NIC functionality )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardService'
        self.__parent__ = 'CIM_BIOSService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createtargetedconfigjob':self.createtargetedconfigjob,
            'exportsslcertificate':self.exportsslcertificate,
            'sendtestemailalert':self.sendtestemailalert,
            'sslresetcfg':self.sslresetcfg,
            'exportfiledata':self.exportfiledata,
            'deletesslcertificate':self.deletesslcertificate,
            'applyattributes':self.applyattributes,
            'setattribute':self.setattribute,
            'generatesslcsr':self.generatesslcsr,
            'importfiledata':self.importfiledata,
            'deletependingconfiguration':self.deletependingconfiguration,
            'importsslcertificate':self.importsslcertificate,
            'idracresetcfg':self.idracresetcfg,
            'idracreset':self.idracreset,
            'setattributes':self.setattributes,
            'sendtestsnmptrap':self.sendtestsnmptrap,
            }
    def createtargetedconfigjob(self,UntilTime=None,Target=None,ScheduledStartTime=None,RebootJobType=None,InputXmlFile=None):
        '''This method is called to apply the pending values created by the SetAttribute and SetAttributes methods

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UntilTime                        :        Scheduled end time for job execution in datetime format:yyyymmddhhmmss. If StartTimeInterval is specified, UntilTime has to be specified and vice versa. 
    string Target                           :        This Parameter is the FQDD of the NICAttribute instances.
    string ScheduledStartTime               :        Start Time of job in datetime format:yyyymmddhhmmss. The string TIME_NOW means immediate.
    uint16 RebootJobType                    :        Input Parameter represents the type of Reboot 1 - PowerCycle 2 - Graceful Reboot without forced shutdown 3 - Graceful Reboot with forced shutdown. 

Output Parameters:
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateTargetedConfigJob',{'UntilTime': UntilTime, 'ScheduledStartTime': ScheduledStartTime, 'Target': Target, 'RebootJobType': RebootJobType}))
    def exportsslcertificate(self,SSLCertType=None,InputXmlFile=None):
        '''This method is used to export the certificate from the idrac based on input parameter Type.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 SSLCertType                      :        Type of the certificate to be imported.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageArgs                    :        Substitution variables for dynamic error messages.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportSSLCertificate',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportSSLCertificate',{'SSLCertType': SSLCertType}))
    def sendtestemailalert(self,InstanceID=None,InputXmlFile=None):
        '''This method is called to send a test snmp alert

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string InstanceID                       :        This parameter is the FQDD of the attribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SendTestEmailAlert',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SendTestEmailAlert',{'InstanceID': InstanceID}))
    def sslresetcfg(self,InputXmlFile=None):
        '''This method is used to restores the web-server certificate to factory defaults.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SSLResetCfg',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SSLResetCfg',{}))
    def exportfiledata(self,FileType=None,InSessionID=None,InChunkSize=None,ExportFileName=None,InputXmlFile=None):
        '''no desc

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 FileType                         :        Export file type
    string InSessionID                      :        Session ID
    uint32 InChunkSize                      :        Size of Data Chunk
    string ExportFileName                   :        A base64 encoded certificate file.

Output Parameters:
    uint32 ChunkSize                        :        Size of Data Chunk
    uint16 CRC                              :        CRC of Chunk Data
    string SessionID                        :        Acknowlegement of Data, returned the SessionID.
    uint32 FileSize                         :        Size of Export file
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    uint16 TxfrDescriptor                   :        Transfer descriptor value
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string PayLoad                          :        Chunk of exported file data
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportFileData',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportFileData',{'FileType': FileType, 'ExportFileName': ExportFileName, 'InChunkSize': InChunkSize, 'InSessionID': InSessionID}))
    def deletesslcertificate(self,CertificateType=None,InputXmlFile=None):
        '''This method is used to delete ssl certificate from the idrac based on input parameter Type.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 CertificateType                  :        Type of the certificate to be imported.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteSSLCertificate',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeleteSSLCertificate',{'CertificateType': CertificateType}))
    def applyattributes(self,AttributeName=None,AttributeValue=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of NICAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeName                  :        A reference to a iDRACCardAttribute specified by AttributeName of the iDRACCardAttribute to be modified.
    string[] AttributeValue                 :        A new value to assign to the specified DRACNWAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified NICAttribute.
    string Target                           :        This parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string[] Message                        :        Error Message in english corresponding to the MessageID
    CIM_ConcreteJob REF Job                 :        A reference to the ConcreteJob is returned
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ApplyAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ApplyAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def setattribute(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instance of DRACAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified DRACNWAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified DRACNWAttribute.
    string AttributeName                    :        A reference to a DRACAttribute specified by AttributeName of the BIOSAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string RebootRequired                   :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
    string SetResult                        :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttribute',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def generatesslcsr(self,InputXmlFile=None):
        '''This method is called to generate sslcsr certificate and saves into the /tmp folder.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string[] MessageArguments               :        Any dynamic string substitutions for the Message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GenerateSSLCSR',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GenerateSSLCSR',{}))
    def importfiledata(self,ChunkSize=None,FileType=None,ImportFileName=None,InSessionID=None,CRC=None,ImportData=None,TxfrDescriptor=None,FileSize=None,InputXmlFile=None):
        '''This method is used to update the large data into the internal storage area.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint32 ChunkSize                        :        Chunk size
    uint16 FileType                         :        Import file type
    string ImportFileName                   :        Name of Import File
    string InSessionID                      :        Session ID
    uint16 CRC                              :        CRC of chunk data
    string ImportData                       :        A base64 encoded certificate file.
    uint16 TxfrDescriptor                   :        Transfer descriptor
    uint32 FileSize                         :        Size of Import file

Output Parameters:
    string SessionID                        :        Acknowlegement of Data, returned the SessionID.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportFileData',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportFileData',{'ChunkSize': ChunkSize, 'FileType': FileType, 'ImportFileName': ImportFileName, 'InSessionID': InSessionID, 'CRC': CRC, 'ImportData': ImportData, 'TxfrDescriptor': TxfrDescriptor, 'FileSize': FileSize}))
    def deletependingconfiguration(self,Target=None,InputXmlFile=None):
        '''This method is called to cancel the pending values created by the SetAttribute and SetAttributes methods.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Target                           :        This Parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'DeletePendingConfiguration',{'Target': Target}))
    def importsslcertificate(self,SSLCertificateFile=None,CertificateType=None,Passphrase=None,InputXmlFile=None):
        '''This method is used to import the certificate to the idrac based on input parameter Type.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string SSLCertificateFile               :        A base64 encoded certificate file.
    uint16 CertificateType                  :        Type of the certificate to be imported.
    string Passphrase                       :        A passphrase for certificate file.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSSLCertificate',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ImportSSLCertificate',{'CertificateType': CertificateType, 'Passphrase': Passphrase, 'SSLCertificateFile': SSLCertificateFile}))
    def idracresetcfg(self,Force=None,InputXmlFile=None):
        '''This method is used to reset the idrac to the factory default configurations

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 Force                            :        This option is used to reset the iDRAC to factory defaults by force or gracefully

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'iDRACResetCfg',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'iDRACResetCfg',{'Force': Force}))
    def idracreset(self,Force=None,InputXmlFile=None):
        '''This method is used to reset the idrac

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 Force                            :        This option is used to reset the iDRAC by force or gracefully

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'iDRACReset',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'iDRACReset',{'Force': Force}))
    def setattributes(self,AttributeValue=None,AttributeName=None,Target=None,InputXmlFile=None):
        '''This method is called to modify instances of iDRACCardAttribute.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] AttributeValue                 :        A new value to assign to the specified DRACNWAttribute. If this value is valid, it will be applied to the PendingValue property or the Currentvalue property of the specified NICAttribute.
    string[] AttributeName                  :        A reference to a DRACNWAttribute specified by AttributeName of the DRACNWAttribute to be modified.
    string Target                           :        This parameter is the FQDD of the NICAttribute instances.

Output Parameters:
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
    string[] RebootRequired                 :        Invoking the SetAttribute may require a reboot for the set to be effective. Value Yes means a reboot is required. Value No means a reboot is not required
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] SetResult                      :        Invoking the SetAttribute may result in a set to CurrentValue property or the PendingValue property. SetResult returns Set CurrentValue property if CurrentValue is set or Set PendingValue property if PendingValue is set.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetAttributes',{'AttributeName': AttributeName, 'AttributeValue': AttributeValue, 'Target': Target}))
    def sendtestsnmptrap(self,InstanceID=None,InputXmlFile=None):
        '''This method is called to send a test snmp alert

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string InstanceID                       :        This parameter is the FQDD of the attribute instances.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SendTestSNMPTrap',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SendTestSNMPTrap',{'InstanceID': InstanceID}))
class __DCIM_MetricService__(__BaseClass__, __CIM_MetricService__):
    '''DCIM_MetricService is a derivation of CIM_MetricService and provides the ability to manage metrics. The capabilities of the DCIM_MetricService instance are advertised through an instance of DCIM_MetricServiceCapabilities. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_MetricService'
        self.__parent__ = 'CIM_MetricService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'getavgpowerconsumptionbyinterval':self.getavgpowerconsumptionbyinterval,
            'exportthermalhistory':self.exportthermalhistory,
            'controlmetrics':self.controlmetrics,
            'peakreset':self.peakreset,
            }
    def getavgpowerconsumptionbyinterval(self,Interval=None,Device=None,InputXmlFile=None):
        '''GetAvgPowerConsumptionByInterval.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    dateTime Interval                       :        Interval ranges from 30 seconds to 15 minutes
    uint16 Device                           :        Enumerated value containing the following devices:   -   System   -   CPU (Not supported in 12G)   -   Memory (Not supported in 12G)

Output Parameters:
    uint32 Min                              :        Minimum power consumed in the specified averaging interval.
    uint32 Max                              :        Maximum power consumed in the specified averaging interval.
    uint32 Average                          :        Average power consumed in the specified averaging interval.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAvgPowerConsumptionByInterval',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAvgPowerConsumptionByInterval',{'Device': Device, 'Interval': Interval}))
    def exportthermalhistory(self,Username=None,Workgroup=None,ShareType=None,ShareName=None,FileType=None,FileName=None,Password=None,IPAddress=None,InputXmlFile=None):
        '''This method is called to export the stored temperature data to a network share

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string Username                         :        Username of the account to access the share
    string Workgroup                        :        Workgroup of the account to access the share
    uint16 ShareType                        :        Type of the share
    string ShareName                        :        netowrk share name
    uint16 FileType                         :        Type of file
    string FileName                         :        File Name
    string Password                         :        Password of the account to access the share
    string IPAddress                        :        IP address of the network share

Output Parameters:
    CIM_ConcreteJob REF Job                 :        a reference to the ConcreteJob is returned
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportThermalHistory',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ExportThermalHistory',{'Username': Username, 'Workgroup': Workgroup, 'ShareType': ShareType, 'ShareName': ShareName, 'FileType': FileType, 'FileName': FileName, 'Password': Password, 'IPAddress': IPAddress}))
    def controlmetrics(self,Definition=None,MetricCollectionEnabled=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BaseMetricDefinition REF Definition :        The Definition parameter identifies a CIM_BaseMetricDefinition for which metrics will be controlled.
    uint16 MetricCollectionEnabled          :        The MetricCollectionEnabled parameter indicates  desired operation to perform on the metrics.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetrics',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ControlMetrics',{'Definition': Definition, 'MetricCollectionEnabled': MetricCollectionEnabled}))
    def peakreset(self,UsageType=None,InputXmlFile=None):
        '''PeakReset.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UsageType                        :        The UsageType parameter indicates type (CPU,IO,MEMORY,SYS) of statistics whose peak value to reset.

Output Parameters:
    string[] Message                        :        Error message in English corresponding to MessageID isreturned if the method fails to execute.
    string[] MessageID                      :        Error Message ID returned if method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PeakReset',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PeakReset',{'UsageType': UsageType}))
class __DCIM_CSPowerManagementService__(__BaseClass__, __CIM_PowerManagementService__):
    '''A class derived from Service that describes power management functionality, hosted on a System. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSPowerManagementService'
        self.__parent__ = 'CIM_PowerManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requestpowerstatechange':self.requestpowerstatechange,
            }
    def requestpowerstatechange(self,TimeoutPeriod=None,PowerState=None,ManagedElement=None,Job=None,Time=None,InputXmlFile=None):
        '''SetPowerState defines the desired power state of the managed element and when the element should be put into that state.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    datetime TimeoutPeriod                  :        A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of Use Of Timeout Parameter Not Supported must be returned.
    uint16 PowerState                       :        The power state for ManagedElement.
    CIM_ManagedElement REF ManagedElement   :        ManagedElement indicates the element whose state is set.
    CIM_ConcreteJob REF Job                 :        Reference to the job (can be null if the task is completed).
    datetime Time                           :        Time indicates when the power state should be set, either as a regular date-time value or as an interval value (where the interval begins when the method invocation is received.

Output Parameters:
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
    string Message                          :        Error Message in english corresponding to the MessageID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestPowerStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestPowerStateChange',{'Job': Job, 'TimeoutPeriod': TimeoutPeriod, 'PowerState': PowerState, 'Time': Time, 'ManagedElement': ManagedElement}))
class __CIM_AccountManagementService__(__BaseClass__, __CIM_SecurityService__):
    '''CIM_AccountManagementService creates, manages, and if necessary destroys Accounts on behalf of other SecuritySerices. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AccountManagementService'
        self.__parent__ = 'CIM_SecurityService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'createusercontact':self.createusercontact,
            'getaccounts':self.getaccounts,
            'createaccount':self.createaccount,
            'createusercontactbyidentity':self.createusercontactbyidentity,
            'getusercontacts':self.getusercontacts,
            }
    def createusercontact(self,UserContact=None,InputXmlFile=None):
        '''CreateUserContact creates a UserContact for the specified system. Upon successful completion of the method, there shall be a newly created instance of CIM_UserContact associated to an instance of CIM_Identity through CIM_AssignedIdentity. A CIM_Identity instance may be created by the method or may be one that already existed that represented this user.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_UserContact REF UserContact         :        Reference to the instance of CIM_UserContact created when the method returns a value of 0

Output Parameters:
    string UserContactTemplate              :        UserContactTemplate is a template for the desired UserContact to be created
    CIM_ComputerSystem REF System           :        The scoping ComputerSystem in which to create the Account.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateUserContact',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateUserContact',{'UserContact': UserContact}))
    def getaccounts(self,InputXmlFile=None):
        '''GetAccounts will retrieve the CIM_Account reference that match the supplied UserID.

Output Parameters:
    string UserID                           :        The UserID for the CIM_Account instances to be retrieved.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAccounts',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetAccounts',{}))
    def createaccount(self,Account=None,InputXmlFile=None):
        '''CreateAccount creates an Account on the specified ComputerSystem. Upon successful completion of the method, there shall be a newly created instance of CIM_Account associated through the CIM_AccountOnSystem association with the instance of ComputerSystem identified by the System parameter such that each property of the CIM_Account instance has the value of the corresponding property of the template instance specified by the AccountTemplate parameter and the CIM_Account instance is associated with this instance of CIM_AccountManagementService through the CIM_ServiceAffectsElement association.\n Instances of CIM_Identity may be created by the method and associated with the instance of CIM_Account through CIM_AssignedIdentity. If one or more instances of CIM_Identity are created, a reference to each shall be returned in the Identities parameter, otherwise the Identities parameter shall be NULL upon method completion.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_Account REF Account                 :        Reference to the instance of CIM_Account created when the method returns a value of 0.

Output Parameters:
    string AccountTemplate                  :        AccountTemplate is a template for the desired Account to be created.
    CIM_ComputerSystem REF System           :        The scoping ComputerSystem in which to create the Account.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateAccount',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateAccount',{'Account': Account}))
    def createusercontactbyidentity(self,InputXmlFile=None):
        '''CreateUserContactByIdentity creates a UserContact for the specificed system using the specified Identity. Upon successful completion of the method, there shall be a newly created instance of CIM_UserContact associated to the instance of CIM_Identity specified through CIM_AssignedIdentity.

Output Parameters:
    string UserContactTemplate              :        UserContactTemplate is a template for the desired UserContact to be created.
    CIM_ComputerSystem REF System           :        The scoping ComputerSystem in which to create the Account.
    CIM_Identity REF Identity               :        A Reference to a existing CIM_Identity instance to be associated to the newly created CIM_UserContact instance.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateUserContactByIdentity',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateUserContactByIdentity',{}))
    def getusercontacts(self,InputXmlFile=None):
        '''GetUserContacts will retrieve the CIM_UserContact references that match the supplied UserID.

Output Parameters:
    string UserID                           :        The UserID for the CIM_UserContact instances to be retrieved.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetUserContacts',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetUserContacts',{}))
class __CIM_AuthorizationService__(__BaseClass__, __CIM_SecurityService__):
    '''CIM_AuthorizationService determines whether an Identity, established by an AuthorizationService, is permitted access to a resource or set of resources. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AuthorizationService'
        self.__parent__ = 'CIM_SecurityService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_AccountManagementService__(__BaseClass__, __CIM_AccountManagementService__):
    '''DCIM_AccountManagementService is a derivation of CIM_AccountManagementService. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_AccountManagementService'
        self.__parent__ = 'CIM_AccountManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPAccountManagementService__(__BaseClass__, __DCIM_AccountManagementService__):
    '''DCIM_CLPAccountManagementService is a derivation of DCIM_AccountManagementService. DCIM_AccountManagementService is a derivation of CIM_AccountManagementService. CIM_AccountManagementService creates, manages, and if necessary destroys Accounts on behalf of other SecuritySerices. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPAccountManagementService'
        self.__parent__ = 'DCIM_AccountManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIAccountManagementService__(__BaseClass__, __DCIM_AccountManagementService__):
    '''DCIM_IPMIAccountManagementService is a derivation of DCIM_AccountManagementService. DCIM_AccountManagementService is a derivation of CIM_AccountManagementService. CIM_AccountManagementService creates, manages, and if necessary destroys Accounts on behalf of other SecuritySerices.. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIAccountManagementService'
        self.__parent__ = 'DCIM_AccountManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalUserAccountManagementService__(__BaseClass__, __DCIM_AccountManagementService__):
    '''DCIM_LocalUserAccountManagementService is a derivation of DCIM_AccountManagementService. )

Class Properties:
    uint16 CurrentAuthenticationMethod[]    :    An array representing the current authentication method.The property shall contain only values from the SupportedAuthenticationMethod property array of the associated instance of Dell_OEMMFAManaagementCapabilities
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalUserAccountManagementService'
        self.__parent__ = 'DCIM_AccountManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PrivilegeManagementService__(__BaseClass__, __CIM_AuthorizationService__):
    '''The PrivilegeManagementService is responsible for creating, deleting, and associating AuthorizedPrivilege instances. References to subject and target define the entities that are associated with an AuthorizedPrivilege instance via the relationships, AuthorizedSubject and AuthorizedTarget, respectively. When created, an AuthorizedPrivilege instance is related to this (PrivilegeManagement)Service via the association, ConcreteDependency. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PrivilegeManagementService'
        self.__parent__ = 'CIM_AuthorizationService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'assignaccess':self.assignaccess,
            'removeaccess':self.removeaccess,
            'showaccess':self.showaccess,
            }
    def assignaccess(self,Activities=None,Target=None,ActivityQualifiers=None,QualifierFormats=None,PrivilegeGranted=None,Subject=None,InputXmlFile=None):
        '''When this method is called, a provider updates the specified Subject s rights to the Target according to the parameters of this call. The rights are modeled via an AuthorizedPrivilege instance. If an AuthorizedPrivilege instance is created as a result of this call, it MUST be linked to the Subject and Target via the AuthorizedSubject and AuthorizedTarget associations, respectively. When created, the AuthorizedPrivilege instance is associated to this PrivilegeManagementService via ConcreteDependency. If the execution of this call results in no rights between the Subject and Target, then they MUST NOT be linked to a particular AuthorizedPrivilege instance via AuthorizedSubject and AuthorizedTarget respectively. \n \n Note that regardless of whether specified via parameter, or template, the Activities, ActivityQualifiers and QualifierFormats, are mutually indexed. Also note that Subject and Target references MUST be supplied. \n \n The successful completion of the method SHALL create any necessary AuthorizedSubject, AuthorizedTarget, AuthorizedPrivilege, HostedDependency, and ConcreteDependency instances.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16[] Activities                     :        MUST be NULL unless the Privilege is NULL on input. This parameter specifies the activities to be granted or denied.
    CIM_ManagedElement REF Target           :        The Target parameter is a reference to an instance of ManagedElement. This parameter MUST be supplied.
    string[] ActivityQualifiers             :        MUST be NULL unless Privilege is NULL on input. This parameter defines the activity qualifiers for the Activities to be granted or denied.
    uint16[] QualifierFormats               :        MUST be NULL unless Privilege is NULL on input. This parameter defines the qualifier formats for the corresponding ActivityQualifiers.
    boolean PrivilegeGranted                :        MUST be NULL unless Privilege is NULL on input. The PrivilegeGranted flag indicates whether the rights defined by the parameters in this call should be granted or denied to the named Subject/Target pair.
    CIM_ManagedElement REF Subject          :        The Subject parameter is a reference to a ManagedElement instance. This parameter MUST be supplied.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignAccess',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignAccess',{'Activities': Activities, 'Target': Target, 'ActivityQualifiers': ActivityQualifiers, 'QualifierFormats': QualifierFormats, 'PrivilegeGranted': PrivilegeGranted, 'Subject': Subject}))
    def removeaccess(self,Privilege=None,Subject=None,InputXmlFile=None):
        '''This method revokes a specific AuthorizedPrivilege or all privileges for a particular target, subject, or subject/target pair. If an AuthorizedPrivilege instance is left with no AuthorizedTarget associations, it SHOULD be deleted. The successful completion of the method SHALL remove the directly or indirectly requested AuthorizedSubject, AuthorizedTarget and AuthorizedPrivilege instances.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_AuthorizedPrivilege REF Privilege   :        A reference to the AuthorizedPrivilege to be revoked.
    CIM_ManagedElement REF Subject          :        The Subject parameter is a reference to a ManagedElement instance (associated via AuthorizedSubject) for which privileges are to be revoked.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RemoveAccess',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RemoveAccess',{'Privilege': Privilege, 'Subject': Subject}))
    def showaccess(self,OutTargets=None,OutSubjects=None,Target=None,Subject=None,InputXmlFile=None):
        '''ShowAccess reports the Privileges (i.e., rights) granted to a particular Subject and/or Target pair. Either a Subject, a Target or both MUST be specified. In the case where only one is specified, the method will return all rights to all Targets for the specified Subject, or all rights for all subjects which apply to the specified Target. \n \n ShowAccess returns the cumulative rights granted between the OutSubjects and OutTargets at the same array index (filtered to return the information that the requestor is authorized to view). If a specific array entry is NULL, then there exist NO rights that the requestor is authorized to view between the Subject/Target pair. \n \n Note that the Privileges returned by this method MAY NOT correspond to what is actually instantiated in the model, and MAY be optimized for ease of reporting. Hence, the data is passed by value , as embedded objects. Also, note that multiple Privileges MAY be defined for a given Subject/Target pair. \n \n Other mechanisms MAY also be used to retrieve this information. CIM Operations EnumerateInstances MAY be used to return all Privileges currently instantiated within a namespace. Also, if the AuthorizedPrivilege subclass is instantiated, the CIM Operation Associators MAY be used to navigate from the Privilege to AuthorizedSubjects and AuthorizedTargets. These CIM Operations will not generally provide the functionality or optimizations available with ShowAccess.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ManagedElement REF[] OutTargets     :        The array of Target REFs corresponding to the individual Privileges and OutSubjects arrays. The resulting OutSubjects, Privileges and OutTargets arrays define the cumulative rights granted between the Subject/Target at the corresponding index (filtered to return the information that the requestor is authorized to view).
    CIM_ManagedElement REF[] OutSubjects    :        The array of Subject REFs corresponding to the individual Privileges and OutTargets arrays. The resulting OutSubjects, Privileges and OutTargets arrays define the cumulative rights granted between the Subject/Target at the corresponding index (filtered to return the information that the requestor is authorized to view).
    CIM_ManagedElement REF Target           :        The Target parameter references an instance of ManagedElement. The result of this operation is that the cumulative rights of the Subject to access or define authorization rights for the Target will be reported. If no Target is specified, then a Subject MUST be supplied and ALL Targets for which that the Subject has rights to access or define authorization will be reported. (It should be noted that the information reported MUST be filtered by the rights of the requestor to view that data.) If the Target element is a Collection, then the operation will be applied to all elements associated to the Collection via MemberOfCollection. These elements will be reported individually in the returned OutTargets array.
    CIM_ManagedElement REF Subject          :        The Subject parameter references an instance of ManagedElement. The result of this operation is that the cumulative rights of the Subject to access or define authorization rights for the Target will be reported. If no Subject is specified, then a Target MUST be supplied and ALL Subjects that have rights to access or define authorizations for the Target will be reported. (It should be noted that the information reported MUST be filtered by the rights of the requestor to view that data.) If the Subject element is a Collection, then the operation will specifically report the Privileges for all elements associated to the Collection via MemberOfCollection. These elements will be reported individually in the returned OutSubjects array.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowAccess',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowAccess',{'OutSubjects': OutSubjects, 'OutTargets': OutTargets, 'Target': Target, 'Subject': Subject}))
class __CIM_RoleBasedAuthorizationService__(__BaseClass__, __CIM_PrivilegeManagementService__):
    '''The CIM_RoleBasedAuthorizationService class represents the authorization service that manages and configures roles on a managed system. The CIM_RoleBasedAuthorizationService is responsible for creating, and deleting CIM_Role instances. Privileges of the roles are represented through the instance(s) of CIM_Privilege class associated to CIM_Role instances through the CIM_MemberOfCollection association. As a result of creating, and deleting CIM_Role instances the CIM_Privilege instances can also be affected. The limiting scope of the role is determined by the CIM_RoleLimitedToTarget association. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RoleBasedAuthorizationService'
        self.__parent__ = 'CIM_PrivilegeManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'modifyrole':self.modifyrole,
            'assignroles':self.assignroles,
            'showroles':self.showroles,
            }
    def modifyrole(self,Privileges=None,RoleLimitedToTargets=None,InputXmlFile=None):
        '''ModifyRole method modifies the privileges and the scope of the specified instance of the targeted CIM_Role instance. The call may result in the creation, deletion, or modification of CIM_Privilege instances. The call may result in the creation and deletion of CIM_RoleLimitedTarget association instances.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] Privileges                     :        Privileges parameter represents the desired privileges for the targeted role. When this parameter is non-null, upon successful completion of the method, the instances of CIM_Privilege associated with the targeted CIM_Role instance shall convey equivalent privileges as those indicated by the specified embedded CIM_Privilege instances. The Privilege parameter is an array of elements of CIM_Privilege, encoded as a string valued embedded instance parameter. The embedded instances allow the client to convey the privileges desired for the targeted CIM_Role instance. The method may result in the creation, deletion, or modification of the CIM_Privilege instances. The rights indicated by a CIM_Privilege may be revoked by passing the embedded instance of CIM_Privilege with PrivilegeGranted property set to FALSE.. When the parameter is null, the privileges for the CIM_Role shall not be modified.
    CIM_ManagedElement REF[] RoleLimitedToTargets:        RoleLimitedToTargets parameter references all of the CIM_ManagedElement instances to which the role shall be limited. When this parameter is non-null, upon successful completion of the method, the targeted CIM_Role instanceshall be associated through the CIM_RoleLimitedToTarget association with only the specified instances of CIM_ManagedElement. This may result in the creation and deletion of instances of CIM_RoleLimitedToTarget. When this parameter is null, the set of instances of CIM_RoleLimitedToTarget that reference the targeted CIM_Role instance shall not be modified.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyRole',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyRole',{'Privileges': Privileges, 'RoleLimitedToTargets': RoleLimitedToTargets}))
    def assignroles(self,Identity=None,Roles=None,InputXmlFile=None):
        '''AssignRoles() removes a security principal from any Roles to which it currently belongs and assigns it to the Roles identified by the Roles$AB parameter. Upon successful completion of the method, the instance of CIM_Identity identified by the Identity parameter shall be associated to each Role referenced by the Roles parameter through the CIM_MemberOfCollection association and shall not be associated to an instance of CIM_Role unless a reference to it is contained in the Roles parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_Identity REF Identity               :        The Identity instance representing the security principal whose role membership is being modified.
    CIM_Role REF[] Roles                    :        The set of Roles to which the Identity will be associated through CIM_MemberOfCollection. If the Roles parameter is an empty array, then the successful execution of the method will unassign all the roles from the identity represented by the Identity parameter.

Output Parameters:
    string Message                          :        Message
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',{'Roles': Roles, 'Identity': Identity}))
    def showroles(self,Target=None,Roles=None,Subject=None,InputXmlFile=None):
        '''ShowRoles reports the Privileges (i.e., rights) granted to a particular Subject, for a particular Target, or to a particular Subject for a particular Target through membership in, or scoping to instances of CIM_Role. The Subject parameter, Target parameter, or both shall be specified. \n When the Subject parameter is specified and the Target parameter is not specified, the method shall return all of Roles to which the subject is associated through CIM_MemberOfCollection. When Target parameter is specified and the Subject parameter is not specified, the method shall all instances of CIM_Role within whose scope the Target Parameter lies.\n When the Subject parameter and Target parameter are both specified, the method shall return an instance of CIM_Role if and only if the Subject Parameter is associated to the instance of CIM_Role through CIM_MemberOfCollection and the Target Parameter lies within the scope of the instance of CIM_Role.\n For each instance of CIM_Role returned in the Roles parameter, the corresponding index of the Privileges parameter may contain an instance of CIM_Privilege. The corresponding index of the Privileges parameter may be null when rights granted through a CIM_Role are not explicitly managed, or when there are not currently any instances of CIM_Privilege associated with the CIM_Role instance. When the corresponding index of of the Privileges parameter is non-null, the embedded instance of CIM_Privilege shall reflect the cumulative rights granted through membership in the Role. \n Each embedded instance of CIM_Role contained in the Roles parameter shall correspond to an instrumented instance of CIM_Role. Each embedded instance of CIM_Privilege contained in the Privileges parameter may correspond to an instance of CIM_Privilege associated to the corresponding instance of CIM_Role through the CIM_MemberOfCollection. However, this is not required. Embedded instances of CIM_Role are returned rather than References in order to simplify the query operation for clients. The properties of the instances of CIM_Role provide context to aid a client in selecting which instance(s) to modify in order to change the privileges of a Subject or for a Target.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ManagedElement REF Target           :        The Target parameter identifies an instance of CIM_ManagedElement whose scoping instances of CIM_Role will be returned.
    string[] Roles                          :        The set of instances of CIM_Role filtered according to the Subject and Target parameters.
    CIM_Identity REF Subject                :        The Subject parameter identifies the instance of CIM_Identity whose containing instances of CIM_Role will be returned.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowRoles',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ShowRoles',{'Target': Target, 'Roles': Roles, 'Subject': Subject}))
class __DCIM_CLPRoleBasedAuthorizationService__(__BaseClass__, __CIM_RoleBasedAuthorizationService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRoleBasedAuthorizationService'
        self.__parent__ = 'CIM_RoleBasedAuthorizationService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'assignroles':self.assignroles,
            }
    def assignroles(self,Identity=None,Roles=None,InputXmlFile=None):
        '''AssignRoles() removes a security principal from any Rolesto which it currently belongs and assigns it to the Roles identified by the Roles$AB parameter. Upon successful completion of the method, the instance of CIM_Identity identified by the Identity parameter shall be associated to each Role referenced by the Roles parameter through the CIM_MemberOfCollection association and shall not be associated to an instance of CIM_Role unless a reference to it is contained in the Roles parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_Identity REF Identity               :        The Identity instance representing the security principalwhose role membership is being modified.
    CIM_Role REF[] Roles                    :        The set of Roles to which the Identity will be associated through CIM_MemberOfCollection.

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',{'Roles': Roles, 'Identity': Identity}))
class __DCIM_IPMIRoleBasedAuthorizationService__(__BaseClass__, __CIM_RoleBasedAuthorizationService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRoleBasedAuthorizationService'
        self.__parent__ = 'CIM_RoleBasedAuthorizationService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'assignroles':self.assignroles,
            }
    def assignroles(self,Identity=None,Roles=None,InputXmlFile=None):
        '''AssignRoles() removes a security principal from any Rolesto which it currently belongs and assigns it to the Roles identified by the Roles$AB parameter. Upon successful completion of the method, the instance of CIM_Identity identified by the Identity parameter shall be associated to each Role referenced by the Roles parameter through the CIM_MemberOfCollection association and shall not be associated to an instance of CIM_Role unless a reference to it is contained in the Roles parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_Identity REF Identity               :        The Identity instance representing the security principalwhose role membership is being modified.
    CIM_Role REF[] Roles                    :        The set of Roles to which the Identity will be associated through CIM_MemberOfCollection.

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'AssignRoles',{'Roles': Roles, 'Identity': Identity}))
class __DCIM_LocalRoleBasedAuthorizationService__(__BaseClass__, __CIM_RoleBasedAuthorizationService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRoleBasedAuthorizationService'
        self.__parent__ = 'CIM_RoleBasedAuthorizationService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SoftwareInstallationService__(__BaseClass__, __CIM_SoftwareInstallationService__):
    '''A class derived from SoftwareInstallationService to represent the Software Installation Services provided. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SoftwareInstallationService'
        self.__parent__ = 'CIM_SoftwareInstallationService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'setupdateschedule':self.setupdateschedule,
            'installfromuri':self.installfromuri,
            'getrepobasedupdatelist':self.getrepobasedupdatelist,
            'getupdateschedule':self.getupdateschedule,
            'installfromsoftwareidentity':self.installfromsoftwareidentity,
            'clearupdateschedule':self.clearupdateschedule,
            'installfromrepository':self.installfromrepository,
            'createrebootjob':self.createrebootjob,
            }
    def setupdateschedule(self,UserName=None,DayofWeek=None,Domain=None,Repeat=None,IPAddress=None,ShareType=None,ShareName=None,Time=None,URI=None,ProxyPassword=None,CatalogID=None,WeekofMonth=None,ProxyUserName=None,CatalogName=None,Password=None,ApplyReboot=None,Comment=None,ProxyHostName=None,DayofMonth=None,InputXmlFile=None):
        '''This method is called to set the Update Schedule

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        User name for the remote share
    string DayofWeek                        :        *,Mon,Tue,Wed,Thu,Fri,Sat,Sun
    string Domain                           :        The domain of the user name for access to the share
    uint16 Repeat                           :        1-366
    string IPAddress                        :        IP address of the NFS or CIFS share such as 192.168.10.12
    uint16 ShareType                        :        Type of the share or storage
    string ShareName                        :        Share name for the network share 
    string Time                             :        hh:mm Represents hour and minute of day to run
    string URI                              :        The URI to the she repository catalog file
    string ProxyPassword                    :        The password for access to the proxy server, 
    string CatalogID                        :        The ID of the catalog to use
    string WeekofMonth                      :        *,1-4, L,Default:*
    string ProxyUserName                    :        The user name for access to the proxy server
    string CatalogName                      :        The name of the catalog file if not the default
    string Password                         :        Password for the remote share
    uint16 ApplyReboot                      :        0: Reboot Required,1: No Reboot
    string Comment                          :        This is a free format text field, 1024 bytes or less, forthe user to use if desired
    string ProxyHostName                    :        The hostname of the proxy server
    string DayofMonth                       :        *,1-31,Default:*

Output Parameters:
    string MessageID                        :        Error Message ID
    string Message                          :        Error Message in English corresponding to MessageID 
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetUpdateSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetUpdateSchedule',{'UserName': UserName, 'DayofWeek': DayofWeek, 'Domain': Domain, 'Repeat': Repeat, 'ShareType': ShareType, 'ShareName': ShareName, 'ApplyReboot': ApplyReboot, 'URI': URI, 'ProxyPassword': ProxyPassword, 'CatalogID': CatalogID, 'DayofMonth': DayofMonth, 'WeekofMonth': WeekofMonth, 'ProxyUserName': ProxyUserName, 'Time': Time, 'Password': Password, 'IPAddress': IPAddress, 'Comment': Comment, 'ProxyHostName': ProxyHostName, 'CatalogName': CatalogName}))
    def installfromuri(self,URI=None,Target=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string URI                              :        No documentation.
    CIM_SoftwareIdentity REF Target         :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string[] MessageArguments               :        No documentation.
    string MessageID                        :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromURI',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromURI',{'URI': URI, 'Target': Target}))
    def getrepobasedupdatelist(self,InputXmlFile=None):
        '''This method is called to get the list of packages if ApplyUpdate=FALSE is used in InstallFromRepository method

Output Parameters:
    string PackageList                      :        No documentation.
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRepoBasedUpdateList',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetRepoBasedUpdateList',{}))
    def getupdateschedule(self,InputXmlFile=None):
        '''This method is called to Get the Update Schedule

Output Parameters:
    string Username                         :        User name for the remote share
    string DayofWeek                        :        *,Mon,Tue,Wed,Thu,Fri,Sat,Sun
    string Domain                           :        The domain of the user name for access 
    string Repeat                           :        1-366
    string IPAddress                        :        IP address of the NFS or CIFS share
    string ShareType                        :        Type of the share or storage
    string ShareName                        :        Share name for the network share 
    string Time                             :        Represents hour and minute of day to run
    string ProxyHostName                    :        The hostname of the proxy server
    string CatalogID                        :        The ID of the catalog to use
    string WeekofMonth                      :        *,1-4, L
    string ProxyUserName                    :        The user name for access to the proxy server
    string MessageID                        :        Error Message ID
    string Message                          :        Error Message in English corresponding to MessageID 
    string CatalogName                      :        The name of the catalog file if not the default
    string ApplyReboot                      :        0: Reboot Required,1: No Reboot
    string JobType                          :        Job Type, Auto_Update
    string DayofMonth                       :        *,1-31
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetUpdateSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetUpdateSchedule',{}))
    def installfromsoftwareidentity(self,Target=None,InputXmlFile=None):
        '''This method is called to Install a new firmware

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_SoftwareIdentity REF Target         :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
    string[] MessageArguments               :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromSoftwareIdentity',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromSoftwareIdentity',{'Target': Target}))
    def clearupdateschedule(self,InputXmlFile=None):
        '''This method is called to clear the Update Schedule

Output Parameters:
    string Message                          :        Error Message in English corresponding to MessageID
    string MessageID                        :        Error Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearUpdateSchedule',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearUpdateSchedule',{}))
    def installfromrepository(self,UserName=None,ProxyPort=None,Workgroup=None,ProxyType=None,ShareType=None,ShareName=None,ApplyUpdate=None,ProxyUname=None,CatalogFile=None,ProxySupport=None,ProxyServer=None,ProxyPasswd=None,Mountpoint=None,Password=None,IPAddress=None,RebootNeeded=None,InputXmlFile=None):
        '''This method is called to Install from a specified repository

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string UserName                         :        No documentation.
    uint32 ProxyPort                        :        No documentation.
    string Workgroup                        :        No documentation.
    uint16 ProxyType                        :        No documentation.
    uint16 ShareType                        :        No documentation.
    string ShareName                        :        No documentation.
    uint16 ApplyUpdate                      :        No documentation.
    string ProxyUname                       :        No documentation.
    string CatalogFile                      :        No documentation.
    boolean ProxySupport                    :        No documentation.
    string ProxyServer                      :        No documentation.
    string ProxyPasswd                      :        No documentation.
    string Mountpoint                       :        No documentation.
    string Password                         :        No documentation.
    string IPAddress                        :        No documentation.
    boolean RebootNeeded                    :        No documentation.

Output Parameters:
    string[] MessageArguments               :        No documentation.
    string MessageID                        :        No documentation.
    string Message                          :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromRepository',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallFromRepository',{'UserName': UserName, 'ProxyPort': ProxyPort, 'Workgroup': Workgroup, 'ProxyType': ProxyType, 'ShareType': ShareType, 'ShareName': ShareName, 'ApplyUpdate': ApplyUpdate, 'ProxyUname': ProxyUname, 'CatalogFile': CatalogFile, 'ProxySupport': ProxySupport, 'ProxyServer': ProxyServer, 'ProxyPasswd': ProxyPasswd, 'Mountpoint': Mountpoint, 'Password': Password, 'IPAddress': IPAddress, 'RebootNeeded': RebootNeeded}))
    def createrebootjob(self,RebootJobType=None,InputXmlFile=None):
        '''This method is called to create a reboot job

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RebootJobType                    :        No documentation.

Output Parameters:
    string Message                          :        No documentation.
    string MessageID                        :        No documentation.
    string[] MessageArguments               :        No documentation.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateRebootJob',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CreateRebootJob',{'RebootJobType': RebootJobType}))
class __DCIM_TimeService__(__BaseClass__, __CIM_TimeService__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_TimeService'
        self.__parent__ = 'CIM_TimeService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'managetime':self.managetime,
            }
    def managetime(self,TimeData=None,GetRequest=None,ManagedElement=None,InputXmlFile=None):
        '''

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    datetime TimeData                       :        The current date and time. On input, this value is the time that is set on the specified element, if the GetRequest input parameter is TRUE. Otherwise, the input time is ignored. On output, this value is the time as it is known by the element.
    boolean GetRequest                      :        Indicates whether the request is to get (TRUE) or set (FALSE) the time for the specified element.
    CIM_ManagedElement REF ManagedElement   :        ManagedElement indicates the element whose state is set.

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ManageTime',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ManageTime',{'TimeData': TimeData, 'GetRequest': GetRequest, 'ManagedElement': ManagedElement}))
class __CIM_ComputerSystem__(__BaseClass__, __CIM_System__):
    '''A class derived from System that is a special collection of ManagedSystemElements. This collection is related to the providing of compute capabilities and MAY serve as an aggregation point to associate one or more of the following elements: FileSystem, OperatingSystem, Processor and Memory (Volatile and/or NonVolatile Storage). )

Class Properties:
    uint16 Dedicated[]                      :    Enumeration indicating the purpose(s) to which the ComputerSystem is dedicated, if any, and what functionality is provided. For example, one could specify that the System is dedicated to Print (value=11) or acts as a Hub (value=8). \nAlso, one could indicate that this is a general purpose system by indicating Not Dedicated (value=0) but that it also hosts Print (value=11) or mobile phone Mobile User Device (value=17) services. \nA clarification is needed with respect to the value 17 (Mobile User Device). An example of a dedicated user device is a mobile phone or a barcode scanner in a store that communicates via radio frequency. These systems are quite limited in functionality and programmability, and are not considered general purpose computing platforms. Alternately, an example of a mobile system that is general purpose (i.e., is NOT dedicated) is a hand-held computer. Although limited in its programmability, new software can be downloaded and its functionality expanded by the user. \nA value of Management indicates this instance is dedicated to hosting system management software.\nA value of Management Controller indicates this instance represents specialized hardware dedicated to systems management (i.e., a Baseboard Management Controller (BMC) or service processor).\nThe management scope of a Management Controller is typically a single managed system in which it is contained.\nA value of Chassis Manager indicates this instance represents a system dedicated to management of a blade chassis and its contained devices. This value would be used to represent a Shelf Controller. A Chassis Manager is an aggregation point for management and may rely on subordinate management controllers for the management of constituent parts. A value of Host-based RAID Controller indicates this instance represents a RAID storage controller contained within a host computer. A value of Storage Device Enclosure indicates this instance represents an enclosure that contains storage devices. A Virtual Tape Library is the emulation of a tape library by a Virtual Library System. A Virtual Library System uses disk storage to emulate tape libraries.A FC Switch indicates this instance is dedicated to switching layer 2 fibre channel frames. An Ethernet Switch indicates this instance is dedicated to switching layer 2 ethernet frames.\nServer indicates that the system is an independent computer system whose primary purpose is to host services for other systems and devices to access; typically as in a stand-alone floor or rack-mounted system.\nBlade indicates this instance is a computer system that fits into another chassis and depends on it for services, such as power, cooling, etc.
    string NameFormat                       :    The ComputerSystem object and its derivatives are Top Level Objects of CIM. They provide the scope for numerous components. Having unique System keys is required. The NameFormat property identifies how the ComputerSystem Name is generated. The NameFormat ValueMap qualifier defines the various mechanisms for assigning the name. Note that another name can be assigned and used for the ComputerSystem that better suit a business, using the inherited ElementName property.\nIf the NameFormat is set to UUID, then the Name property shall be a UUID in its canonical form consisting of 32 hexadecimal digits in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters (32 digits and 4 hyphens). For the first three fields, the most significant digit is on the left. The last two fields are treated as eight separate bytes, each having their most significant digit on the left, and they follow each other from left to right.
    string OtherDedicatedDescriptions[]     :    A string describing how or why the system is dedicated when the Dedicated array includes the value 2, Other.
    uint16 PowerManagementCapabilities[]    :    An enumerated array describing the power management capabilities of the ComputerSystem. The use of this property has been deprecated. Instead, the Power Capabilites property in an associated PowerManagement Capabilities class should be used.
    uint16 ResetCapability                  :    If enabled (value = 4), the ComputerSystem can be reset via hardware (e.g. the power and reset buttons). If disabled (value = 3), hardware reset is not allowed. In addition to Enabled and Disabled, other Values for the property are also defined - Not Implemented (5), Other (1) and Unknown (2).
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ComputerSystem'
        self.__parent__ = 'CIM_System'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'setpowerstate':self.setpowerstate,
            }
    def setpowerstate(self,InputXmlFile=None):
        '''Sets the power state of the computer. The use of this method has been deprecated. Instead, use the SetPowerState method in the associated PowerManagementService class.

Output Parameters:
    uint32 PowerState                       :        The Desired state for the COmputerSystem.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetPowerState',{}))
class __DCIM_ComputerSystem__(__BaseClass__, __CIM_ComputerSystem__):
    ''')

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ComputerSystem'
        self.__parent__ = 'CIM_ComputerSystem'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            }
    def requeststatechange(self,RequestedState=None,Job=None,TimeoutPeriod=None,InputXmlFile=None):
        '''Requests that the state of the element be changed to the value specified in the RequestedState parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RequestedState                   :        The power state for ManagedElement.
    CIM_ConcreteJob REF Job                 :        Reference to the job (can be null if the task is completed).
    datetime TimeoutPeriod                  :        A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of Use Of Timeout Parameter Not Supported must be returned.

Output Parameters:
    string Message                          :        Error Message in english corresponding to the MessageID
    string MessageID                        :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'RequestedState': RequestedState, 'Job': Job, 'TimeoutPeriod': TimeoutPeriod}))
class __DCIM_SPComputerSystem__(__BaseClass__, __CIM_ComputerSystem__):
    '''DCIM_SPComputer is a derivation of CIM_ComputerSystem, and represents a service processor. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPComputerSystem'
        self.__parent__ = 'CIM_ComputerSystem'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            }
    def requeststatechange(self,RequestedState=None,Job=None,TimeoutPeriod=None,InputXmlFile=None):
        '''Requests that the state of the element be changed to the value specified in the RequestedState parameter.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    uint16 RequestedState                   :        The power state for ManagedElement.
    CIM_ConcreteJob REF Job                 :        Reference to the job (can be null if the task is completed).
    datetime TimeoutPeriod                  :        A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of Use Of Timeout Parameter Not Supported must be returned.

Output Parameters:
    string Message                          :        Message
    string MessageID                        :        Message ID
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'RequestedState': RequestedState, 'Job': Job, 'TimeoutPeriod': TimeoutPeriod}))
class __CIM_ConcreteJob__(__BaseClass__, __CIM_Job__):
    '''A concrete version of Job. This class represents a generic and instantiable unit of work, such as a batch or a print job. )

Class Properties:
    datetime TimeBeforeRemoval = 00000000000500.000000:000:    The amount of time that the Job is retained after it has finished executing, either succeeding or failing in that execution. The job must remain in existence for some period of time regardless of the value of the DeleteOnCompletion property. \nThe default is five minutes.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> must include a copyrighted, trademarked or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID, or that is a registered ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity must assure that the resulting InstanceID is not re-used across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nFor DMTF defined instances, the preferred algorithm must be used with the <OrgID> set to CIM.
    string JobInParameters                  :    The input (including inout), parameters of the job, formatted as an embedded instance with a class name of __JobInParameters.\nIn the case where a job represents an intrinsic operation or an extrinsic method call, that embedded instance contains properties representing the input parameters of that call. Each input parameter is mapped to a corresponding property of the same name and type. REF-typed parameters are represented as Reference-qualified properties of type string whose value is the instance path in WBEM URI format.\nThe value of each property shall be the value of the corresponding input parameter at the time the job was started.
    string JobOutParameters                 :    The output (including inout), parameters of the job, formatted as an embedded instance with a class name of __JobOutParameters.\n\nThis property shall be NULL unless JobStatus has the value Completed (7).\n\nIn the case where a job represents an intrinsic operation or an extrinsic method call, that embedded instance contains properties representing the output parameters and return value of that call. Each output parameter is mapped to a corresponding property of the same name and type, and the return value is mapped to a property with the name __ReturnValue of the same type. REF-typed parameters and return values are mapped to Reference-qualified properties of type string whose value is the instance path in WBEM URI format.\n\nThe value of each such property shall be the value of the corresponding output parameter or return value at the time the job completed.
    uint16 JobState                         :    JobState is an integer enumeration that indicates the operational state of a Job. It can also indicate transitions between these states, for example, Shutting Down and Starting. Following is a brief description of the states: \nNew (2) indicates that the job has never been started. \nStarting (3) indicates that the job is moving from the New, Suspended, or Service states into the Running state. \nRunning (4) indicates that the Job is running. \nSuspended (5) indicates that the Job is stopped, but can be restarted in a seamless manner. \nShutting Down (6) indicates that the job is moving to a Completed, Terminated, or Killed state. \nCompleted (7) indicates that the job has completed normally. \nTerminated (8) indicates that the job has been stopped by a Terminate state change request. The job and all its underlying processes are ended and can be restarted (this is job-specific) only as a new job. \nKilled (9) indicates that the job has been stopped by a Kill state change request. Underlying processes might have been left running, and cleanup might be required to free up resources. \nException (10) indicates that the Job is in an abnormal state that might be indicative of an error condition. Actual status might be displayed though job-specific objects. \nService (11) indicates that the Job is in a vendor-specific state that supports problem discovery, or resolution, or both.\nQuery pending (12) waiting for a client to resolve a query
    string Name                             :    The user-friendly name for this instance of a Job. In addition, the user-friendly name can be used as a property for a search or query. (Note: Name does not have to be unique within a namespace.)
    datetime TimeOfLastStateChange          :    The date or time when the state of the Job last changed. If the state of the Job has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ConcreteJob'
        self.__parent__ = 'CIM_Job'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            'geterrors':self.geterrors,
            'geterror':self.geterror,
            }
    def requeststatechange(self,InputXmlFile=None):
        '''Requests that the state of the job be changed to the value specified in the RequestedState parameter. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \n If 0 is returned, then the task completed successfully. Any other return code indicates an error condition.

Output Parameters:
    uint16 RequestedState                   :        RequestStateChange changes the state of a job. The possible values are as follows: \nStart (2) changes the state to Running. \nSuspend (3) stops the job temporarily. The intention is to subsequently restart the job with Start. It might be possible to enter the Service state while suspended. (This is job-specific.) \nTerminate (4) stops the job cleanly, saving data, preserving the state, and shutting down all underlying processes in an orderly manner. \nKill (5) terminates the job immediately with no requirement to save data or preserve the state. \nService (6) puts the job into a vendor-specific service state. It might be possible to restart the job.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{}))
    def geterrors(self,InputXmlFile=None):
        '''If JobState is Completed and Operational Status is Completed then no instance of CIM_Error is returned. \n If JobState is Exception then GetErrors may return intances of CIM_Error related to the execution of the procedure or method invoked by the job.\n If Operatational Status is not OK or Completed then GetErrors may return CIM_Error instances related to the running of the job.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetErrors',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetErrors',{}))
    def geterror(self,InputXmlFile=None):
        '''GetError is deprecated because Error should be an array,not a scalar.\n When the job is executing or has terminated without error, then this method returns no CIM_Error instance. However, if the job has failed because of some internal problem or because the job has been terminated by a client, then a CIM_Error instance is returned.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetError',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetError',{}))
class __DCIM_LifecycleJob__(__BaseClass__, __CIM_ConcreteJob__):
    '''DCIM_LifecycleJob is a derivation of CIM_ConcreteJob )

Class Properties:
    string ElapsedTimeSinceCompletion       :    A free-form string that represents time elapsed sincecompletion of the job 
    string JobStartTime                     :    A free-form string that represents the start time of the jobadditional, implementation-specific details.
    string JobUntilTime                     :    A free-form string that represents until time of the job additional, implementation-specific details.
    string Message                          :    A free-form string that represents the error of the of the job, implementation-specific details.
    string MessageArguments                 :    A free-form string that represents the MessageArguments of the job. The primary status is reflected in the inherited additional, implementation-specific details.
    string MessageID                        :    A free-form string that represents the error id of the job. The primary status is reflected in the inherited additional, implementation-specific details.
    string PercentComplete                  :    No documentation.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LifecycleJob'
        self.__parent__ = 'CIM_ConcreteJob'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_OSDConcreteJob__(__BaseClass__, __CIM_ConcreteJob__):
    '''DCIM_OSDConcreteJob is a derivation of CIM_ConcreteJob with OSD specific data )

Class Properties:
    string JobName                          :    The user-friendly name for this instance of a Job
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_OSDConcreteJob'
        self.__parent__ = 'CIM_ConcreteJob'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SoftwareIdentity__(__BaseClass__, __CIM_SoftwareIdentity__):
    '''Describes the characteristics of the software that is installed or available for installation. )

Class Properties:
    string ComponentID                      :    A free-form string that represents the ComponentIDin string format.
    string ComponentType                    :    A free-form string that represents the ComponentTypein string format.
    string DeviceID                         :    A free-form string that represents the Device IDin string format.
    boolean impactsTPMmeasurements = FALSE  :    Boolean Varibale  that represents the impactsTPMmeasurementsin string boolean format.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string InstallationDate                 :    A free-form string that represents the Installation Date 	in string format.
    string RevisionString                   :    A free-form string that represents the Revision Numberin string format.
    string Status                           :    Indicates whether software is installed or is available for installation.
    string SubDeviceID                      :    A free-form string that represents the SubDevice IDin string format.
    string SubVendorID                      :    A free-form string that represents the SubVendorIDin string format.
    boolean Updateable                      :    Indicates whether the software is capable of being updated through the WSMan interface. If TRUE, then the software can be updated through WSMan, otherwise if FALSE, software is not updateable through WSMan but may be updateable through another interface.
    string VendorID                         :    A free-form string that represents the VendorIDin string format.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SoftwareIdentity'
        self.__parent__ = 'CIM_SoftwareIdentity'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PhysicalConnector__(__BaseClass__, __CIM_PhysicalElement__):
    '''The PhysicalConnector class represents any PhysicalElement that is used to connect to other Elements. Any object that can be used to connect and transmit signals or power between two or more PhysicalElements is a descendant (or member) of this class. For example, Slots and D-shell connectors are types of PhysicalConnectors. )

Class Properties:
    string ConnectorDescription             :    A string describing the Connector - used when the ConnectorLayout property is set to 1 (Other). Connector Description should be set to NULL when ConnectorLayout is any value other than 1.
    uint16 ConnectorElectricalCharacteristics[]:    Describes the electrical characteristic for this connector.
    uint16 ConnectorGender                  :    Describes the gender of the connector.
    uint16 ConnectorLayout                  :    Describes the type of packaging normally associated with this type of connector.16 (PCI) - describes the generic PCI connector layout. 17 (PCI-X) - describes the PCI Extended connector layout. 18 (PCI-E) - describes the PCI Express connector layout, where the actual layout as far as the length is concerned is unknown. 19 - 25 (PCI-E xN) - describes the PCI Express connector layout, where N is the lane count that appropriately descirbes the length of the PCI-E connector.
    string ConnectorPinout                  :    A free-form string describing the pin configuration and/or signal usage of a PhysicalConnector.
    uint16 ConnectorType[]                  :    An array of integers defining the type of PhysicalConnector. An array is specified to allow the description of combinations of Connector information. For example, one array entry could specify RS-232 (value=25), another DB-25 (value=23) and a third entry define the Connector as Male (value=2). \nThis single property is being deprecated in lieu of using separate properties to describe the various aspects of the connector. The separation allows for a more generic means of describing the connectors. Obsolete connectors were intentionally removed from the new list.
    uint32 NumPhysicalPins                  :    Describes the number of physical pins (male/female) that are present on this connector.
    string OtherElectricalCharacteristics[] :    A string describing the connectors electrical characteristics - used when the ConnectorElectricalCharacteristics property contains an entry of 1 (Other). OtherElectricalCharacteristics should be set to NULL when ConnectorElectricalCharacteristics does not contain an value of 1.
    string OtherTypeDescription             :    A string describing the Connector - used when the ConnectorType property is set to 1 (Other). OtherType Description should be set to NULL when ConnectorType is any value other than 1. \nThe use of this property is deprecated in lieu of Connector Description.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PhysicalConnector'
        self.__parent__ = 'CIM_PhysicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PhysicalPackage__(__BaseClass__, __CIM_PhysicalElement__):
    '''The PhysicalPackage class represents PhysicalElements that contain or host other components. Examples are a Rack enclosure or an adapter Card. )

Class Properties:
    uint16 RemovalConditions = 2            :    The RemovalCapabilites property is used to describe the conditions under which a PhysicalPackage can be removed. Since all PhysicalPackages are not removable, this property defaults to 2, Not Applicable.
    real32 Depth                            :    The depth of the PhysicalPackage in inches.
    real32 Height                           :    The height of the PhysicalPackage in inches.
    boolean HotSwappable                    :    The use of this property is being deprecated. Instead RemovalConditions should be used. The RemovalConditions property addresses whether a PhysicalPackage is removable with or without power being applied. \n\nA PhysicalPackage is HotSwappable if it is possible to replace the Element with a physically different but equivalent one while the containing Package has power applied to it (ie, is on). For example, a disk drive Package inserted using SCA connectors is both Removable and HotSwappable. All HotSwappable packages are inherently Removable and Replaceable.
    string OtherPackageType                 :    A string describing the package when the instances PackageType property is 1 (Other).
    uint16 PackageType                      :    Enumeration defining the type of the PhysicalPackage. Note that this enumeration expands on the list in the Entity MIB (the attribute, entPhysicalClass). The numeric values are consistent with CIMs enum numbering guidelines, but are slightly different than the MIBs values.\nUnknown - indicates that the package type is not known.\nOther - The package type does not correspond to an existing enumerated value. The value is specified using the OtherPackageType property.\nThe values Rack through Port/Connector are defined per the Entity-MIB (where the semantics of rack are equivalent to the MIBs stack value). The other values (for battery, processor, memory, power source/generator and storage media package) are self-explanatory.\nA value of Blade should be used when the PhysicalPackage contains the operational hardware aspects of a ComputerSystem, without the supporting mechanicals such as power and cooling. For example, a Blade Server includes processor(s) and memory, and relies on the containing chassis to supply power and cooling. In many respects, a Blade can be considered a Module/Card. However, it is tracked differently by inventory systems and differs in terms of service philosophy. For example, a Blade is intended to be hot-plugged into a hosting enclosure without requiring additional cabling, and does not require a cover to be removed from the enclosure for installation. Similarly, a Blade Expansion has characteristics of a Blade and a Module/Card. However, it is distinct from both due to inventory tracking and service philosophy, and because of its hardware dependence on a Blade. A Blade Expansion must be attached to a Blade prior to inserting the resultant assembly into an enclosure.
    boolean Removable                       :    The use of this property is being deprecated. Instead RemovalConditions should be used. The RemovalConditions property addresses whether a PhysicalPackage is removable with or without power being applied. \nA PhysicalPackage is Removable if it is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging. A Package can still be Removable if power must be off in order to perform the removal. If power can be on and the Package removed, then the Element is both Removable and HotSwappable. For example, an extra battery in a laptop is Removable, as is a disk drive Package inserted using SCA connectors. However, the latter is also HotSwappable. A laptops display is not Removable, nor is a non-redundant power supply. Removing these components would impact the function of the overall packaging or is impossible due to the tight integration of the Package.
    boolean Replaceable                     :    The use of this property is being deprecated because it is redundant with the FRU class and its associations. A PhysicalPackage is Replaceable if it is possible to replace (FRU or upgrade) the Element with a physically different one. For example, some ComputerSystems allow the main Processor chip to be upgraded to one of a higher clock rating. In this case, the Processor is said to be Replaceable. Another example is a power supply Package mounted on sliding rails. All Removable packages are inherently Replaceable.
    string VendorCompatibilityStrings[]     :    An array of strings that identify the component that is compatible with, and can be inserted in a slot that reports this string as one of the array element in the VendorCompatibilityStrings This allows system administrators to determine whether it is appropriateto insert a package into a slot \nIn order to ensure uniqueness within the NameSpace, each value defined by the vendor for use in the VendorCompatibilityStrings property SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements.
    real32 Weight                           :    The weight of the PhysicalPackage in pounds.
    real32 Width                            :    The width of the PhysicalPackage in inches.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PhysicalPackage'
        self.__parent__ = 'CIM_PhysicalElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'iscompatible':self.iscompatible,
            }
    def iscompatible(self,InputXmlFile=None):
        '''This method is being deprecated. A PhysicalPackage cannot determine if it is compatible with another object. The IsCompatible method verifies whether the referenced PhysicalElement may be contained by or inserted into the PhysicalPackage. The return value should be 0 if the request was successfully executed, 1 if the request is not supported and some other value if an error occurred. In a subclass, the set of possible return codes could be specified, using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated may also be specified in the subclass as a Values array qualifier.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'IsCompatible',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'IsCompatible',{}))
class __CIM_Slot__(__BaseClass__, __CIM_PhysicalConnector__):
    '''The Slot class represents Connectors into which Packages are inserted. For example, a PhysicalPackage that is a DiskDrive may be inserted into an SCA Slot . As another example, a Card (subclass of PhysicalPackage) may be inserted into a 16-, 32-, or 64-bit expansion Slot on a HostingBoard. PCI or PCMCIA Type III Slots are examples of the latter. )

Class Properties:
    uint16 ConnectorType[]                  :    No documentation.
    real32 HeightAllowed                    :    Maximum height of an adapter Card that can be inserted into the Slot, in inches.
    real32 LengthAllowed                    :    Maximum length of an adapter Card that can be inserted into the Slot, in inches.
    uint16 MaxDataWidth                     :    Maximum bus width of adapter Cards that can be inserted into this Slot, in bits. If the value is unknown, enter 0. If the value is other than 8, 16, 32, 64 or 128, enter 1.
    uint16 MaxLinkWidth                     :    Maximum link width of a switching bus type, such as Infiniband and PCI Express. The width is expressed in number of communication lines, or lanes, between port and devices. This property dictates the maximum link width, in lanes, of adapter Cards that can be inserted into this Slot. If the value is unknown, enter 0.
    uint16 Number                           :    The Number property indicates the physical slot number, which can be used as an index into a system slot table, whether or not that slot is physically occupied.
    boolean OpenSwitch                      :    A boolean indicating whether the switch state of the Slot is currently open (TRUE) or closed (FALSE). This switch state determines whether the contents of the Slot can be hot-plugged.
    boolean Powered                         :    A boolean indicating whether the Slot is currently powered (TRUE) or not (FALSE).
    boolean PoweredOn                       :    No documentation.
    string PurposeDescription               :    A free-form string describing that this Slot is physically unique and may hold special types of hardware. This property only has meaning when the corresponding boolean property, SpecialPurpose, is set to TRUE.
    boolean SpecialPurpose                  :    Boolean indicating that this Slot is physically unique and may hold special types of hardware, e.g. a graphics processor slot. If set to TRUE, then the property, Special PurposeDescription (a string), should specify the nature of the uniqueness or purpose of the Slot.
    boolean SupportsHotPlug                 :    Boolean indicating whether the Slot supports hot-plug of adapter Cards.
    uint32 ThermalRating                    :    Maximum thermal dissipation of the Slot in milliwatts.
    uint16 VccMixedVoltageSupport[]         :    An array of enumerated integers indicating the Vcc voltage supported by this Slot.
    string VendorCompatibilityStrings[]     :    An array of strings that identify the components that are compatible and can be inserted in a slot. This allows vendors to provide clues to the system administrators by providing sufficient information to request the appropriate hardware that can populate the slot. In order to ensure uniqueness within the NameSpace, each value defined by the vendor for use in the VendorCompatibilityStrings property SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements.
    uint16 VppMixedVoltageSupport[]         :    An array of enumerated integers indicating the Vpp voltage supported by this Slot.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Slot'
        self.__parent__ = 'CIM_PhysicalConnector'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Slot__(__BaseClass__, __CIM_Slot__):
    '''DCIM_Slot is a derivation of CIM_Slot which is extended to add the slot occupancy and device correlation information )

Class Properties:
    string DeviceFQDD                       :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the device that occupy the slot. 
    boolean EmptySlot                       :    This property represents whether the slot is not occupied. 
    string NumberDescription                :    A string containing the slot number information 
    uint16 SlotEnabledState                 :    The property represents whether the slot is enabled. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Slot'
        self.__parent__ = 'CIM_Slot'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PhysicalFrame__(__BaseClass__, __CIM_PhysicalPackage__):
    '''PhysicalFrame is a superclass of Rack, Chassis and other frame enclosures, as they are defined in extension classes. Properties like visible or audible alarm, and data related to security breaches are in this superclass. )

Class Properties:
    boolean AudibleAlarm                    :    Boolean indicating whether the Frame is equipped with an audible alarm.
    string BreachDescription                :    BreachDescription is a free-form string providing more information if the SecurityBreach property indicates that a breach or some other security-related event occurred.
    string CableManagementStrategy          :    CableManagementStrategy is a free-form string that contains information on how the various cables are connected and bundled for the Frame. With many networking, storage-related and power cables, cable management can be a complex and challenging endeavor. This string property contains information to aid in assembly and service of the Frame.
    boolean IsLocked                        :    Boolean indicating that the Frame is currently locked.
    boolean LockPresent                     :    Boolean indicating whether the Frame is protected with a lock.
    uint16 SecurityBreach                   :    SecurityBreach is an enumerated, integer-valued property indicating whether a physical breach of the Frame was attempted but unsuccessful (value=4) or attempted and successful (5). Also, the values, Unknown, Other or No Breach, can be specified.
    string ServiceDescriptions[]            :    An array of free-form strings providing more detailed explanations for any of the entries in the Service Philosophy array. Note, each entry of this array is related to the entry in ServicePhilosophy that is located at the same index.
    uint16 ServicePhilosophy[]              :    ServicePhilosophy is an enumerated, integer-valued array that indicates whether the Frame is serviced from the top (value=2), front (3), back (4) or side (5), whether it has sliding trays (6) or removable sides (7), and/or whether the Frame is moveable (8), for example, having rollers.
    boolean VisibleAlarm                    :    Boolean indicating that the equipment includes a visible alarm.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PhysicalFrame'
        self.__parent__ = 'CIM_PhysicalPackage'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PhysicalPackage__(__BaseClass__, __CIM_PhysicalPackage__):
    '''DCIM_PhysicalPackage is a derivation of CIM_PhysicalPackage with Physical Package specific data )

Class Properties:
    string DeviceFQDD                       :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the device. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PhysicalPackage'
        self.__parent__ = 'CIM_PhysicalPackage'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_Chassis__(__BaseClass__, __CIM_PhysicalFrame__):
    '''The Chassis class represents the PhysicalElements that enclose other Elements and provide definable functionality, such as a desktop, processing node, UPS, disk or tape storage, or a combination of these. )

Class Properties:
    uint16 ChassisPackageType               :    ChassisPackageType indicates the physical form factor for the type of Chassis. This property may have a value when the PackageType property contains the value 3 Chassis Frame.\nA value of 28 Blade Enclosure shall indicate the Chassis is designed to contain one or more PhysicalPackage(s) of PackageType 16 Blade or PackageType 17 Blade Expansion. The value, SMBIOS Reserved, is used for types in SMBIOS that do not have a corresponding type in CIM and for better alignment between the values used in CIM and SMBIOS.
    string ChassisTypeDescription           :    A string providing more information on the ChassisPackageType.
    uint16 ChassisTypes[]                   :    The use of this property is deprecated in lieu of ChassisPackageType. A physical package should not have multiple form factors. Therefore, this property is being deprecated in lieu of a single value property. \nAn enumerated, integer-valued array indicating the type of Chassis.
    sint16 CurrentRequiredOrProduced        :    Current required by the Chassis at 120V. If power is provided by the Chassis (as in the case of a UPS), this property may indicate the amperage produced, as a negative number.
    uint16 HeatGeneration                   :    Amount of heat generated by the Chassis in BTU/hour.
    uint16 MultipleSystemSupport            :    MultipleSystemSupport indicates whether or not this chassis supports multiple systems, for example server blades.
    uint16 NumberOfPowerCords               :    Integer indicating the number of power cords which must be connected to the Chassis, for all the componentry to operate.
    uint16 RackMountable                    :    RackMountable indicates whether or not the chassis is Rack Mountable.
    string TypeDescriptions[]               :    The use of this property is deprecated in lieu of a single value property, ChassisTypeDescription. \nAn array of free-form strings providing more information on the ChassisTypes array entries. Note, each entry of this array is related to the entry in ChassisTypes that is located at the same index.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_Chassis'
        self.__parent__ = 'CIM_PhysicalFrame'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_Chassis__(__BaseClass__, __CIM_Chassis__):
    '''

Class Properties:
    uint16 SystemID                         :    This is 3 digit identification number unique to Dell
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_Chassis'
        self.__parent__ = 'CIM_Chassis'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPPrivilege__(__BaseClass__, __CIM_Privilege__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPPrivilege'
        self.__parent__ = 'CIM_Privilege'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRolePrivilege__(__BaseClass__, __CIM_Privilege__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRolePrivilege'
        self.__parent__ = 'CIM_Privilege'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_LogEntry__(__BaseClass__, __CIM_RecordForLog__):
    '''The LogEntry object can describe the definitional format for entries in a Log, or can be used to instantiate the actual entries in the Log. )

Class Properties:
    datetime CreationTimeStamp              :    A LogEntry may include a timestamp for the entry.
    string InstanceID                       :    Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following preferred algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon :, and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (:). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above preferred algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instances NameSpace. \nFor DMTF defined instances, the preferred algorithm MUST be used with the <OrgID> set to CIM.
    string LogInstanceID                    :    The containing Logs InstanceID.
    string LogName                          :    The containing Logs Name. This property is available for backwards continuity with CIM_LogRecord.
    string Message                          :    The formatted message. This message is constructed by combining some or all of the dynamic elements specified in the MessageArguments property with the static elements uniquely identified by the MessageID in a message registry or other catalog associated with the OwningEntity.
    string MessageArguments[]               :    An array containing the dynamic content of the message.\r\nEach DYNAMIC_ELEMENT for the message referred to by the MessageID property shall be contained in MessageArguments whether the DYNAMIC_ELEMENT is included in the Message or not.\r\nIn addition, the entries in MessageArguments need to be in the same order as the DYNAMIC_ELEMENTs.
    string MessageID                        :    A string that uniquely identifies, within the scope of the OwningEntity, the format of the Message.
    string OwningEntity                     :    A string that uniquely identifies the entity that owns the definition of the format of the Message described in this instance. OwningEntity MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity or standards body defining the format.
    string RecordID                         :    RecordID may be used to provide a representation of log entry ordering or pointers/handles for log entries.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_LogEntry'
        self.__parent__ = 'CIM_RecordForLog'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_LCLogEntry__(__BaseClass__, __CIM_LogEntry__):
    '''A class derived from LogEntry to the entries in the LifeCycle Log. )

Class Properties:
    string AgentID                          :    No documentation.
    string Category                         :    Category of the log entry event 
    string Comment                          :    A string that captures user comment, to place notes and to dos on individual events.
    boolean ConfigResultsAvailable          :    A boolean that indicates if the Configuration Results are available (TRUE), or not (FALSE) for the log entry.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string RawEventData                     :    A string that provides the raw event data.
    uint32 SequenceNumber                   :    An integer that provides the sequence number of the log entry.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCLogEntry'
        self.__parent__ = 'CIM_LogEntry'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SELLogEntry__(__BaseClass__, __CIM_LogEntry__):
    '''A class derived from LogEntry to the entries in the System Event Log. )

Class Properties:
    string AgentID                          :    No documentation.
    string Category                         :    Category of the log entry event 
    string Comment                          :    A string that captures user comment, to place notes and to dos on individual events.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SELLogEntry'
        self.__parent__ = 'CIM_LogEntry'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_RegisteredProfile__(__BaseClass__, __CIM_RegisteredSpecification__):
    '''A RegisteredProfile describes a set of CIM Schema classes with required properties and/or methods, necessary to manage a real-world entity or to support a usage scenario, in an interoperable fashion. RegisteredProfiles can be defined by the DMTF or other standards organizations. Note that this class should not be confused with CIM_Profile, which collects SettingData instances, to be applied as a configuration profile for an element. \n A RegisteredProfile is a named standard for CIM-based management of a particular System, subsystem, Service or other entity, for a specified set of uses. It is a complete, standalone definition, as opposed to the subclass RegisteredSubProfile, which requires a scoping profile for context. \n The uses for a RegisteredProfile or SubProfile MUST be specified in the document that defines the profile. Examples of Profiles are to manage various aspects of an Operating System, Storage Array, or Database. The name of the profile is defined and scoped by its authoring organization. )

Class Properties:
    string ImplementedFeatures[]            :    Profiles may gather a set of provisions together that are implemented, (or not implemented), as a whole by a conformant implementation. Such sets are known as profile features.\nIf a profile does not define features, then this property shall be null. \nIf not null, an implementation shall put the profile defined feature name of each implemented feature in a separate entry of this array.
    uint16 SpecificationType                :    If this property has a value other than null, the value shall be 2
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_RegisteredProfile'
        self.__parent__ = 'CIM_RegisteredSpecification'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'getcentralinstances':self.getcentralinstances,
            'pullconformantinstances':self.pullconformantinstances,
            'openconformantinstances':self.openconformantinstances,
            'closeconformantinstances':self.closeconformantinstances,
            }
    def getcentralinstances(self,InputXmlFile=None):
        '''GetCentralInstances will get all the references of the central instances for the profile represented by this instance. If this method completes without an error, it shall return 0, otherwise it shall return an error with zero or more CIM_Error instances.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetCentralInstances',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'GetCentralInstances',{}))
    def pullconformantinstances(self,EndOfSequence=None,InstanceType=None,InputXmlFile=None):
        '''This operation is used to continue enumeration central class instances in the context of a session established by OpenConformantInstances.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    boolean EndOfSequence                   :        The EndOfSequence output parameter indicates to the CIM Client whether the enumeration session is exhausted. If EndOfSequence is true upon successful completion of this method, no more elements are available and the enumeration session shall be closed, releasing any possibly allocated resources related to the enumeration session. If EndOfSequence is false, there may be additional elements available and enumeration session shall be remain open unless there is an error in which case, ContinueOnError governs whether or not the session is closed or not.
    uint16[] InstanceType                   :        On successful completion, an array corresponding to the InstanceWithPathList that indicates whether the entry is a scoping instance, a central instance, or both.

Output Parameters:
    string EnumerationContext               :        The EnumerationContext parameter is the enumeration context value representing the enumeration session to be used.\nOn input, it shall be the EnumerationContext ouput value from the previous invocation of OpenConformantInstances or PullConformantInstances within an open enumeration session.If the session is closed as a result of this invocation, the output EnumerationContext shall be NULL. Otherwise, the output EnumerationContext shall provide the information necessary for a subsequent PullConformantInstances call.
    uint32 MaxObjectCount                   :        The MaxObjectCount input parameter defines the maximum number of elements that may be returned by this method. Any uint32 number is valid, including 0. The implementation may deliver any number of elements up to MaxObjectCount but shall not deliver more than MaxObjectCount elements. The CIM Client may use a MaxObjectCount value of 0 as a means of restarting the OperationTimeout for the enumeration session, while it wishes to not retrieve any elements.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PullConformantInstances',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'PullConformantInstances',{'EndOfSequence': EndOfSequence, 'InstanceType': InstanceType}))
    def openconformantinstances(self,EndOfSequence=None,EnumerationContext=None,InstanceType=None,InputXmlFile=None):
        '''This operation is used to establish and open a session to enumerate central and scoping class instances of this registered profile instance and optionally to retrieve a first set of such instances.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    boolean EndOfSequence                   :        The EndOfSequence output parameter indicates to the CIM Client whether the enumeration session is exhausted. If EndOfSequence is true upon successful completion of this invocation, no more elements are available and the implmeentation shall close the enumeration session, releasing any possibly allocated resources related to the enumeration session. If EndOfSequence is false, there may be additional elements available and implementation shall not close the enumeration session.
    string EnumerationContext               :        The EnumerationContext parameter is the enumeration context value representing the enumeration session to be used.\nIf the session is closed as a result of this invocation, the output EnumerationContext shall be NULL. Otherwise, the output EnumerationContext shall provide the information necessary for a subsequent PullConformantInstances call.
    uint16[] InstanceType                   :        On successful completion, an array corresponding to the InstanceWithPathList that indicates whether the entry is a scoping instance, a central instance, or both.

Output Parameters:
    string[] IncludedPropertyList           :        NULL, or unordered set of property names, acting as a restricting filter on the properties included in the returned instance. An empty list specifies to return no properties. The instance path shall always be returned.
    string ResultClass                      :        NULL, or a class name that acts as a filter to select only those central or scoping instances that a kind of the specified class. This is useful to select particular subclasses or to select a particular instances when more than one is defined for a profile.
    boolean ContinueOnError                 :        TRUE requests continuation on error. Continuation on error is the ability to resume an enumeration session successfully after an invocation of this method that returned an error. A conformant implementation may support continuation on error.\nIf ContinueOnError is true and the method does not support continuation on error, it shall return failure with return code CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED \nIf the implementation supports continuation on error, it shall support it as follows: If ContinueOnErroris true, the enumeration session shall remain open when this or a subsequent PullConformantInstances invocation returns failure, and any subsequent successful PullConformantInstances operations process the set of instances that would have remained if the failing invocation had been successful, subject to the consistency rules defined for pulled enumerations, see DSP0223.\nIf ContinueOnError is false, the enumeration session shall be closed when this method returns failure.
    uint32 MaxObjectCount                   :        The MaxObjectCount input parameter defines the maximum number of elements that may be returned by this Pull operation. Any uint32 number is valid, including 0. The implementation may deliver any number of elements up to MaxObjectCount but shall not deliver more than MaxObjectCount.elements. The CIM Client may use a MaxObjectCount value of 0 as a means of restarting the OperationTimeout for the enumeration session, while it wishes to not retrieve any elements.
    uint32 OperationTimeout                 :        The operation timeout is the minimum time the CIM Server shall maintain the open enumeration session after the last OpenConformantInstances or PullConformantInstances invocation, (unless the enumeration session was closed during that last invocation). If the operation timeout is exceeded, the enumeration session may be closed at any time, releasing any possibly allocated resources related to the enumeration session. \nAn OperationTimeout of 0 means that there is no operation timeout, i.e. the enumeration session is never closed based on time.\nIf OperationTimeout is NULL, the operation timeout is implementation dependent. \nAll other values for OperationTimeout specify the operation timeout in seconds.\nThe implementation may restrict the set of allowable values for OperationTimeout. This specifically includes the possibility to not allow 0 (no timeout).\nIf the specified value is not an allowable value, the method shall return failure with return code CIM_ERR_INVALID_OPERATION_TIMEOUT.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'OpenConformantInstances',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'OpenConformantInstances',{'EnumerationContext': EnumerationContext, 'EndOfSequence': EndOfSequence, 'InstanceType': InstanceType}))
    def closeconformantinstances(self,InputXmlFile=None):
        '''This operation is used to close a session to enumerate central and scoping class instances.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CloseConformantInstances',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'CloseConformantInstances',{}))
class __DCIM_LCRegisteredProfile__(__BaseClass__, __CIM_RegisteredProfile__):
    '''

Class Properties:
    string ProfileRequireLicenseStatus[]    :    This property contains the installed status of license bits 	listed in ProfileRequireLicense property, each element in 	the array either contains a value of LICENSED or 	NOT_LICENSED
    string ProfileRequireLicense[]          :    This property contains the list of license bits required by 	this profile to enable all functionality in the profile.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LCRegisteredProfile'
        self.__parent__ = 'CIM_RegisteredProfile'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_RegisteredProfile__(__BaseClass__, __CIM_RegisteredProfile__):
    '''

Class Properties:
    string ProfileRequireLicenseStatus[]    :    This property contains the installed status of license bits 	listed in ProfileRequireLicense property, each element in 	the array either contains a value of LICENSED or 	NOT_LICENSED
    string ProfileRequireLicense[]          :    This property contains the list of license bits required by 	this profile to enable all functionality in the profile.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RegisteredProfile'
        self.__parent__ = 'CIM_RegisteredProfile'
        self.__cimns__ = 'root/interop'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_BootConfigSetting__(__BaseClass__, __CIM_SettingData__):
    '''A class derived from SettingData that provides the container to arrange all the BootSourceSetting instances in an ordered sequence. There can be one or more of the BootConfigSetting instances associated to a ComputerSystem. For example, one such BootConfigSetting could be a default boot configuration supplied by the manufacturer, a second one could be a configuration recommended by the IT Administrator. A third one could be the one actually to be used on next system boot. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BootConfigSetting'
        self.__parent__ = 'CIM_SettingData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'validatesettings':self.validatesettings,
            'changebootorder':self.changebootorder,
            }
    def validatesettings(self,InputXmlFile=None):
        '''This method validates all settings associated with the BootConfigSetting. This is to make sure that all the settings of the newly created BootConfigSetting are consistent with the system configuration. This method returns True or False. True would only mean that the instrumentation has made a consistency check based on its current knowledge of the system, and does not actually guarantee the success of boot process.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ValidateSettings',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ValidateSettings',{}))
    def changebootorder(self,Source=None,InputXmlFile=None):
        '''This method is called to change the boot order within a boot configuration. An ordered array of BootSourceSetting instances is passed to this method. Each BootSourceSetting instance MUST already be associated with this BootConfigSetting instance via an instance of OrderedComponent. If not, the implementation MUST return a value of Invalid Parameter Upon execution of this method, the value of the AssignedSequence property on each instance of OrderedComponent will be updated such that the values are monotonically increasing in correlation with the position of the referenced BootSourceSetting instance in the source input parameter. That is, the first position in the array will have the lowest value for AssignedSequence. The second position will have the second lowest value, and so on. For BootSourceSetting instances which are associated with the BootConfigSetting instance via OrderedComponent and not present in the input array, the AssignedSequence property on the OrderedComponent association will be assigned a value of 0.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_BootSourceSetting REF[] Source      :        An ordered array of BootSourceSettings.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootOrder',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootOrder',{'Source': Source}))
class __CIM_BootSourceSetting__(__BaseClass__, __CIM_SettingData__):
    '''A class derived from SettingData that provides the information necessary to describe a boot source. This may be optionally associated to a bootable logical device, such as a hard disk partition, or a network device. The information from this class instance is used by the boot manager, such as BIOS/EFI or OS Loader to initiate the boot process, when this instance appears in a BootConfigSetting collection. )

Class Properties:
    string BIOSBootString                   :    A string identifying the boot source which corresponds to the string used by the BIOS to uniquely name the boot source. For example, in systems which implement the BIOS Boot Specification, the string could correspond to the descString string for entries in the IPL Table or BCV Table.
    string BootString                       :    A string identifying the boot source. It is typically used by the instrumentation to pass to the boot manager as a selection string. This could be a string identifying the bootable device, such as CDROM 1, or could be an implementation specific address of a bootable partition, such as the following. fd(64)unix root=hd(40) swap=hd(41), or multi(0)disk(0)rdisk(0)partition(1)\\WINDOWS=Microsoft Windows XP Professional.
    uint16 FailThroughSupported             :    An enumeration indicating the behavior when the attempt to boot using the boot source fails (no media, timeout). The current values in the enumeration are: \n0 = Unknown \n1 = Is Supported \n2 = Is Not Supported. \nA value of 1 (Is Supported) indicates that next boot source the boot order is used. A value of 2 (Is Not Supported) indicates that the boot order is terminated and no other boot sources associated to the same CIM_BootConfigSetting are used). The default is 1 (Is Supported)
    string StructuredBootString             :    A string identifying the boot source using the format <OrgID>:<identifier>:<index>, in which neither <OrgID>, <identifier> or <index> contains a colon (:). The value of <OrgID> is a copyrighted, trademarked or otherwise unique name that is owned by the entity defining the <identifier>, or is a registered ID that is assigned to the entity by a recognized global authority. For DMTF defined identifiers, the <OrgID> is set to CIM. The <identifiers> are Floppy, Hard-Disk, CD/DVD, Network, PCMCIA, USB. The value of <index> shall be a non-zero integer.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_BootSourceSetting'
        self.__parent__ = 'CIM_SettingData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_IPAssignmentSettingData__(__BaseClass__, __CIM_SettingData__):
    '''This class and its sub-classes represents Internet Protocol (IP) related settings. When used as an accumulation of settings (AddressOrigin set to 11 cumulative configuration ), this SettingData instance is the aggregation point identifying an IP configuration. Multiple IP configurations could exist for a target. Each configuration is represented with an instance of IPAssignmentSettingData. The details of the IP configuration are defined by instances of sub-classes of this class (i.e. StaticIPAssignmentSettingData, DHCPSettingData, DNSSettingData). These instances are associated with the IPAssignmentSettingData instance using the OrderedComponent or ConcreteComponent associations. For example, a static IP configuration would be represented by an instance of IPAssignmentSettingData and an instance of StaticIPAssignmentSettingData associated via an instance of ConcreteComponent. A static IP configuration including DNS would be modeled using an instance of IPAssignmentSettingData, DNSSettingData, and StaticIPAssignmentSettingData. The DNSSettingData and StaticIPAssignmentSettingData instance would be associated with the IPAssignmentSettingData using instances of ConcreteComponent. )

Class Properties:
    uint16 AddressOrigin = 0                :    AddressOrigin identifies the method by which the IP Address, Subnet Mask for IPv4 or Prefix Length for IPv6, and Gateway shall be assigned to the IPProtocolEndpoint. \nA value of 3 Static shall indicate the values will be assigned manually. \nA value of 4 DHCP shall indicate the values will be assigned utilizing the Dynamic Host Configuration Protocol. See RFC 2131 and related. \nA value of 5 BOOTP shall indicate the values will be assigned utilizing BOOTP. See RFC 951 and related. \nA value of 6 IPv4 Link Local shall indicate the values will be assigned using the IPv4 Link Local protocol. See RFC 3927.\nA value of 7 DHCPv6 shall indicate the values will be assigned using DHCPv6. See RFC 3315. \nA value of 8 IPv6 AutoConfig  shall indicate the values will be assigned using the IPv6 AutoConfig. See RFC 4862. \nA value of 9 Stateless shall indicate Stateless will be assigned. \nA value of 10 Link Local shall indicate Link Local values will be assigned.\nA value of 11 cumulative configuration shall indicate an accumulation of settings is used. This instance of CIM_IPAssignmentSettingData should be associated with other instances of CIM_IPAssignmentSettingData or its subclasses to represent the detailed IP settings.
    uint16 ProtocolIFType                   :    An enumeration that describes the IP version.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_IPAssignmentSettingData'
        self.__parent__ = 'CIM_SettingData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_BootConfigSetting__(__BaseClass__, __CIM_BootConfigSetting__):
    '''DCIM_BootConfigSetting is a derivation of CIM_BootConfigSetting. )

Class Properties:
    uint8 IsCurrent                         :    An enumerated integer that indicates that the referenced config is a current config or that this information is unknown.
    uint8 IsDefault                         :    An enumerated integer that indicates that the referenced config is a default config or that this information is unknown.
    uint8 IsNext                            :    An enumerated integer indicating whether or not the referenced setting is the next setting to be applied. For example, the application could take place on a re-initialization, reset, reconfiguration request. This could be a permanent setting, or a setting used only one time, as indicated by the flag. If it is a permanent setting then the setting is applied every time the managed element reinitializes, until this flag is manually reset. However, if it is single use, then the flag is automatically cleared after the settings are applied. Also note that if this flag is specified (i.e. set to value other than Unknown), then this takes precedence over any SettingData that may have been specified as Default. For example: If the managed element is a computer system, and the value of this flag is Is Next, then the setting will be effective next time the system resets. And, unless this flag is changed, it will persist for subsequent system resets. However, if this flag is set to Is Next For Single Use, then this setting will only be used once and the flag would be reset after that to Is Not Next. So, in the above example, if the system reboots in a quick succession, the setting will not be used at the second reboot.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BootConfigSetting'
        self.__parent__ = 'CIM_BootConfigSetting'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'changebootorderbyinstanceid':self.changebootorderbyinstanceid,
            'changebootsourcestate':self.changebootsourcestate,
            }
    def changebootorderbyinstanceid(self,source=None,Job=None,InputXmlFile=None):
        '''This method is called to change the boot order of boot sources within a configuration. source is an ordered array of InstanceID of BootSourceSetting instances

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] source                         :        An ordered array of BootSourceSettings.InstanceID
    CIM_ConcreteJob REF Job                 :        Reference to the job spawned if the operation continues after the method returns. (May be null if the task is completed).

Output Parameters:
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootOrderByInstanceID',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootOrderByInstanceID',{'source': source, 'Job': Job}))
    def changebootsourcestate(self,source=None,EnabledState=None,Job=None,InputXmlFile=None):
        '''This method is called to change the enabled status of BootSourceSetting instances to Disable or Enable source is an array of InstanceID of BootSourceSetting instances

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    string[] source                         :        An array of BootSourceSetting.InstanceID
    uint8 EnabledState                      :        A value of 0 will disable all the boot sources in source array. A value of 1 will enable all the boot sources in source array. 
    CIM_ConcreteJob REF Job                 :        Reference to the job spawned if the operation continues after the method returns. (May be null if the task is completed).

Output Parameters:
    string[] Message                        :        Error Message in english corresponding to the MessageID
    string[] MessageID                      :        Error MessageID is returned if the method fails to execute.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootSourceState',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ChangeBootSourceState',{'source': source, 'EnabledState': EnabledState, 'Job': Job}))
class __DCIM_BootSourceSetting__(__BaseClass__, __CIM_BootSourceSetting__):
    '''DCIM_BootSourceSetting is a derivation of CIM_BootSourceSetting. )

Class Properties:
    string BootSourceType                   :    ParentType of this boot source
    uint8 CurrentAssignedSequence           :    Current assigned sequence of this boot source in the ordered list.
    uint8 CurrentEnabledStatus              :    Current status of this boot source
    uint8 PendingAssignedSequence           :    Pending assigned sequence of this boot source in the ordered list.
    uint8 PendingEnabledStatus              :    Pending status of this boot source
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BootSourceSetting'
        self.__parent__ = 'CIM_BootSourceSetting'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_DNSSettingData__(__BaseClass__, __CIM_IPAssignmentSettingData__):
    '''DNSSettingData defines the DNSconfiguration settings for a single IP network connection. With the exception of the the DNSServerAddresses and the hostname in use, the configuration of a DNSProtocolEndpoint is indicated by the properties of an associated instance of DNSSettingData. )

Class Properties:
    uint16 AddressOrigin = 2                :    AddressOrigin identifies the method by which the IP Address, Subnet Mask, and Gateway were assigned to the IPProtocolEndpoint. This is independent of the DNS configuration, thus this property has the value of 2 (Not Applicable)
    uint16 DHCPOptionsToUse[]               :    One or more DHCP options that the DNS client should utilise if they are returned during a DHCP bind operation.
    string DNSServerAddresses[]             :    The DNS servers to contact. The array ordering correlates to the order in which the DNS servers will be contacted. The RemoteServiceAccessPoints associated with the DNSProtocolEndpoint with the value of the AccessContext property being DNS Server represent the actual DNS Servers being utilized by the DNS client.
    string DomainName                       :    The domain to use for this client connection.
    boolean RegisterThisConnectionsAddress  :    Whether or not this connections address should be registered in DNS.
    string RequestedHostname                :    The Hostname requested for this client connection.
    boolean UseSuffixWhenRegistering        :    Whether or not the suffix should be appended before registering the client name with the DNS server.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_DNSSettingData'
        self.__parent__ = 'CIM_IPAssignmentSettingData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_DNSSettingData__(__BaseClass__, __CIM_DNSSettingData__):
    '''DCIM_DNSSettingData is a derivation of CIM_DNSSettingData. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_DNSSettingData'
        self.__parent__ = 'CIM_DNSSettingData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCStatistics__(__BaseClass__, __CIM_StatisticalData__):
    '''The DCIM_FCStatistics represents the statistics of the Fiber Channel HBA port. )

Class Properties:
    uint32 FCInvalidCRCs                    :    Invalid CRCs.
    uint32 FCLinkFailures                   :    Counts the number of Link failures.
    uint32 FCLossOfSignals                  :    Loss of Signals.
    uint32 FCRxKBCount                      :    Receive KB Count
    uint32 FCRxSequences                    :    FC Sequences Received
    uint32 FCRxTotalFrames                  :    Total FC Frames Received
    uint32 FCTxKBCount                      :    Transmit KB Count
    uint32 FCTxSequences                    :    FC Sequences Transmitted
    uint32 FCTxTotalFrames                  :    Total FC Frames Transmitted
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string InstanceID                       :    No documentation.
    uint8 OSDriverState                     :    Indicates OS driver states.
    uint16 PortSpeed                        :    Port Speed
    uint8 PortStatus                        :    Indicates Port Status
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCStatistics'
        self.__parent__ = 'CIM_StatisticalData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICStatistics__(__BaseClass__, __CIM_StatisticalData__):
    '''The DCIM_NICStatistics represents the statistics of the NIC, NIC port or partition. )

Class Properties:
    uint32 DiscardedPkts                    :    Counts the total number of discarded packets.
    uint32 FCCRCErrorCount                  :    Counts the number of FC frames with CRC errors.
    uint32 FCOELinkFailures                 :    Counts the number of FCoE/FIP Login failures.
    uint64 FCOEPktRxCount                   :    Counts the number of good (FCS valid) packets received with the partitions active FCoE MAC address.
    uint64 FCOEPktTxCount                   :    Counts the number of good (FCS valid) packets transmitted that passed L2 filtering by a specific MAC address.
    uint32 FCOERxPktDroppedCount            :    Counts the number of receive packets with FCS errors.
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string InstanceID                       :    No documentation.
    uint8 LinkStatus                        :    Indicates whether the link is up or down.
    uint8 OSDriverState                     :    Indicates OS driver states.
    uint8 PartitionLinkStatus               :    Indicates whether the partition link is up or down.
    uint8 PartitionOSDriverState            :    Indicates partitions OS driver states.
    uint64 RDMARxTotalBytes                 :    Counts the total number of RDMA bytes recieved 
    uint64 RDMARxTotalPackets               :    Counts the total number of RDMA packets recieved 
    uint32 RDMATotalProtectionErrors        :    Counts the total number of RDMA Protection errors
    uint32 RDMATotalProtocolErrors          :    Counts the total number of RDMA protocol errors
    uint64 RDMATxTotalBytes                 :    Counts the total number of RDMA bytes transmitted 
    uint64 RDMATxTotalPackets               :    Counts the total number of RDMA packets transmitted  
    uint64 RDMATxTotalReadReqPkts           :    Counts the total number of RDMA ReadRequest packets transmitted 
    uint64 RDMATxTotalSendPkts              :    Counts the total number of RDMA Send packets transmitted 
    uint64 RDMATxTotalWritePkts             :    Counts the total number of RDMA Write packets transmitted 
    uint64 RxBroadcast                      :    Counts the total number of good broadcast packets received.
    uint64 RxBytes                          :    Counts the total number of bytes received, including host and remote management pass through traffic (remote management pass through traffic is applicable to LOMs only).
    uint32 RxErrorPktAlignmentErrors        :    Counts the total number of packets received with alignment errors.
    uint32 RxErrorPktFCSErrors              :    Counts the total number of packets received with FCS errors.
    uint32 RxFalseCarrierDetection          :    Counts the total number of false carrier errors received from PHY.
    uint32 RxJabberPkt                      :    Counts the total number of frames that are too long.
    uint64 RxMutlicast                      :    Counts the total number of good multicast packets transmitted.
    uint32 RxPauseXOFFFrames                :    Counts the flow control frames from the network to pause transmission.
    uint32 RxPauseXONFrames                 :    Counts the flow control frames from the network to resume transmission.
    uint32 RxRuntPkt                        :    Counts the total number of frames that are too short (< 64 bytes).
    uint64 RxUnicast                        :    Counts the total number of good unicast packets transmitted.
    datetime StartStatisticTime             :    The time when the first NIC statistic measurements were taken.
    datetime StatisticTime                  :    The time the most recent NIC statistic measurements were taken.
    uint64 TxBroadcast                      :    Counts the total number of good broadcast packets transmitted.
    uint64 TxBytes                          :    Counts the total number of bytes transmitted, including host and remote management pass through traffic (remote management pass through traffic is applicable to LOMs only).
    uint32 TxErrorPktExcessiveCollision     :    Counts the number of times that 16 or more collisions occurred on a single transmit packet.
    uint32 TxErrorPktLateCollision          :    Counts the number of collisions that occurred after one slot time (defined by IEEE 802.3).
    uint32 TxErrorPktMultipleCollision      :    Counts the number of times that a transmitted packet encountered more than one collision but fewer than 16.
    uint32 TxErrorPktSingleCollision        :    Counts the number of times that a successfully transmitted packet encountered a single collision.
    uint64 TxMutlicast                      :    Counts the total number of good multicast packets transmitted.
    uint32 TxPauseXOFFFrames                :    Counts the number of XOFF packets transmitted to the network.
    uint32 TxPauseXONFrames                 :    Counts the number of XON packets transmitted to the network.
    uint64 TxUnicast                        :     Counts the total number of good unicast packets transmitted.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICStatistics'
        self.__parent__ = 'CIM_StatisticalData'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __CIM_PhysicalComputerSystemView__(__BaseClass__, __CIM_View__):
    '''This class defines a view class for a physical computer system. )

Class Properties:
    uint16 CurrentBIOSBuildNumber           :    The build number component of the current BIOS version information.
    uint16 CurrentBIOSMajorVersion          :    The major number component of the current BIOS version information.
    uint16 CurrentBIOSMinorVersion          :    The minor number component of the current BIOS version information.
    uint16 CurrentBIOSRevisionNumber        :    The revision number component of the current BIOS version information.
    string CurrentBIOSVersionString         :    The BIOS version information in string format.
    uint16 CurrentManagementFirmwareBuildNumber:    The build number component of the version information for the current management firmware on this physical computer system.
    string CurrentManagementFirmwareElementName:    The user-friendly name for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareMajorVersion:    The major number component of the version information for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareMinorVersion:    The minor number component of the version information for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareRevisionNumber:    The revision number component of the version information for the current management firmware on this physical computer system.
    string CurrentManagementFirmwareVersionString:    The version string for the current management firmware on this physical computer system.
    uint16 Dedicated[]                      :    See CIM_ComputerSystem.Dedicated for details.
    uint16 EnabledState                     :    This property corresponds to the EnabledState property of the logical computer system represented by CIM_ComputerSystem. See CIM_EnabledLogicalElement.EnabledState for details on EnabledState.
    boolean FRUInfoSupported                :    This property indicates the availability of the FRU Information on this physical computer system. See CIM_PhysicalAssetCapabilities.FRUInfoSupported for details.
    uint16 HealthState                      :    This property corresponds to the HealthState property of the logical computer system represented by CIM_ComputerSystem. See CIM_ManagedSystemElement.HealthState for details.
    string IdentifyingDescriptions[]        :    See CIM_System.IdentifyingDescriptions for details.
    string InstanceID                       :    InstanceID is the property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace.
    uint64 LogCurrentNumberOfRecords[]      :    See CIM_RecordLog.CurrentNumberOfRecords for details.
    string LogInstanceID[]                  :    This property represents the identifiers for the underlying logs on this physical computer system. See CIM_RecordLog.InstanceID for details.
    uint64 LogMaxNumberOfRecords[]          :    See CIM_RecordLog.MaxNumberOfRecords for details.
    uint16 LogOverWritePolicy[]             :    See CIM_RecordLog.OverWritePolicy for details.
    uint16 LogState[]                       :    See CIM_RecordLog.LogState for details.
    string Manufacturer                     :    This property corresponds to CIM_PhysicalFrame.Manufacturer. See CIM_PhysicalFrame.Manufacturer for details.
    uint64 MemoryBlockSize                  :    See CIM_Memory.BlockSize for details.
    uint64 MemoryConsumableBlocks           :    See CIM_Memory.ConsumableBlocks for details.
    uint64 MemoryNumberOfBlocks             :    See CIM_Memory.NumberOfBlocks for details.
    string Model                            :    This property corresponds to CIM_PhysicalFrame.Model. See CIM_PhysicalFrame.Model for details.
    uint16 NumberOfProcessorCores           :    See CIM_ProcessorCapabilities.NumberOfProcessorCores for details.
    uint16 NumberOfProcessorThreads         :    See CIM_ProcessorCapabilities.NumberOfProcessorThreads for details.
    uint16 NumberOfProcessors               :    This property identifies the number of processors on this physical computer system.
    uint16 NumericSensorBaseUnits[]         :    Base units of the values returned by the numeric sensors. See CIM_NumericSensor.BaseUnits for details.
    string NumericSensorContext[]           :    See CIM_Sensor.SensorContext for details.
    sint32 NumericSensorCurrentReading[]    :    See CIM_NumericSensor.CurrentReading for details.
    string NumericSensorCurrentState[]      :    Current states of numeric sensors. See CIM_NumericSensor.CurrentState for details.
    string NumericSensorElementName[]       :    User-friendly names of the numeric sensors on the computer system. See CIM_NumericSensor.ElementName for details.
    uint16 NumericSensorEnabledState[]      :    States of numeric sensors. See CIM_NumericSensor.EnabledState for details.
    uint16 NumericSensorHealthState[]       :    Health states of numeric sensors. See CIM_NumericSensor.HealthState for details.
    sint32 NumericSensorLowerThresholdCritical[]:    See CIM_NumericSensor.LowerThresholdCritical description for details.
    sint32 NumericSensorLowerThresholdFatal[]:    See CIM_NumericSensor.LowerThresholdFatal description for details.
    sint32 NumericSensorLowerThresholdNonCritical[]:    See CIM_NumericSensor.LowerThresholdNonCritical for details.
    string NumericSensorOtherSensorTypeDescription[]:    See CIM_NumericSensor.OtherSensorTypeDescription for details.
    uint16 NumericSensorPrimaryStatus[]     :    Primary statuses of numeric sensors. See CIM_NumericSensor.PrimaryStatus for details.
    uint16 NumericSensorRateUnits[]         :    See CIM_NumericSensor.RateUnits for details.
    uint16 NumericSensorSensorType[]        :    See CIM_NumericSensor.SensorType for details.
    sint32 NumericSensorUnitModifier[]      :    Unit modifiers for the values returned by the numeric sensors. See CIM_NumericSensor.UnitModifier description for details.
    sint32 NumericSensorUpperThresholdCritical[]:    See CIM_NumericSensor.UpperThresholdCritical description for details.
    sint32 NumericSensorUpperThresholdFatal[]:    See CIM_NumericSensor.UpperThresholdFatal for details.
    sint32 NumericSensorUpperThresholdNonCritical[]:    See CIM_NumericSensor.UpperThresholdNonCritical for details.
    uint16 OSEnabledState                   :    EnabledState of the current or last running operating system on this physcial computer system.
    uint16 OSType                           :    Type information of the current or last running operating system on this physical computer system. See CIM_OperatingSystem.OSType for details.
    string OSVersion                        :    Version information of the current or last running operating system on this physical computer system. See CIM_OperatingSystem.Version for details.
    uint8 OneTimeBootSource                 :    This property identifies the boot source that is used for the next one-time boot. The value of this property is an index referencing an element in the array of StructuredBootString.
    uint16 OperationalStatus[]              :    This property corresponds to the OperationalStatus property of the logical computer system represented by CIM_ComputerSystem. See CIM_ManagedSystemElement.OperationalStatus Description for details.
    string OtherDedicatedDescriptions[]     :    See CIM_ComputerSystem.OtherDedicatedDescriptions for details.
    string OtherIdentifyingInfo[]           :    See CIM_System.OtherIdentifyingInfo for details.
    string PartNumber                       :    This property corresponds to CIM_PhysicalFrame.PartNumber. See CIM_PhysicalFrame.PartNumber for details.
    uint8 PersistentBootConfigOrder[]       :    An array of elements identifying the boot order of the persistent boot configuration that shall be used during the next boot of the computer system, unless the OneTimeBootSource for the next boot is specified. The value of each element in this array is an index referencing an element in the array of StructuredBootString.
    uint64 PowerAllocationLimit             :    This property corresponds to CIM_PowerAllocationSettingData.Limit. See CIM_PowerAllocationSettingData.Limit for details.
    uint16 PowerUtilizationMode             :    This property corresponds to the PowerUtilizationMode of the CIM_PowerUtilizationManagementService. See CIM_PowerUtilizationManagementService.PowerUtilizationMode for details.
    uint16 PowerUtilizationModesSupported[] :    This property corresponds to PowerUtilizationModesSupported property of CIM_PowerUtilizationManagementCapabilities. See CIM_PowerUtilizationManagementCapabilities.PowerUtilizationModesSupported for details.
    uint32 ProcessorCurrentClockSpeed       :    See CIM_Processor.CurrentClockSpeed for details.
    uint16 ProcessorFamily                  :    See CIM_Processor.Family for details.
    uint32 ProcessorMaxClockSpeed           :    See CIM_Processor.MaxClockSpeed for details.
    uint16 RequestedState                   :    This property corresponds to the RequestedState property of the logical computer system represented by CIM_ComputerSystem. See CIM_EnabledLogicalElement.RequestedState for details on RequestedState.
    string SKU                              :    This property corresponds to CIM_PhysicalFrame.SKU. See CIM_PhysicalFrame.SKU for details.
    string SerialNumber                     :    This property corresponds to CIM_PhysicalFrame.SerialNumber. See CIM_PhysicalFrame.SerialNumber for details.
    string StructuredBootString[]           :    Strings identifying the boot sources on this physical computer system. See CIM_BootSourceSetting.StructuredBootString description for details.
    string Tag                              :    This property corresponds to CIM_PhysicalFrame.Tag. See CIM_PhysicalFrame.Tag for details.
    string Version                          :    This property corresponds to CIM_PhysicalFrame.Version. See CIM_PhysicalFrame.Version for details.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_PhysicalComputerSystemView'
        self.__parent__ = 'CIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            'modifypersistentbootconfigorder':self.modifypersistentbootconfigorder,
            'clearlog':self.clearlog,
            'setonetimebootsource':self.setonetimebootsource,
            'installsoftwarefromuri':self.installsoftwarefromuri,
            }
    def requeststatechange(self,Job=None,InputXmlFile=None):
        '''An extrinsic method for changing the state of this physical computer system. Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost.\n A return code of 0 shall indicate the state change was successfully initiated.\n A return code of 1 shall indicate that the method is not supported. A return code of 2 shall indicate that the method failed.\n A return code of 4096 shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ConcreteJob REF Job                 :        May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.

Output Parameters:
    uint16 RequestedState                   :        See CIM_ComputerSystem.RequestedStateChange.RequestedState for details.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'Job': Job}))
    def modifypersistentbootconfigorder(self,InputXmlFile=None):
        '''This method is used to change the order of boot sources for the persistent boot configuration specified by the property CIM_PhysicalComputerSystemView.PersistentBootConfigOrder.

Output Parameters:
    string[] StructuredBootString           :        An ordered array of strings representing the order of boot sources.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPersistentBootConfigOrder',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPersistentBootConfigOrder',{}))
    def clearlog(self,InputXmlFile=None):
        '''An extrinsic method for clearing a log on this physical computer system.\n Requests that the Log be cleared of all entries.\n The return value shall be 0 if the request was successfully executed, 1 if the request is not supported, and 2 if an error occurred. A return code of 4096 shall indicate the request to clear log was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',{}))
    def setonetimebootsource(self,InputXmlFile=None):
        '''This method is used to set the one time boot source for the next boot on this computer system.

Output Parameters:
    string StructuredBootString             :        A string representing the boot source for next boot.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetOneTimeBootSource',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetOneTimeBootSource',{}))
    def installsoftwarefromuri(self,Job=None,InputXmlFile=None):
        '''An extrinsic method for installing software on this physical computer system. If 0 is returned, the function completed successfully and no ConcreteJob instance was required. The return value shall be 1 if the request is not supported, and 2 if an error occurred. If 4096 is returned, a ConcreteJob will be started to to perform the install. The Job s reference will be returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ConcreteJob REF Job                 :        Reference to the job (may be null if job completed).

Output Parameters:
    uint16[] InstallOptions                 :        See CIM_SoftwareInstallationService.InstallFromURI.InstallOptions for details.
    uint16[] Classifications                :        See CIM_SoftwareIdentity.Classifications for details.
    string URI                              :        See CIM_SoftwareInstallationService.InstallFromURI.URI for details.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallSoftwareFromURI',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallSoftwareFromURI',{'Job': Job}))
class __DCIM_View__(__BaseClass__, __CIM_View__):
    '''DCIM_View is a derivation of CIM_View. )

Class Properties:
    string LastSystemInventoryTime          :    This property provides the last time System Inventory Collection On Reboot(CSIOR) was performed. The value is represented as yyyymmddHHMMSS 
    string LastUpdateTime                   :    This property provides the last time the data was updaed. The value is represented as yyyymmddHHMMSS 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_View'
        self.__parent__ = 'CIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PhysicalComputerSystemView__(__BaseClass__, __CIM_PhysicalComputerSystemView__):
    '''This class defines a view class for a physical computer system. )

Class Properties:
    uint16 CurrentBIOSBuildNumber           :    The build number component of the current BIOS version information.
    uint16 CurrentBIOSMajorVersion          :    The major number component of the current BIOS version information.
    uint16 CurrentBIOSMinorVersion          :    The minor number component of the current BIOS version information.
    uint16 CurrentBIOSRevisionNumber        :    The revision number component of the current BIOS version information.
    string CurrentBIOSVersionString         :    The BIOS version information in string format.
    uint16 CurrentManagementFirmwareBuildNumber:    The build number component of the version information for the current management firmware on this physical computer system.
    string CurrentManagementFirmwareElementName:    The user-friendly name for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareMajorVersion:    The major number component of the version information for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareMinorVersion:    The minor number component of the version information for the current management firmware on this physical computer system.
    uint16 CurrentManagementFirmwareRevisionNumber:    The revision number component of the version information for the current management firmware on this physical computer system.
    string CurrentManagementFirmwareVersionString:    The version string for the current management firmware on this physical computer system.
    uint16 Dedicated[]                      :    See CIM_ComputerSystem.Dedicated for details.
    uint16 EnabledState                     :    This property corresponds to the EnabledState property of the logical computer system represented by CIM_ComputerSystem. See CIM_EnabledLogicalElement.EnabledState for details on EnabledState.
    boolean FRUInfoSupported                :    This property indicates the availability of the FRU Information on this physical computer system. See CIM_PhysicalAssetCapabilities.FRUInfoSupported for details.
    uint16 HealthState                      :    This property corresponds to the HealthState property of the logical computer system represented by CIM_ComputerSystem. See CIM_ManagedSystemElement.HealthState for details.
    string IdentifyingDescriptions[]        :    See CIM_System.IdentifyingDescriptions for details.
    string InstanceID                       :    InstanceID is the property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace.
    uint64 LogCurrentNumberOfRecords[]      :    See CIM_RecordLog.CurrentNumberOfRecords for details.
    string LogInstanceID[]                  :    This property represents the identifiers for the underlying logs on this physical computer system. See CIM_RecordLog.InstanceID for details.
    uint64 LogMaxNumberOfRecords[]          :    See CIM_RecordLog.MaxNumberOfRecords for details.
    uint16 LogOverWritePolicy[]             :    See CIM_RecordLog.OverWritePolicy for details.
    uint16 LogState[]                       :    See CIM_RecordLog.LogState for details.
    string Manufacturer                     :    This property corresponds to CIM_PhysicalFrame.Manufacturer. See CIM_PhysicalFrame.Manufacturer for details.
    uint64 MemoryBlockSize                  :    See CIM_Memory.BlockSize for details.
    uint64 MemoryConsumableBlocks           :    See CIM_Memory.ConsumableBlocks for details.
    uint64 MemoryNumberOfBlocks             :    See CIM_Memory.NumberOfBlocks for details.
    string Model                            :    This property corresponds to CIM_PhysicalFrame.Model. See CIM_PhysicalFrame.Model for details.
    uint16 NumberOfProcessorCores[]         :    See CIM_ProcessorCapabilities.NumberOfProcessorCores for details.
    uint16 NumberOfProcessorThreads[]       :    See CIM_ProcessorCapabilities.NumberOfProcessorThreads for details.
    uint16 NumberOfProcessors[]             :    This property identifies the number of processors on this physical computer system.
    uint16 NumericSensorBaseUnits[]         :    Base units of the values returned by the numeric sensors. See CIM_NumericSensor.BaseUnits for details.
    string NumericSensorContext[]           :    See CIM_Sensor.SensorContext for details.
    sint32 NumericSensorCurrentReading[]    :    See CIM_NumericSensor.CurrentReading for details.
    string NumericSensorCurrentState[]      :    Current states of numeric sensors. See CIM_NumericSensor.CurrentState for details.
    string NumericSensorElementName[]       :    User-friendly names of the numeric sensors on the computer system. See CIM_NumericSensor.ElementName for details.
    uint16 NumericSensorEnabledState[]      :    States of numeric sensors. See CIM_NumericSensor.EnabledState for details.
    uint16 NumericSensorHealthState[]       :    Health states of numeric sensors. See CIM_NumericSensor.HealthState for details.
    sint32 NumericSensorLowerThresholdCritical[]:    See CIM_NumericSensor.LowerThresholdCritical description for details.
    sint32 NumericSensorLowerThresholdFatal[]:    See CIM_NumericSensor.LowerThresholdFatal description for details.
    sint32 NumericSensorLowerThresholdNonCritical[]:    See CIM_NumericSensor.LowerThresholdNonCritical for details.
    string NumericSensorOtherSensorTypeDescription[]:    See CIM_NumericSensor.OtherSensorTypeDescription for details.
    uint16 NumericSensorPrimaryStatus[]     :    Primary statuses of numeric sensors. See CIM_NumericSensor.PrimaryStatus for details.
    uint16 NumericSensorRateUnits[]         :    See CIM_NumericSensor.RateUnits for details.
    uint16 NumericSensorSensorType[]        :    See CIM_NumericSensor.SensorType for details.
    sint32 NumericSensorUnitModifier[]      :    Unit modifiers for the values returned by the numeric sensors. See CIM_NumericSensor.UnitModifier description for details.
    sint32 NumericSensorUpperThresholdCritical[]:    See CIM_NumericSensor.UpperThresholdCritical description for details.
    sint32 NumericSensorUpperThresholdFatal[]:    See CIM_NumericSensor.UpperThresholdFatal for details.
    sint32 NumericSensorUpperThresholdNonCritical[]:    See CIM_NumericSensor.UpperThresholdNonCritical for details.
    uint16 OSEnabledState                   :    EnabledState of the current or last running operating system on this physcial computer system.
    uint16 OSType                           :    Type information of the current or last running operating system on this physical computer system. See CIM_OperatingSystem.OSType for details.
    string OSVersion                        :    Version information of the current or last running operating system on this physical computer system. See CIM_OperatingSystem.Version for details.
    uint8 OneTimeBootSource                 :    This property identifies the boot source that is used for the next one-time boot. The value of this property is an index referencing an element in the array of StructuredBootString.
    uint16 OperationalStatus[]              :    This property corresponds to the OperationalStatus property of the logical computer system represented by CIM_ComputerSystem. See CIM_ManagedSystemElement.OperationalStatus Description for details.
    string OtherDedicatedDescriptions[]     :    See CIM_ComputerSystem.OtherDedicatedDescriptions for details.
    string OtherIdentifyingInfo[]           :    See CIM_System.OtherIdentifyingInfo for details.
    string PartNumber                       :    This property corresponds to CIM_PhysicalFrame.PartNumber. See CIM_PhysicalFrame.PartNumber for details.
    uint8 PersistentBootConfigOrder[]       :    An array of elements identifying the boot order of the persistent boot configuration that shall be used during the next boot of the computer system, unless the OneTimeBootSource for the next boot is specified. The value of each element in this array is an index referencing an element in the array of StructuredBootString.
    uint64 PowerAllocationLimit             :    This property corresponds to CIM_PowerAllocationSettingData.Limit. See CIM_PowerAllocationSettingData.Limit for details.
    uint16 PowerUtilizationMode             :    This property corresponds to the PowerUtilizationMode of the CIM_PowerUtilizationManagementService. See CIM_PowerUtilizationManagementService.PowerUtilizationMode for details.
    uint16 PowerUtilizationModesSupported[] :    This property corresponds to PowerUtilizationModesSupported property of CIM_PowerUtilizationManagementCapabilities. See CIM_PowerUtilizationManagementCapabilities.PowerUtilizationModesSupported for details.
    uint32 ProcessorCurrentClockSpeed[]     :    See CIM_Processor.CurrentClockSpeed for details.
    string ProcessorFamily[]                :    See CIM_Processor.Family for details.
    uint32 ProcessorMaxClockSpeed[]         :    See CIM_Processor.MaxClockSpeed for details.
    uint16 RequestedState                   :    This property corresponds to the RequestedState property of the logical computer system represented by CIM_ComputerSystem. See CIM_EnabledLogicalElement.RequestedState for details on RequestedState.
    string SKU                              :    This property corresponds to CIM_PhysicalFrame.SKU. See CIM_PhysicalFrame.SKU for details.
    string SerialNumber                     :    This property corresponds to CIM_PhysicalFrame.SerialNumber. See CIM_PhysicalFrame.SerialNumber for details.
    string StructuredBootString[]           :    Strings identifying the boot sources on this physical computer system. See CIM_BootSourceSetting.StructuredBootString description for details.
    string Tag                              :    This property corresponds to CIM_PhysicalFrame.Tag. See CIM_PhysicalFrame.Tag for details.
    string Version                          :    This property corresponds to CIM_PhysicalFrame.Version. See CIM_PhysicalFrame.Version for details.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PhysicalComputerSystemView'
        self.__parent__ = 'CIM_PhysicalComputerSystemView'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {
            'requeststatechange':self.requeststatechange,
            'modifypersistentbootconfigorder':self.modifypersistentbootconfigorder,
            'clearlog':self.clearlog,
            'setonetimebootsource':self.setonetimebootsource,
            'installsoftwarefromuri':self.installsoftwarefromuri,
            }
    def requeststatechange(self,Job=None,InputXmlFile=None):
        '''An extrinsic method for changing the state of this physical computer system. Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost.\n A return code of 0 shall indicate the state change was successfully initiated.\n A return code of 1 shall indicate that the method is not supported. A return code of 2 shall indicate that the method failed.\n A return code of 4096 shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ConcreteJob REF Job                 :        May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.

Output Parameters:
    uint16 RequestedState                   :        See CIM_ComputerSystem.RequestedStateChange.RequestedState for details.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'RequestStateChange',{'Job': Job}))
    def modifypersistentbootconfigorder(self,InputXmlFile=None):
        '''This method is used to change the order of boot sources for the persistent boot configuration specified by the property CIM_PhysicalComputerSystemView.PersistentBootConfigOrder.

Output Parameters:
    string[] StructuredBootString           :        An ordered array of strings representing the order of boot sources.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPersistentBootConfigOrder',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ModifyPersistentBootConfigOrder',{}))
    def clearlog(self,InputXmlFile=None):
        '''An extrinsic method for clearing a log on this physical computer system.\n Requests that the Log be cleared of all entries.\n The return value shall be 0 if the request was successfully executed, 1 if the request is not supported, and 2 if an error occurred. A return code of 4096 shall indicate the request to clear log was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job.'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'ClearLog',{}))
    def setonetimebootsource(self,InputXmlFile=None):
        '''This method is used to set the one time boot source for the next boot on this computer system.

Output Parameters:
    string StructuredBootString             :        A string representing the boot source for next boot.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetOneTimeBootSource',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'SetOneTimeBootSource',{}))
    def installsoftwarefromuri(self,Job=None,InputXmlFile=None):
        '''An extrinsic method for installing software on this physical computer system. If 0 is returned, the function completed successfully and no ConcreteJob instance was required. The return value shall be 1 if the request is not supported, and 2 if an error occurred. If 4096 is returned, a ConcreteJob will be started to to perform the install. The Job s reference will be returned in the output parameter Job.

Input Parameters:

    string InputXmlFile                     :        Absolute path to the XML file that contains the input

                                            OR

    CIM_ConcreteJob REF Job                 :        Reference to the job (may be null if job completed).

Output Parameters:
    uint16[] InstallOptions                 :        See CIM_SoftwareInstallationService.InstallFromURI.InstallOptions for details.
    uint16[] Classifications                :        See CIM_SoftwareIdentity.Classifications for details.
    string URI                              :        See CIM_SoftwareInstallationService.InstallFromURI.URI for details.
'''
        for serviceselector in self.selectors(getCached=True):
            break
        if InputXmlFile:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallSoftwareFromURI',InputXmlFile))
        else:
            return __ResultObject__(self.__soaplib__.invoke(self.__resuri__,serviceselector,'InstallSoftwareFromURI',{'Job': Job}))
class __DCIM_CPUView__(__BaseClass__, __DCIM_View__):
    '''DCIM_CPUView is a derivation of CIM_View with Processor and Processor Cache specific data )

Class Properties:
    uint32 NumberOfEnabledCores = 1         :    Number of processor cores enabled for processor.
    string CPUFamily                        :    The Processor family type. For example, values include Pentium(R) processor with MMX(TM) technology (value=14) and 68040 (value=96).
    uint16 CPUStatus                        :    The CPUStatus property that indicates the current status of the Processor. For example, the Processor might be disabled due to a POST error (value=3). Information inthis property can be obtained from SMBIOS, the Type 4 structure, and the Status attribute.
    uint16 Cache1Associativity              :    An integer enumeration defining the system cache associativity. For example, 6 indicates a fully associative cache.
    uint16 Cache1ErrorMethodology           :    Cache ErrorMethodology - Contains the enumerated value that describes the caches error detection/correction mechanism
    uint16 Cache1Level                      :    Cache level of Cache1.
    uint8 Cache1Location                    :    Specifies the location of Cache1
    uint32 Cache1PrimaryStatus              :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 Cache1SRAMType                   :    Cache SRAM Type
    uint64 Cache1Size                       :    The total memory size of the cache in KBytes. 
    uint16 Cache1Type                       :    Defines whether this is for instruction caching (value=3), data caching (value=4) or both (value=5, Unified). Also, Other (1) and Unknown (2) can be defined.
    uint16 Cache1WritePolicy                :    Defines whether this is write-back (value=1) or write-through (value=0) Cache, or whether this information Varies with Address (2) or Unknown (3) can be specified.
    uint16 Cache2Associativity              :    An integer enumeration defining the system cache associativity. For example, 6 indicates a fully associative cache.
    uint16 Cache2ErrorMethodology           :    Cache ErrorMethodology - Contains the enumerated value that describes the caches error detection/correction mechanism
    uint16 Cache2Level                      :    Cache level of Cache2.
    uint8 Cache2Location                    :    Specifies the location of Cache2
    uint32 Cache2PrimaryStatus              :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 Cache2SRAMType                   :    Cache SRAM Type
    uint64 Cache2Size                       :    The total memory size of the cache in KBytes. 
    uint16 Cache2Type                       :    Defines whether this is for instruction caching (value=3), data caching (value=4) or both (value=5, Unified). Also, Other (1) and Unknown (2) can be defined.
    uint16 Cache2WritePolicy                :    Defines whether this is write-back (value=1) or write-through (value=0) Cache, or whether this information Varies with Address (2) or Unknown (3) can be specified.
    uint16 Cache3Associativity              :    An integer enumeration defining the system cache associativity. For example, 6 indicates a fully associative cache.
    uint16 Cache3ErrorMethodology           :    Cache ErrorMethodology - Contains the enumerated value that describes the caches error detection/correction mechanism
    uint16 Cache3Level                      :    Cache level of Cache3.
    uint8 Cache3Location                    :    Specifies the location of Cache3
    uint32 Cache3PrimaryStatus              :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 Cache3SRAMType                   :    Cache SRAM Type
    uint64 Cache3Size                       :    The total memory size of the cache in KBytes. 
    uint16 Cache3Type                       :    Defines whether this is for instruction caching (value=3), data caching (value=4) or both (value=5, Unified). Also, Other (1) and Unknown (2) can be defined.
    uint16 Cache3WritePolicy                :    Defines whether this is write-back (value=1) or write-through (value=0) Cache, or whether this information Varies with Address (2) or Unknown (3) can be specified.
    uint32 Characteristics                  :    Array of enumerated values that describes the characteristics of the processor. The characteristics include certain features of the processor such as 64 bit support for data width of the processor. Note that if this property does not contain the value corresponding to a feature of the processor, than the feature either is not that some of the features of the processor may exist but may not be enabled. To find the the currently enabled features the processor, reffer to the EnabledProcessorCharacteristics property. Values specified in the enumeration may be obtained from SMBIOS v2.5 Type 4 offset 26h (Processor Characteristics Word). 32-bit Capable - describes whether the processor has the capability for 32 bits data width. 64-bit Capable - describes whether the processor has the capability for 64 bits data width. Enhanced Virtualization - describes whether the processor has the capability for executing enhanced virtualization instructions. Hardware Thread - indicates that the processor is capable of the hardware threading. NX-bit - describes whether the processor has capability to utilize non-execute bit and can differentiate the memory marked strictly for storage. Power/Performance Control - describes whether the processor has capability for load based power savings. Core Frequency Boosting - describes whether the processor has a capability for one processor core to increase its frequency whenever the other core has gone into an idle state.
    uint32 CurrentClockSpeed                :    The current speed (in MHz) of this Processor.
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint8 ExecuteDisabledCapable            :    Variable that specifies if ExecuteDisabledCapable is Capable
    uint8 ExecuteDisabledEnabled            :    Variable that specifies if VirtualizationTechnology is enabled
    uint32 ExternalBusClockSpeed            :    The speed (in MHz) of the external bus interface (also known as the front side bus).
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    uint8 HyperThreadingCapable             :    Variable that specifies if HyperThreading is Capable
    uint8 HyperThreadingEnabled             :    Variable that specifies if HyperThreading is Enabled
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string Manufacturer                     :    The name of the organization responsible for producing the processor.
    uint32 MaxClockSpeed                    :    The maximum speed (in MHz) of this Processor.
    string Model                            :    The make and or model of the processor.
    uint32 NumberOfEnabledThreads           :    Number of threads enabled for processor.
    uint32 NumberOfProcessorCores           :    Number of processor cores available for processor. This number would not include cores disabled by hardware and may be obtained from SMBIOS 2.5 Type 4 offset 23h.
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string SlotFQDD                         :    The property represents the FQDD for the slot that the processor is plugged in into. 
    uint8 TurboModeCapable                  :    Variable that specifies if TurboMode is Capable
    uint8 TurboModeEnabled                  :    Variable that specifies if TurboMode is enabled
    uint8 VirtualizationTechnologyCapable   :    Variable that specifies if VirtualizationTechnology is Capable
    uint8 VirtualizationTechnologyEnabled   :    Variable that specifies if VirtualizationTechnology is enabled
    string Voltage                          :    The voltage(s) supported by the processor.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CPUView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_ControllerBatteryView__(__BaseClass__, __DCIM_View__):
    '''DCIM_ControllerBatteryView is a derivation of DCIM_View with controller specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the controller and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the controller is functioning normally. Degraded indicates the controller is functioning below normal. Error indicates the controller is in an Error  condition. 
    uint16 RAIDState                        :    RAIDState provides the current battery status. The state can have one of the following values.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ControllerBatteryView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_ControllerView__(__BaseClass__, __DCIM_View__):
    '''DCIM_ControllerView is a derivation of DCIM_View with controller specific data. )

Class Properties:
    string Bus                              :     PCI bus 
    uint32 CacheSizeInMB                    :     
    uint8 CachecadeCapability               :    CachecadeCapability indicates whether the controller supportsCachecade virtual disk creation. 
    string ControllerFirmwareVersion        :    This property gives information about the Firmware Version installed on the Controller 
    string Device                           :     PCI device
    string DeviceCardDataBusWidth           :    DeviceCardDataBusWidth gives information about the Controller bus width. This property can have following values:Other,  Unknown, 1x, 2x, 4x, 8x, 12x, 16x, 32x 
    string DeviceCardManufacturer           :    This property is the Controller Manufacturer Name 
    uint8 DeviceCardSlotLength              :    DeviceCardSlotLength gives information about the Controller slot length. This property can have following values: Unknown, Short, Long 
    string DeviceCardSlotType               :    DeviceCardSlotType gives information about the Controller Controller Slot type. The slot type has following values Unknown, PCI Express x8 
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string DriverVersion                    :     
    uint8 EncryptionCapability              :    EncryptionCapability details the possible Encryption Statesof the Controller. The controller can have one of the following encryption capabilities: None, LKM Capable, DKM Capable, LKM and DKM capable.
    uint8 EncryptionMode                    :    Encryption Mode details the current Encryption Stateof the Controller. The controller can be in one of the following States: None - No key assigned, LKM, DKM, or DKM Pending. In DKM Pending Mode the controller is state of getting keys from DKM server
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string Function                         :     PCI function 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    string KeyID                            :    KeyID details the Key identification on the controller, when thecontroller is in Local Key Management mode
    string MaxAvailablePCILinkSpeed         :    MaxAvailablePCILinkSpeed indicates the currently allowed PCI link speed 
    string MaxPossiblePCILinkSpeed          :    MaxPossiblePcieLinkSpeed indicates the maximum possible PCI link speed (speed the device is capable of ).
    string PCIDeviceID                      :    This property is the Controller Device ID 
    uint8 PCISlot                           :    This uniquely identifies the embedded PCI Slot number of the Controller 
    string PCISubDeviceID                   :    This property is the Controller Sub Device ID 
    string PCISubVendorID                   :     This property is the Controller Sub Vendor ID 
    string PCIVendorID                      :    This property is the Controller Vendor ID 
    uint8 PatrolReadState                   :    PatrolReadState
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the controller and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the controller is functioning normally. Degraded indicates the controller is functioning below normal. Error indicates the controller is in an Error  condition. 
    string ProductName                      :    Product Name property specifies the Name of the Controller. 
    uint32 RealtimeCapability               :    RealtimeCapability gives information if this Controller supports RealTime or not .. This property can have following values:  Incapable, Capable 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the controller and its subcomponents. RollupStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the controller is functioning normally. Degraded indicates the controller is functioning below normal. Error indicates the controller is in an Error  condition. 
    string SASAddress                       :    The SASAddress property provides a unique Controller Name.
    uint32 SecurityStatus                   :    Security Status property details security configuration information of the Controller. Encryption Capable means that the controller supports Local Key Management (LKM) and/or Dell Key Management (DKM). Security Key Assigned means the controller has the security key in either LKM or DKM mode. 
    uint8 SlicedVDCapability                :    SlicedVDCapability indicates whether the controller supportscreation of sliced virtual disk.
    uint8 SupportControllerBootMode         :    SupportControllerBootMode
    uint8 SupportEnhancedAutoForeignImport  :    SupportEnhancedAutoForeignImport
    uint8 SupportRAID10UnevenSpans          :    SupportRAID10UnevenSpans indicates whether the controller supportscreation of uneven spans for raid level 10.
    uint8 T10PICapability                   :    T10PICapability indicates whether the controller supportsT10 Protection Information.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ControllerView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnclosureEMMView__(__BaseClass__, __DCIM_View__):
    '''DCIM_EnclosureEMMView is a derivation of DCIM_View with controller specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    string PartNumber                       :    This property is the Enclosure EMM PartNumber 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the controller and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the controller is functioning normally. Degraded indicates the controller is functioning below normal. Error indicates the controller is in an Error  condition. 
    string Revision                         :    This property is the Enclosure EMM Revision 
    uint32 State                            :    		State provides a status value of Enclosure EMM 		State consists of one of the following values: Unknown 		Ready Online Foreign Offline Blocked 		Failed Degraded Non-Raid Removed Charging Learning 		Low Power Over Temp Under Temp Not Applicable 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnclosureEMMView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnclosurePSUView__(__BaseClass__, __DCIM_View__):
    '''DCIM_EnclosurePSUView is a derivation of DCIM_View with controller specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    string PartNumber                       :    This property is the Enclosure EMM PartNumber 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the controller and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the controller is functioning normally. Degraded indicates the controller is functioning below normal. Error indicates the controller is in an Error  condition. 
    uint32 State                            :    		State provides a status value of Enclosure PSU 		State consists of one of the following values: Unknown 		Ready Online Foreign Offline Blocked 		Failed Degraded Non-Raid Removed Charging Learning 		Low Power Over Temp Under Temp Not Applicable 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnclosurePSUView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_EnclosureView__(__BaseClass__, __DCIM_View__):
    '''DCIM_EnclosureView is a derivation of DCIM_View with storage enclosure specific data. )

Class Properties:
    string AssetTag                         :    This is the asset Tag on the Enclosure 
    uint8 Connector                         :    This is the Enclosure port number 
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint8 EMMCount                          :    This is the number of management module of the Enclosure 
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    uint8 FanCount                          :    This is the number of fans on the Enclosure 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    uint8 PSUCount                          :    This is the number of power supplies of the Enclosure 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
    string ProductName                      :    This is the marketing name of the Enclosure 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
    string ServiceTag                       :    This is the service Tag on the Enclosure 
    uint8 SlotCount                         :    This is the number of slots on the Enclosure 
    uint32 State                            :    		State provides a status value of Enclosure 		State consists of one of the following values: Unknown 		Ready Online Foreign Offline Blocked 		Failed Degraded Non-Raid Removed Charging Learning 		Low Power Over Temp Under Temp Not Applicable 
    uint8 TempProbeCount                    :    This is the number of temperature probes of the Enclosure 
    string Version                          :    This is the revision of the Enclosure 
    uint8 WiredOrder                        :    This is the position of the Enclosure 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_EnclosureView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FCView__(__BaseClass__, __DCIM_View__):
    '''DCIM_FCView is a derivation of DCIM_View with Fiber Channel specific data )

Class Properties:
    string VirtualWWPN                      :    This property represents the Virtual World Wide PortName.
    uint32 Bus                              :    This property represents the bus number of the PCI device.
    string ChipType                         :    This property represents the chip type.
    uint32 Device                           :    This property represents the device number of the PCI device
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string DeviceName                       :    This property represents FC HBA device name.
    string EFIVersion                       :    This property represents the EFI version on the device.
    uint8 FCTapeEnable                      :    This property represents the FC Tape Enable.
    string  FQDD                            :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    uint32 FabricLoginRetryCount            :    This property represents the Fabric Login Retry Count
    uint32 FabricLoginTimeout               :    This property represents the Fabric Login Timeout.
    string FamilyVersion                    :    This property represents the firmware version.
    uint16 FirstFCTargetLUN                 :    This property represents the First FC Target LUN
    string FirstFCTargetWWPN                :    This property represents the First FC Target World Wide PortName.
    string FramePayloadSize                 :    This property represents the frame payload size.
    uint32 Function                         :    This property represents the function number of the PCIdevice.
    uint32 HardZoneAddress                  :    This property represents the Hard Zone Address.
    uint8 HardZoneEnable                    :    This property represents the Hard Zone Enable
    string InstanceID                       :    Is a unique string containing the Fully Qualified Device Description and view name. 
    uint32 LinkDownTimeout                  :    This property represents the Link Down Timeout.
    uint8 LinkStatus                        :    Indicates link status
    uint8 LoopResetDelay                    :    This property represents the Loop Reset Delay
    string PCIDeviceID                      :    This property represents the dvice identifier.
    uint32 PortDownRetryCount               :    This property represents the Port Down Retry. 
    uint32 PortDownTimeout                  :    This property represents the Port Down Timeout. 
    uint32 PortLoginRetryCount              :    This property represents the Port Login Retry Count.
    uint32 PortLoginTimeout                 :    This property represents the Port Login Timeout.
    uint16 PortNumber                       :    This property represents the port number.
    uint16 PortSpeed                        :    Port Speed
    uint16 SecondFCTargetLUN                :    This property represents the Second FC Target LUN.
    string SecondFCTargetWWPN               :    This property represents the Second FC Target WorldWide Port Name.
    string VendorName                       :    This property represents the VendorName.
    string VirtualWWN                       :    This property represents the Virtual World Wide Name.
    string WWN                              :    This property represents the World Wide Name.
    string WWPN                             :    This property represents the World Wide Port Name.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FCView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_FanView__(__BaseClass__, __DCIM_View__):
    '''DCIM_FanView is a derivation of CIM_View with Fan specific data )

Class Properties:
    boolean ActiveCooling                   :    ActiveCooling is a Boolean that indicates that the Cooling Device provides active (as opposed to passive) cooling.
    uint16 BaseUnits                        :    The base unit of the values returned by this Sensor. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). For example, if BaseUnits is Volts and the UnitModifier is -6, then the units of the values returned are MicroVolts. However, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier.
    sint32 CurrentReading                   :    The current value indicated by the Sensor.
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string  FQDD                            :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string InstanceID                       :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    uint8 PWM                               :    Pulse Width Modulation
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 RateUnits                        :    Specifies if the units returned by this Sensor are rate units. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). This is true unless this property (RateUnits) has a value different than None. For example, if BaseUnits is Volts and the UnitModifier is -6, then the units of the values returned are MicroVolts. But, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier. Any implementation of CurrentReading should be qualified with either a Counter or a Gauge qualifier, depending on the characteristics of the sensor being modeled.
    uint16 RedundancyStatus                 :    RedundancyStatus provides information on the state of the RedundancyGroup. Fully Redundant (value=2) means that all of the configured redundancy is still available; Degraded Redundancy (3) means that some configured elements are degraded, missing or failed but that the number of elements in the set is still greater than the minimum required (MinNumberNeeded); Redundancy Lost (4) means that sufficient configured elements are missing or failed that no redundancy is available and the next failure experienced will cause overall failure. Overall Failure (5) means that there has been an overall failure of the RedundancySet.
    sint32 UnitModifier                     :    The unit multiplier for the values returned by this Sensor. All the values returned by this Sensor are represented in the units obtained by (BaseUnits * 10 raised to the power of the UnitModifier). For example, if BaseUnits is Volts and the Unit Modifier is -6, then the units of the values returned are MicroVolts. However, if the RateUnits property is set to a value other than None, then the units are further qualified as rate units. In the above example, if RateUnits is set to Per Second, then the values returned by the Sensor are in MicroVolts/Second. The units apply to all numeric properties of the Sensor, unless explicitly overridden by the Units qualifier.
    boolean VariableSpeed                   :    Indication of whether the fan supports variable speeds.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_FanView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_HostNetworkInterfaceView__(__BaseClass__, __DCIM_View__):
    '''DCIM_HostNetworkInterfaceView is a derivation of CIM_View with System specific data )

Class Properties:
    boolean DHCPEnabled                     :    This property states wthether DHCP is enabled or not
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string DeviceFQDD[]                     :    Array of FQDD of participating device(s).  FQDD is a user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string IPv4Address[]                    :    Indexed array of IPv4Addresses
    string IPv4DHCPServer                   :    DHCP Server for IPv4 addressing
    string IPv4DNSServer[]                  :    Indexed array of IPv4 DNS Server addresses
    string IPv4Gateway[]                    :    Array of IPv4 Gateway addresses
    string IPv4SubnetMask[]                 :    	Host Networks Mask. Only valid for IPv4 addresses
    uint32 IPv6AddrScope[]                  :    Array of IPv6 address scope (Per IPv6 address) 
    string IPv6Address[]                    :    Indexed array of IPv6Addresses
    string IPv6DHCPServer                   :    DHCP Server for IPv6 addressing
    string IPv6DNSServer[]                  :    	Indexed array of IPv6 DNS Server addresses
    string IPv6Gateway[]                    :    	Array of IPv6 Gateway addresses
    uint8 IPv6PrefixLength[]                :    Array of IPv6 Prefix Length (Per IPv6 address) 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string MACAddr                          :    Interfaces  mac address 
    string Name                             :    Interfaces  Name of the interface 
    uint8 Status                            :    Status of the Interface 
    uint8 Type                              :    Type of Interface 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_HostNetworkInterfaceView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_MemoryView__(__BaseClass__, __DCIM_View__):
    '''DCIM_MemoryView is a derivation of CIM_View with System Memory and DIMM specific data )

Class Properties:
    string BankLabel                        :    A string identifying the physically labeled bank where the Memory is located - for example, Bank 0 or Bank A.
    uint32 CurrentOperatingSpeed            :    The current operating speed of the physical memory, in MHz.
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string ManufactureDate                  :    Manufacture Date of the product.
    string Manufacturer                     :    The name of the organization responsible for producing the PhysicalElement. This organization might be the entity from whom the Element is purchased, but this is not necessarily true. The latter information is contained in the Vendor property of CIM_Product.
    uint16 MemoryType                       :    The type of PhysicalMemory. Synchronous DRAM is also known as SDRAM Cache DRAM is also known as CDRAM CDRAM is also known as Cache DRAM SDRAM is also known as Synchronous DRAM BRAM is also known as Block RAM.
    string Model                            :    The make and or model of the product.
    string PartNumber                       :    The part number assigned by the organization that is responsible for producing or manufacturing the PhysicalElement.
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint8 Rank                              :    A block or area of data that is created using some or all the memorychips on a memory module.
    string SerialNumber                     :    A manufacturer-allocated number used to identify the Physical Element.
    uint32 Size                             :    The total size of this memory in MegaBytes.
    string SlotFQDD                         :    The property represents the FQDD for the slot that the memory card is plugged in into. 
    uint32 Speed                            :    The maximum operating speed of the physical memory, in MHz.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_MemoryView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_NICView__(__BaseClass__, __DCIM_View__):
    '''DCIM_NICView is a derivation of DCIM_View with NIC specific data )

Class Properties:
    uint8 AutoNegotiation                   :    Auto Negotiated.
    uint8 BusNumber                         :    The bus number where this PCI device resides
    string ControllerBIOSVersion            :    Represents firmware version of Controller BIOS.
    string CurrentMACAddress                :    A string containing the Current MAC addressThe principal unicast address used in communication with the NIC. The MAC addressis formatted as twelve hexadecimal digits (e.g., 010203040506), with each pair representing one of the six octets of the MAC address in canonical bit order according to RFC 2469
    string DataBusWidth                     :    Data-bus width of the NIC PCI device.
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint8 DeviceNumber                      :    The device number assigned to this PCI device for this bus. 
    string EFIVersion                       :    Represents firmware version of EFI.
    uint8 FCoEOffloadMode                   :    Represents if Fibre Channel over Ethernet personality is enabled or disabled on current partition in a Converged Network Adaptor device. FCoEOffloadMode has the following values: Enabled or Disabled.
    string FCoEWWNN                         :    Fiber Channel over Ethernet World Wide Node Name.
    string  FQDD                            :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string FamilyVersion                    :    Represents family version of firmware.
    uint8 FunctionNumber                    :    The function number for this PCI device. 
    string InstanceID                       :    Is a unique string containing the Fully Qualified Device Description and view name. 
    uint8 LinkDuplex                        :    Link Duplex.
    uint8 LinkSpeed                         :    Link Speed.
    uint16 MaxBandwidth                     :    Represents maximum bandwidth on current partition in a Converged Network Adapter device. It should be greater than 		MinBandwidth. It is represented in units of percentage.
    string MediaType                        :    Supported Media Types.
    uint16 MinBandwidth                     :    Represents minimum bandwidth on current partition of a Converged Network Adapter device. It should be less than 		MaxBandwidth. It is represented in units of percentage.
    uint8 NicMode                           :    Represents if network interface card personality is enabled or disabled on current partition in a Converged Network Adaptor device. NicMode has the following values: Enabled or Disabled.
    uint16 NumberPCIEFunctionsEnabled       :    Number of PCI-e Functions currently enabled per Port. 
    uint16 NumberPCIEFunctionsSupported     :    Number of PCI-e Functions Supported per Port.
    string PCIDeviceID                      :    Register that contains a value assigned by the device manufacturer used to identify the type of device. 
    string PCISubDeviceID                   :    PCI sub device ID
    string PCISubVendorID                   :    Subsystem vendor ID. ID information is reported from a PCIDevice through protocol-specific requests. 
    string PCIVendorID                      :    Register that contains a value assigned by the PCI SIG used to identify the manufacturer of the device. 
    string PermanentFCOEMACAddress          :    PermanentFCOEMACAddress defines the network address that is hardcoded into a port for FCoE.
    string PermanentMACAddress              :    PermanentAddress defines the network address that is hardcoded into a port. This hardcoded address can be changed using a firmware upgrade or a software configuration. When this change is made, the field should be updated at the same time. PermanentAddress should be left blank if no hardcoded address exists for the NetworkAdapter.
    string PermanentiSCSIMACAddress         :    PermanentAddress defines the network address that is hardcoded into a port for iSCSI. This hardcoded address can be changed using a firmware upgrade or a software configuration. When this change is made, the field should be updated at the same time. PermanentAddress should be left blank if no hardcoded address exists for the NetworkAdapter.
    string ProductName                      :    A string containing the Product name
    string Protocol                         :    Supported Protocol Types.
    uint8 ReceiveFlowControl                :    Receive Flow Control.
    string SlotLength                       :    Slot length of the NIC PCI device
    string SlotType                         :    Slot type of the NIC PCI device.
    uint8 TransmitFlowControl               :    Transmit Flow Control.
    string VendorName                       :    Vendor Name.
    string VirtWWN                          :    Represents Virtual Worldwide Name of a port.
    string VirtWWPN                         :    Represents Virtual Worldwide Port Name of a port.
    string WWN                              :    Represents Worldwide Name of a port.
    string WWPN                             :    Represents Worldwide Port Name of a port.
    uint8 iScsiOffloadMode                  :    Represents if Internet Small Computer System Interface personality is enabled or disabled on current partition in a Converged Network Adaptor device. iScsiOffloadMode has the following values: Enabled or Disabled.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_NICView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PCIDeviceView__(__BaseClass__, __DCIM_View__):
    '''DCIM_PCIDeviceView is a derivation of CIM_View with PCI Device specific data )

Class Properties:
    uint32 BusNumber                        :    The bus number where this PCI device resides
    string DataBusWidth                     :    Data-bus width of the PCI device.
    string Description                      :    Provides the description of the PCI device
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint32 DeviceNumber                     :    The device number assigned to this PCI device for this bus.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    uint32 FunctionNumber                   :    The function number for this PCI device.
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string Manufacturer                     :    A string containing the Manufacturer nameThe name of the organization responsible for producing the PCI Device.
    string PCIDeviceID                      :    Register that contains a value assigned by the devicemanufacturer used to identify the type of device.
    string PCISubDeviceID                   :    Register that contains a value assigned by the vendormanufacturer used to identify the type of device.
    string PCISubVendorID                   :    Subsystem vendor ID. 
    string PCIVendorID                      :    Register that contains a value assigned by the PCI SIGused to identify the manufacturer of the device.
    string SlotFQDD                         :    The property represents the FQDD for the slot that the PCI device is plugged in into. 
    string SlotLength                       :    Slot length of the PCI device
    string SlotType                         :    Slot type of the PCI device.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PCIDeviceView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PCIeSSDBackPlaneView__(__BaseClass__, __DCIM_View__):
    '''DCIM_PCIeSSDBackPlaneView is a derivation of DCIM_View with SSD Backplane specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string FirmwareVersion                  :    This property gives information about the Firmware Version installed on the BackPlane 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    uint32 MediaType                        :    This field indicates Type of the physical disk The physical disk type can be: Hard Disk Drive Solid State Drive 
    string ProductName                      :    This is Model Name of the PCIeSSD BackPlane Name. 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
    uint8 SlotCount                         :    This is the number of slots on the BackPlane 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PCIeSSDBackPlaneView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PCIeSSDExtenderView__(__BaseClass__, __DCIM_View__):
    '''DCIM_PCIeSSDExtenderView is a derivation of DCIM_View with SSD Extender specific data. )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the ManagedElement and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioning below normal. Error indicates the ManagedElement is in an Error condition. 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PCIeSSDExtenderView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PhysicalDiskView__(__BaseClass__, __DCIM_View__):
    '''DCIM_PhysicalDiskView is a derivation of DCIM_View )

Class Properties:
    uint32 BlockSizeInBytes                 :    This is the blocksize of the physical disk. 
    uint32 BusProtocol                      :    Bus protocol used by the physical disc. The Protocol used can be one of following: Unknown,  SCSI, PATA, FIBRE, USB, SATA, SAS 
    uint16 Connector                        :    This is controller port number. 
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint8 DriveFormFactor                   :    This gives information about form factor of the physical disk. The form factors of the physical disks are : Unknown, 1.8 inch, 2.5 inch, 3.5 inch 
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    uint64 FreeSizeInBytes                  :    The size of free space on the physical disk. 
    uint16 HotSpareStatus                   :    The hot spare status of the physical disk This status can have following values: No, Dedicated, Global 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    string Manufacturer                     :    This is manufacturer of the physical disk. 
    uint16 ManufacturingDay                 :    This is the manufacturing day. To be used in conjunction with ManufacturingWeek, ManufacturingYear properties to denote the manufacturing date of the physical disk.
    uint16 ManufacturingWeek                :    This is the manufacturing week. To be used in conjunction with ManufacturingDay, ManufacturingYear properties to denote the manufacturing date of the physical disk.
    uint32 ManufacturingYear                :    This is the manufacturing year. To be used in conjunction with ManufacturingWeek, ManufacturingDay properties to denote the manufacturing date of the physical disk. 
    uint32 MaxCapableSpeed                  :    This gives information about capable speed of the physical disk. The capable speeds of the physical disk are : 1.5Gbs, 3Gbs, 6Gbs , 12Gbs 
    uint32 MediaType                        :    This field indicates Type of the physical disk The physical disk type can be: Hard Disk Drive Solid State Drive 
    string Model                            :    This is Model Name of the physical disk. 
    string OperationName                    :    The property indicates the operation running on the VirtualDisk 	When there is no operation the property value will be None 
    uint8 OperationPercentComplete          :    The property indicates the progress of the operation specified 	OperationName property. The value will indicate the completion 	percentage
    string PPID                             :    
    uint32 PredictiveFailureState           :    This field indicates if the Predictive Failure State is enabled for the physical disk. The predictive failure state of the physical disk can be one of these values: Smart Alert Absent, Smart Alert Present 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the ManagedElement and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioning below normal. Error indicates the ManagedElement is in an Error condition. 
    uint32 RaidStatus                       :    RaidStatus provides a status value for RAID.RaidStatus consists of one of the following values: Unknown Ready Online Foreign Offline Blocked Failed Degraded Non-RAID Missing 
    uint8 RemainingRatedWriteEndurance      :    The property indicates the wear out percentage 	of the SSD drives. The value of 255 indicates 	that the wear out percentage is Unknown.This property is not applicable for HDD media type drive 
    string Revision                         :    Provides information about the revision of the physical disk 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
    string SASAddress                       :    The SASAddress property provides a unique controller name.
    uint32 SecurityState                    :    This is the Security State of the physical disk The security state of the physical disk can be one of the following: Secured, Locked, Foreign 
    string SerialNumber                     :    The serial number of the physical disk. 
    uint64 SizeInBytes                      :    This is the size of the physical disk. 
    uint16 Slot                             :    This is slot number where the drive is located. 
    string SupportedEncryptionTypes[]       :    This property indicates the supported encryption types on the physical disk. If the disk does not supported encryption then the value is None. Otherwise, the property can have list of encryption types. Currently only Full Drive Encryption  FDE is supported 
    uint8 T10PICapability                   :    T10PICapability indicates whether the Physical Disk supportsT10 Protection Information.
    uint64 UsedSizeInBytes                  :    The size of used space on the physical disk. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PhysicalDiskView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PowerSupplyView__(__BaseClass__, __DCIM_View__):
    '''DCIM_PowerSupplyView is a derivation of DCIM_View with Power Supply specific data )

Class Properties:
    string DetailedState                    :    A string containing the DetailedState
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string FirmwareVersion                  :    A string containing the firmware version.
    uint32 InputVoltage                     :    The input voltage for the power supply, in Volts. A value of 0 denotes unknown.
    string InstanceID                       :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string Manufacturer                     :    A string containing the Manufacturer
    string Model                            :    A string containing the model for the power supply.
    uint8 PMBusMonitoring                   :    TRUE If PS is a power monotoring capable device.
    string PartNumber                       :    A string containing the PartNumber
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint32 Range1MaxInputPower              :    Input rated wattage for PS.
    uint32 RedMinNumberNeeded               :    MinNumberNeeded indicates the smallest number of elements that MUST be operational in order to function. For example, in an N+1 redundancy relationship, the MinNumberNeeded property is set equal to N. In a LimitedSparing environment, this property is meaningless and SHOULD be set to zero.
    uint16 RedTypeOfSet[]                   :    TypeOfSet provides information on the type of redundancy. N+1 (=2) indicates all members are active, are unaware and function independent of one another. However, there exist at least one extra member to achieve functionality. Sparing is implied (i.e. each member can be a spare for the other(s). An example of N+1 is a system that has 2 power supplies, but needs only 1 power supply to functioning properly. N+1 is a special case of N+M redundancy where M=1. A value of N+1 (=2) shall be used for N+M redundancy. - Sparing (=4) indicates that all members are active and are aware of each others. However, their functionality is independent until failover. Each member can be a spare for the other(s). - Input Power Redundancy (=32768) indicates that the power supply redundancy policy is set to Input Power Redundancy.
    uint16 RedundancyStatus                 :    RedundancyStatus provides information on the state of the RedundancyGroup. Fully Redundant (value=2) means that all of the configured redundancy is still available; Degraded Redundancy (3) means that some configured elements are degraded, missing or failed but that the number of elements in the set is still greater than the minimum required (MinNumberNeeded); Redundancy Lost (4) means that sufficient configured elements are missing or failed that no redundancy is available and the next failure experienced will cause overall failure. Overall Failure (5) means that there has been an overall failure of the RedundancySet.
    string SerialNumber                     :    A string containing the SerialNumber
    string SlotFQDD                         :    The property represents the FQDD for the slot that the PSU is plugged in into. 
    uint32 TotalOutputPower                 :    Represents the total output power of the PowerSupply in Watts. 0 denotes unknown.
    uint16 Type                             :    PowerSupply Type indicates the Device Type (AC/DC - Variable/Regulated) Power Supply
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PowerSupplyView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemQuickSyncView__(__BaseClass__, __DCIM_View__):
    '''DCIM_SystemQuickSyncView is a derivation of CIM_View with QuickSync hardware device specific data )

Class Properties:
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string FWVersion                        :    A string represents the version of the Quick Sync FW
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string Manufacturer                     :    A string containing the manufacturer name.
    string ProductName                      :    A string represents the product name of the Quick Sync HW
    string Version                          :    A string represents the version of the Quick Sync HW
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemQuickSyncView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_SystemView__(__BaseClass__, __DCIM_View__):
    '''DCIM_SystemView is a derivation of CIM_View with System specific data )

Class Properties:
    string AssetTag                         :    Asset tag of the system
    string BIOSReleaseDate                  :    String number of the BIOS release date. The date string, if supplied, is in mm/dd/yyyy format.
    string BIOSVersionString                :    number of the BIOS Version. This is a free form string that may contain Core and OEM version information. For e.g.1.3.6
    string BaseBoardChassisSlot             :    Base Board Chassis Slot
    uint32 BatteryRollupStatus              :    BatteryRollupStatus provides live status of batteries.The roll up will be the worst case from any of the batteries.BatteryRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 BladeGeometry                    :    Blade Geometry
    string BoardPartNumber                  :    Motherboard Part Number
    string BoardSerialNumber                :    Motherboard Serial Number
    string CMCIP                            :    IP address of CMC on modular system
    string CPLDVersion                      :    CPLD Version number in the form of string
    uint32 CPURollupStatus                  :    CPURollupStatus provides live status of CPU from SEL.The roll up will be the worst case from any of the CPUs.CPURollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string ChassisModel                     :    Model of the CHASSIS like PowerEdge xxx
    string ChassisName                      :    Chassis Name like Main System Chassis
    string ChassisServiceTag                :    Service tag of the CHASSIS
    uint16 ChassisSystemHeight              :    The height of the enclosure, in Us. A U is a standard unit of measure for the height of a rack or rack-mountable component and is equal to 1.75 inches or 4.445 cm. A value of 0 indicates that the enclosure height is unspecified. For instance, this variable would be set to 1 for R610 system meaning the height of the system is 1U
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint16 EstimatedExhaustTemperature      :    Calculated, not measure, exhaust temperature in Degrees Celcius
    uint16 EstimatedSystemAirflow           :    Estimated airflow over the chassis in Cubic Feet per Minute
    string ExpressServiceCode               :    ExpressServiceCode of the SYSTEM.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    uint32 FanRollupStatus                  :    FanRollupStatus provides live status of fans.The roll up will be the worst case from any of the fans.FanRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string HostName                         :    System Name string in ASCII preceded by an eight bit byte countin binary
    uint32 IDSDMRollupStatus                :    IDSDMRollupStatus provides the live status of IDSDM (Internal Dual SD Mode) sensorsThe IDSDMRollupStatus will be the worst case among all the IDSDM sensor statuses.IDSDMRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    uint32 IntrusionRollupStatus            :    IntrusionRollupStatus provides the live status of chassis intrusion sensors.The IntrusionRollupStatus will be the worst case among all the intrusion sensor statuses.IntrusionRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the chassis is open. 
    uint32 LicensingRollupStatus            :    LicensingRollupStatus provides live status of licensing components.The roll up will be the worst case from any of the licensing components.LicensingRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string LifecycleControllerVersion       :    Version of Lifecycle Controller
    string Manufacturer                     :    System Manufacturer string, e.g. DELL Inc
    uint32 MaxCPUSockets                    :    Maximum CPU Sockets
    uint32 MaxDIMMSlots                     :    The number of slots or sockets available for Memory Devices in this array. This value represents the number of Memory Device structures that comprise this Memory Array. Each MemoryDevice has a reference to the owning Memory Array.
    uint32 MaxPCIeSlots                     :    Maximum PCIeSlots
    string MemoryOperationMode              :    System memory operation mode. Denotes the mode of operation for system memory such as mirrored, advanced ECC, optimized mode. 
    string Model                            :    Model of the system, eg: PowerEdge R610
    string NodeID                           :    Unique property of blade based on service tag 
    uint32 PSRollupStatus                   :    PSRollupStatus provides live status of power supplies.The roll up will be the worst case from any of the power supplies.PSRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string PlatformGUID                     :    System GUID
    uint32 PopulatedCPUSockets              :    Populated CPU Sockets
    uint32 PopulatedDIMMSlots               :    System Memory Sockets Current Capacity
    uint32 PopulatedPCIeSlots               :    Populated PCIeSlots
    uint32 PowerCap                         :    The current power cap (in Watts) of the associated ManagedSystem Element.
    uint16 PowerCapEnabledState             :    The current power cap enabled state of the associated ManagedSystem Element.
    uint16 PowerState                       :    The current power state of the associated ManagedSystem Element.
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to alignwith Red-Yellow-Green type representation of status. It should beused in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint32 ServerAllocation                 :    Power (Watt) allocated by Chassis Manager. 
    string ServiceTag                       :    Service tag of the SYSTEM.
    uint32 StorageRollupStatus              :    StorageRollupStatus provides live status of storage components.The roll up will be the worst case from any of the storage components.StorageRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    uint16 SysMemErrorMethodology           :    The primary hardware error correction or detection method supported by this memory array
    string SysMemFailOverState              :    System Memory Fail Over State
    uint16 SysMemLocation                   :    The physical location of the Memory Array, whether on the system board or an add-in board.
    uint64 SysMemMaxCapacitySize            :    The maximum memory capacity in KB that could be installed on the platform. Note that this property represents the sum of totals for the possible memory that could be installed in each slot regardless of currently installed memory capacity.
    uint32 SysMemPrimaryStatus              :    System Memory Primary Status provides a high level status value, intended to align with Red-Yellow-Green type representation of status.It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents.PrimaryStatus consists of one of the following values: Unknown, OK,Degraded or Error. Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Errorcondition. 
    uint32 SysMemTotalSize                  :    The property shall be in Mbytes. The maximum memory capacity in MB that could be installed on the platform. Note that this property represents the sum of totals for the possible memory that could be installed in each slot regardless of currently installed memory capacity.
    string SystemGeneration                 :    The generation of the platform
    uint32 SystemID                         :    System ID
    uint16 SystemRevision                   :    System Revision
    uint32 TempRollupStatus                 :    TempRollupStatus provides live status of temperatures.The roll up will be the worst case from any of the temperatures.TempRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string UUID                             :    UUID
    uint32 VoltRollupStatus                 :    VoltRollupStatus provides live status of voltages.The roll up will be the worst case from any of the voltages.VoltRollupStatus consists of one of the following values: Unknown, OK, Degraded or Error.Unknown indicates the implementation is ingeneral capable of returning this property, but is unable to do soat this time. OK indicates the ManagedElement is functioning normally. Degraded indicates the ManagedElement is functioningbelow normal. Error indicates the ManagedElement is in an Error condition. 
    string smbiosGUID                       :    Smbios GUID
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SystemView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_USBDeviceView__(__BaseClass__, __DCIM_View__):
    '''DCIM_USBDeviceView is a derivation of CIM_View with USB Device specific data )

Class Properties:
    string BaseClass                        :    Base Class is used in this description to identify the first byte of the Class Code triple 
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name A property that describes the device and its location
    string DeviceVersion                    :    A string containing the version of the device,assigned by manufacturer.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string Manufacturer                     :    A string containing the manufacturer name.
    string MaximumCurrentDrawn              :    A USB device can have more than one configuration with each configurationhaving a different power requirement. This property reports the maximum current drawnby a USB device across all available configurations.
    string ProductID                        :    Used identify the type of the product,assigned by manufacturer.
    string ProductName                      :    A string containing the product name.
    string Protocol                         :    Protocol is used in this description to identifythe third byte of the Class Code triple 
    string SerialNumber                     :    A manufacturer-allocated number used to identify the Physical Element.
    string SubClass                         :    Sub Class is used in this description to identify the second byte of the Class Code triple 
    string USBVersion                       :    The highest USB specification supported by a device. If a device supportstwo versions, only the highest version is reported. Often, USB devicesencode this value as a binary coded decimal with a format of 0xAABCwhere AA is the major version number, B is the minor version numberand C is the sub minor version number
    string VendorID                         :    Used to identify the manufacturer of the device,assigned by usb.org
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_USBDeviceView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_VFlashView__(__BaseClass__, __DCIM_View__):
    '''DCIM_VFlashView is a derivation of CIM_View with VFlash related data. )

Class Properties:
    uint64 AvailableSize                    :    This property specifies the avaible size on the media 
    uint64 Capacity                         :    This property specifies the total size on the media 
    string ComponentName                    :    This property represents the media. 
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    This property represents the FQDD of the VFlash view. 
    string HealthStatus                     :    The HealthStatus property represents the health status of the virtual flash media. 
    string InitializedState                 :    The InitializedState property represents the initialization state of the virtual flash media. 
    string InstanceID                       :    This property represents the ID of the VFlash view. 
    boolean Licensed                        :    This property represents whether the virtue flash media is licensed or not.
    boolean VFlashEnabledState              :    The EnabledState property indicates whether VFlash is enabled. 
    boolean WriteProtected                  :    This property indicates whether the virtue flash media is write protected(latch is on) or not.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_VFlashView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_VideoView__(__BaseClass__, __DCIM_View__):
    '''DCIM_VideoView is a derivation of CIM_View with Video specific data )

Class Properties:
    uint32 BusNumber                        :    The bus number where this Video device resides
    string DataBusWidth                     :    Data-bus width of the PCI device.
    string Description                      :    Gives the description of the video device
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint32 DeviceNumber                     :    The device number assigned to this Video for this bus.
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    uint32 FunctionNumber                   :    The function number for this Video device.
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information.
    string Ipv4Address                      :    A string containing IPv4 Address.
    string Ipv6Address                      :    A string containing IPv6 Address.
    string MacAddress                       :    A string containing Mac Address.
    string Manufacturer                     :    A string containing the Manufacturer nameThe name of the organization responsible for producing the Video device.
    string PCIDeviceID                      :    Register that contains a value assigned by the devicemanufacturer used to identify the type of device.
    string PCISubDeviceID                   :    Register that contains a value assigned by the vendormanufacturer used to identify the type of device.
    string PCISubVendorID                   :    Subsystem vendor ID.
    string PCIVendorID                      :    Register that contains a value assigned by the Video SIGused to identify the manufacturer of the device.
    string SlotLength                       :    Slot length of the PCI device
    string SlotType                         :    Slot type of the PCI device.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_VideoView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_VirtualDiskView__(__BaseClass__, __DCIM_View__):
    '''DCIM_VirtualDiskView is a derivation of DCIM_View )

Class Properties:
    uint32 BlockSizeInBytes                 :    This is the block size of the physical disks in the virtual disk 
    uint32 BusProtocol                      :    Bus protocol used by the physical disc. The Protocol used can be one of following: Unknown,  SCSI, PATA, FIBRE, USB, SATA, SAS 
    uint8 Cachecade                         :    The property indicates if this Virtual Diskis used as Cachecade
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    uint32 DiskCachePolicy                  :    Disk Cache Policy of the virtual disk provides information about caching techniques used by the Virtual Disk. The Policy dictates how the read and write accesses to the Virtual disk are cached. The cache policy can have one of the following values: Default Enabled , Disabled 
    string FQDD                             :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each  instance to define a user-friendly name in addition to its key  properties, identity data, and description information. 
    string InstanceID                       :    A string containing the Fully Qualified Device Description A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. 
    uint8 LockStatus                        :    The property indicates if this Virtual Disk is locked
    uint32 MediaType                        :    This field indicates Type of the physical disk The physical disk type can be: Unknown, Hard Disk Drive Solid State Drive 
    string Name                             :    This property provides the name used in the system for the virtual disk. 
    uint8 ObjectStatus                      :    This property gives information about the virtual disk configuration state
    string OperationName                    :    The property indicates the operation running on the VirtualDisk When there is no operation the property value will be None 
    uint8 OperationPercentComplete          :    The property indicates the progress of the operation specified OperationName property. The value will indicate the completion percentage
    uint8 PendingOperations[]               :    This property will indicate all the pending operations.The array should not be empty. 
    string PhysicalDiskIDs[]                :    Array of Fully Qualified Device Descriptors (FQDDs) of the Physical Disk that are used to create this virtual Disks including dedicated hot spares The array should not be empty. 
    uint32 PrimaryStatus                    :    PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the virtual disk and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the virtual disk is functioning normally. Degraded indicates the virtual disk is functioning below normal. Error indicates the virtual disk is in an Error condition. 
    uint32 RAIDStatus                       :    Raid status provides a status value RaidStatus consists of one of the following values: Unknown Ready Online Foreign Offline Blocked Failed Degraded 
    uint32 RAIDTypes                        :    RaidTypes provides information about the RAID level that is configured on the Virtual Disk. It can have one of the following values: No RAID, RAID0, RAID1,  RAID5, RAID6, RAID10, RAID50, RAID60 
    uint32 ReadCachePolicy                  :    Read Cache policy of the virtual disk provides information regarding the way in which the disk cache reads data It can have one of the following values: Unknown No Read Ahead, Read Ahead, Adaptive Read Ahead 
    uint16 RemainingRedundancy              :    This property gives information about the remaining redundancy of the virtual disk. 
    uint32 RollupStatus                     :    RollupStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used to provide high level and detailed health status of the enclosure and its subcomponents. PrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. Unknown indicates the implementation is in general capable of returning this property, but is unable to do so at this time. OK indicates the enclosure is functioning normally. Degraded indicates the enclosure is functioning below normal. Error indicates the enclosure is in an Error condition. 
    uint64 SizeInBytes                      :    This is the size of the virtual disk 
    uint32 SpanDepth                        :    This Property gives the number of spans of the physical disk that are performed to create a virtual disk 
    uint32 SpanLength                       :    Spanlength gives the number of physical disks used in creating the virtual disk. 
    uint64 StartingLBAinBlocks              :    This gives the starting logical block address in blocks for the virtual disk. 
    uint32 StripeSize                       :    Stripe size is the size of the stripe on a physical disk that contributes to the virtual disk. The stripe size can be specified  in bytes or kilobytes or megabytes. The Stripe size can have one of the folllowing values: Default, 512B, 1KB, 2KB 4KB, 8KB, 16KB, 32KB, 64KB, 128KB, 256KB 512KB, 1MB, 2MB, 4MB, 8MB, 16MB 
    uint8 T10PIStatus                       :    T10PIStatus indicates whether the Virtual Disk isT10 Protection Information Enabled.
    uint32 VirtualDiskTargetID              :    Targert ID for the virtual disk. 
    uint32 WriteCachePolicy                 :    Write cache policy of the virtual disk provides information regarding the way in which the disk cache the write dataIt can have one of the following values: Unknown Write Through, Write Back, Write Back force 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_VirtualDiskView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_iDRACCardView__(__BaseClass__, __DCIM_View__):
    '''DCIM_IDRACCardView is a derivation of CIM_View with iDRAC Card specific data )

Class Properties:
    string DNSDomainName                    :    A string containing the iDRAC domain name
    string DNSRacName                       :    A string containing the iDRAC host name
    string DeviceDescription                :    A string containing the friendly Fully Qualified Device Description A property that describes the device and its location
    string FQDD                             :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    string FirmwareVersion                  :    A string containing the Firmware Version
    string GUID                             :    A string containing the GUID
    string IPMIVersion                      :    A string containing the IPMI Version
    string InstanceID                       :    A string containing the Fully Qualified Device DescriptionA user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information.
    uint16 LANEnabledState                  :    LAN Enable/Disable
    string Model                            :    A string containing the iDrac model.
    string PermanentMACAddress              :    A string containing Permanent MAC Address
    string ProductDescription               :    A string containing the Product Description
    uint16 SOLEnabledState                  :    SOL Enable/Disable
    string URLString                        :    A string containing the URLString
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_iDRACCardView'
        self.__parent__ = 'DCIM_View'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_PCIeSSDView__(__BaseClass__, __DCIM_PhysicalDiskView__):
    '''DCIM_PCIeSSDView is a derivation of DCIM_PhysicalDiskView )

Class Properties:
    string DeviceLifeStatus                 :    The property indicates the Health of the PCIeSSD 
    string DeviceProtocol                   :    The property indicates the device protocol 
    string FailurePredicted                 :    The property indicates the Failure PredictionPossible values would be Yes or No 
    string MaximumCapableSpeed              :    The property indicates the Negotiated speed of the PCIeSSD 
    string NegotiatedSpeed                  :    The property indicates the Negotiated speed of the PCIeSSD 
    string PCIeCapableLinkWidth             :    The property indicates the Capable Link Width of the PCIeSSD 
    string PCIeNegotiatedLinkWidth          :    The property indicates the Negotiated Link width of the PCIeSSD 
    string ProductID                        :    The property indicates the DeviceID of the PCIeSSD 
    uint32 State                            :    This field indicates the current state of the subsystem. 
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PCIeSSDView'
        self.__parent__ = 'DCIM_PhysicalDiskView'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}
class __DCIM_ADMProfilesMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_ADMProfilesMemberOfCollection is a trivial derivation of CIM_MemberOfCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ADMProfilesMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPPrivilegeMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPPrivilegeMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPRBAIdentityMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRBAIdentityMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSCapabilitiesMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_CSCapabilitiesMemberOfCollection is a trivial derivation of CIM_MemberOfCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSCapabilitiesMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSLogsMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_CSLogsMemberOfCollection is a trivial derivation of CIM_MemberOfCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSLogsMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIRBAIdentityMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRBAIdentityMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMISOLRBAIdentityMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMISOLRBAIdentityMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalPrivilegeMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalPrivilegeMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRBAIdentityMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRBAIdentityMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_PSMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_PSMemberOfCollection is a derivation of CIM_MemberOfCollection. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PSMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPCapabilitiesMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_SPCapabilitiesMemberOfCollection is a trivial derivation of CIM_MemberOfCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPCapabilitiesMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPSettingsMemberOfCollection__(__BaseClass__, __CIM_MemberOfCollection__):
    '''DCIM_SPSettingsMemberOfCollection is a trivial derivation of CIM_MemberOfCollection )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPSettingsMemberOfCollection'
        self.__parent__ = 'CIM_MemberOfCollection'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_ADMProfilesOwningCollectionElement__(__BaseClass__, __CIM_OwningCollectionElement__):
    '''DCIM_ADMProfilesOwningCollection is a trivial derivation of CIM_OwningCollectionElement )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_ADMProfilesOwningCollectionElement'
        self.__parent__ = 'CIM_OwningCollectionElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSOwningCollectionElement__(__BaseClass__, __CIM_OwningCollectionElement__):
    '''DCIM_CSOwningCollectionElement is a trivial derivation of CIM_OwningCollectionElement )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSOwningCollectionElement'
        self.__parent__ = 'CIM_OwningCollectionElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_PSOwningCollectionElement__(__BaseClass__, __CIM_OwningCollectionElement__):
    '''DCIM_PSOwningCollectionElement is a derivation of CIM_OwningCollectionElement. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_PSOwningCollectionElement'
        self.__parent__ = 'CIM_OwningCollectionElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_RBAOwningCollectionElement__(__BaseClass__, __CIM_OwningCollectionElement__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_RBAOwningCollectionElement'
        self.__parent__ = 'CIM_OwningCollectionElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_SPOwningCollectionElement__(__BaseClass__, __CIM_OwningCollectionElement__):
    '''DCIM_SPOwningCollectionElement is a trivial derivation of CIM_OwningCollectionElement )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_SPOwningCollectionElement'
        self.__parent__ = 'CIM_OwningCollectionElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSRoleLimitedToTarget__(__BaseClass__, __CIM_RoleLimitedToTarget__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSRoleLimitedToTarget'
        self.__parent__ = 'CIM_RoleLimitedToTarget'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_BMServiceAffectsElement__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''DCIM_BMServiceAffectsElement is a derivation of CIM_ServiceAffectsElement and represents an association between a Service and the ManagedElements that might be affected by its execution. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_BMServiceAffectsElement'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPRBAServiceAffectsElementRole__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPRBAServiceAffectsElementRole'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CLPServiceAffectsIdentity__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''DCIM_CLPServiceAffectsIdentity is a derivation of CIM_ServiceAffectsElement. ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CLPServiceAffectsIdentity'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIRBAServiceAffectsElementRole__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIRBAServiceAffectsElementRole'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_IPMIServiceAffectsIdentity__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''DCIM_IPMIServiceAffectsIdentity is a derivation of CIM_ServiceAffectsElement. ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_IPMIServiceAffectsIdentity'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalRBAServiceAffectsElementRole__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalRBAServiceAffectsElementRole'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_LocalUserServiceAffectsIdentity__(__BaseClass__, __CIM_ServiceAffectsElement__):
    '''DCIM_LocalUserServiceAffectsIdentity is a derivation of CIM_ServiceAffectsElement. ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_LocalUserServiceAffectsIdentity'
        self.__parent__ = 'CIM_ServiceAffectsElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __CIM_AssociatedPowerManagementService__(__BaseClass__, __CIM_ServiceAvailableToElement__):
    '''The association between a Managed System Element and its power management service. )

Class Properties:
    uint16 RequestedPowerState = 12         :    The desired or the last requested power state of the associated Managed System Element, irrespective of the mechanism through which the request was made. If the requested power state is unknown, then the property shall have the value of 0 (Unknown). If the property has no meaning or is not supported, then the property shall have value 12(Not Applicable).
    uint16 AvailableRequestedPowerStates[]  :    AvailableRequestedPowerStates indicates the possible values for the PowerState parameter of the method RequestPowerStateChange, used to initiate a power state change.The values listed shall be a subset of the values contained in the RequestedPowerStatesSupported property of the CIM_PowerManagementCapabilities where the values selected are a function of the current power state of the system. This property shall be non-null if an implementation supports the advertisement of the set of possible values as a function of the current state. This property shall be null if an implementation does not support the advertisement of the set of possible values as a function of the current state. \nThe current values in the enumeration are: \n2=On, corresponding to ACPI state G0 or S0 or D0. \n3=Sleep - Light, corresponding to ACPI state G1, S1/S2, or D1. \n4=Sleep - Deep, corresponding to ACPI state G1, S3, or D2.\n5=Power Cycle (Off - Soft), corresponding to ACPI state G2, S5, or D3, but where the managed element is set to return to power state On at a pre-determined time. \n6=Off - Hard, corresponding to ACPI state G3, S5, or D3. \n7=Hibernate (Off - Soft), corresponding to ACPI state S4, where the state of the managed element is preserved and will be recovered upon powering on. \n8=Off - Soft, corresponding to ACPI state G2, S5, or D3. 9= Power Cycle (Off-Hard), corresponds to the managed element reaching the ACPI state G3 followed by ACPI state S0. \n10=Master Bus Reset, corresponds to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system master bus reset. 11=Diagnostic Interrupt (NMI), corresponding to the system reaching ACPI state S5 followed by ACPI state S0. This is used to represent system non-maskable interrupt. 12=Off - Soft Graceful, equivalent to Off Soft but preceded by a request to the managed element to perform an orderly shutdown. \n13=Off - Hard Graceful, equivalent to Off Hard but preceded by a request to the managed element to perform an orderly shutdown. \n14=Master Bus Rest Graceful, equivalent to Master Bus Reset but preceded by a request to the managed element to perform an orderly shutdown. \n15=Power Cycle (Off - Soft Graceful), equivalent to Power Cycle (Off - Soft) but preceded by a request to the managed element to perform an orderly shutdown. \n16=Power Cycle (Off - Hard Graceful), equivalent to Power Cycle (Off - Hard) but preceded by a request to the managed element to perform an orderly shutdown. \n..=DMTF Reserved. \n0x7FFF..0xFFFF = Vendor Specific.
    string OtherPowerState                  :    A string describing the additional power management state of the element, used when the PowerState is set to the value 1, Other.
    string OtherRequestedPowerState         :    A string describing the additional power management state of the element, used when the RequestedPowerState is set to the value 1, Other.
    datetime PowerOnTime                    :    The time when the element will be powered on again, used when the RequestedPowerState has the value 2, On, 5, Power Cycle (Off - Soft) or 6, Power Cycle (Off - Hard).
    uint16 PowerState                       :    The current power state of the associated Managed System Element.
    CIM_PowerManagementService REF ServiceProvided:    The Service that is available.
    uint16 TransitioningToPowerState        :    TransitioningToPowerState indicates the target power state to which the system is transitioning. \nA value of 19 No Change shall indicate that no transition is in progress. A value of 18 Not Applicable shall indicate the implementation does not support representing ongoing transitions. \nA value other than 18 or 19 shall identify the power state to which the element is in the process of transitioning.
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_AssociatedPowerManagementService'
        self.__parent__ = 'CIM_ServiceAvailableToElement'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = True
        self.__invokeMethodsMap__ = {}
class __DCIM_CSAssociatedPowerManagementService__(__BaseClass__, __CIM_AssociatedPowerManagementService__):
    '''The association between a Managed System Element and its power management service. )

Class Properties:
'''
    def __init__(self,soaplib):
        self.__soaplib__ = soaplib
        self.__resuri__ = 'http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/DCIM_CSAssociatedPowerManagementService'
        self.__parent__ = 'CIM_AssociatedPowerManagementService'
        self.__cimns__ = 'root/dcim'
        self.name = self.__resuri__.rsplit('/',1)[-1].lower()
        self.__selectorsCached__ = False
        self.__association__ = False
        self.__invokeMethodsMap__ = {}

class __EventSink__():
    def __init__(self):
        self.__Q__ = Queue()
        self.__eventsink__ = Eventsink(self.__Q__)
    def start(self,port):
        return self.__eventsink__.start(port)
    def stop(self):
        return self.__eventsink__.stop()
    def restart(self,port=None):
        return self.__eventsink__.restart(port)
    def test(self,data='Test Message'):
        return self.__eventsink__.test(data)
    def getEventSinkURL(self):
        return self.__eventsink__.getEventSinkURL()
    def hasEvent(self):
        return not self.__Q__.empty()
    def numEvents(self):
        return self.__Q__.qsize()
    def getEvent(self):
        if not self.__Q__.empty():
            return self.__Q__.get()
        else:
            return None
class iDRAC():
    def __init__(self,ip,user,pwd,maxBatchItems='256',maxTimeout='120000',maxEnvelope='500',optimize=True,verbose=False,port=443):
        self.__soaplib__ = WsmanSoap(ip,user,pwd,maxBatchItems,maxTimeout,maxEnvelope,optimize,port)
        self.wseventing = __WSEventing__(self.__soaplib__)
        self.wseventsink = __EventSink__()
        self.cim_assignedidentity = __CIM_AssignedIdentity__(self.__soaplib__)
        self.cim_component = __CIM_Component__(self.__soaplib__)
        self.cim_dependency = __CIM_Dependency__(self.__soaplib__)
        self.cim_elementcapabilities = __CIM_ElementCapabilities__(self.__soaplib__)
        self.cim_elementconformstoprofile = __CIM_ElementConformsToProfile__(self.__soaplib__)
        self.cim_indication = __CIM_Indication__(self.__soaplib__)
        self.cim_logmanagesrecord = __CIM_LogManagesRecord__(self.__soaplib__)
        self.cim_managedelement = __CIM_ManagedElement__(self.__soaplib__)
        self.cim_memberofcollection = __CIM_MemberOfCollection__(self.__soaplib__)
        self.cim_owningcollectionelement = __CIM_OwningCollectionElement__(self.__soaplib__)
        self.cim_rolelimitedtotarget = __CIM_RoleLimitedToTarget__(self.__soaplib__)
        self.cim_serviceaffectselement = __CIM_ServiceAffectsElement__(self.__soaplib__)
        self.cim_serviceavailabletoelement = __CIM_ServiceAvailableToElement__(self.__soaplib__)
        self.dcim_assignedacctident = __DCIM_AssignedAcctIdent__(self.__soaplib__)
        self.cim_systemcomponent = __CIM_SystemComponent__(self.__soaplib__)
        self.cim_accountonsystem = __CIM_AccountOnSystem__(self.__soaplib__)
        self.cim_systemdevice = __CIM_SystemDevice__(self.__soaplib__)
        self.dcim_systemcomponent = __DCIM_SystemComponent__(self.__soaplib__)
        self.dcim_accountonsystem = __DCIM_AccountOnSystem__(self.__soaplib__)
        self.dcim_spsystemdevice = __DCIM_SPSystemDevice__(self.__soaplib__)
        self.dcim_systempsdevice = __DCIM_SystemPSDevice__(self.__soaplib__)
        self.dcim_systemsensordevice = __DCIM_SystemSensorDevice__(self.__soaplib__)
        self.cim_associatedsensor = __CIM_AssociatedSensor__(self.__soaplib__)
        self.cim_concretedependency = __CIM_ConcreteDependency__(self.__soaplib__)
        self.cim_elementview = __CIM_ElementView__(self.__soaplib__)
        self.cim_hosteddependency = __CIM_HostedDependency__(self.__soaplib__)
        self.cim_metricdefforme = __CIM_MetricDefForME__(self.__soaplib__)
        self.cim_metricforme = __CIM_MetricForME__(self.__soaplib__)
        self.cim_metricinstance = __CIM_MetricInstance__(self.__soaplib__)
        self.cim_providesservicetoelement = __CIM_ProvidesServiceToElement__(self.__soaplib__)
        self.cim_systempackaging = __CIM_SystemPackaging__(self.__soaplib__)
        self.cim_useoflog = __CIM_UseOfLog__(self.__soaplib__)
        self.dcim_associatedsensor = __DCIM_AssociatedSensor__(self.__soaplib__)
        self.dcim_localroleconcretedependency = __DCIM_LocalRoleConcreteDependency__(self.__soaplib__)
        self.dcim_elementview = __DCIM_ElementView__(self.__soaplib__)
        self.cim_hostedcollection = __CIM_HostedCollection__(self.__soaplib__)
        self.cim_hostedservice = __CIM_HostedService__(self.__soaplib__)
        self.dcim_cshostedpowerredundancy = __DCIM_CSHostedPowerRedundancy__(self.__soaplib__)
        self.dcim_sphostedpowermanagementservice = __DCIM_SPHostedPowerManagementService__(self.__soaplib__)
        self.dcim_sphostedsimpservice = __DCIM_SPHostedSIMPService__(self.__soaplib__)
        self.dcim_sphostedservice = __DCIM_SPHostedService__(self.__soaplib__)
        self.dcim_sphostedrbapservice = __DCIM_SPHostedRBAPService__(self.__soaplib__)
        self.dcim_sphostedtimeservice = __DCIM_SPHostedTimeService__(self.__soaplib__)
        self.dcim_metricdefforme = __DCIM_MetricDefForME__(self.__soaplib__)
        self.dcim_metricforme = __DCIM_MetricForME__(self.__soaplib__)
        self.dcim_aggrmetricinstance = __DCIM_AggrMetricInstance__(self.__soaplib__)
        self.dcim_basemetricinstance = __DCIM_BaseMetricInstance__(self.__soaplib__)
        self.cim_serviceservicedependency = __CIM_ServiceServiceDependency__(self.__soaplib__)
        self.dcim_rbaserviceservicedependency = __DCIM_RBAServiceServiceDependency__(self.__soaplib__)
        self.dcim_clpserviceservicedependency = __DCIM_CLPServiceServiceDependency__(self.__soaplib__)
        self.dcim_ipmiserviceservicedependency = __DCIM_IPMIServiceServiceDependency__(self.__soaplib__)
        self.dcim_localserviceservicedependency = __DCIM_LocalServiceServiceDependency__(self.__soaplib__)
        self.cim_computersystempackage = __CIM_ComputerSystemPackage__(self.__soaplib__)
        self.dcim_computersystempackage = __DCIM_ComputerSystemPackage__(self.__soaplib__)
        self.dcim_lcuseoflog = __DCIM_LCUseOfLog__(self.__soaplib__)
        self.dcim_seluseoflog = __DCIM_SELUseOfLog__(self.__soaplib__)
        self.dcim_accountcapabilities = __DCIM_AccountCapabilities__(self.__soaplib__)
        self.dcim_bmelementcapabilities = __DCIM_BMElementCapabilities__(self.__soaplib__)
        self.dcim_clprbaelementcapabilities = __DCIM_CLPRBAElementCapabilities__(self.__soaplib__)
        self.dcim_cselementcapabilities = __DCIM_CSElementCapabilities__(self.__soaplib__)
        self.dcim_ipmiclpelementcapabilities = __DCIM_IPMICLPElementCapabilities__(self.__soaplib__)
        self.dcim_ipmirbaelementcapabilities = __DCIM_IPMIRBAElementCapabilities__(self.__soaplib__)
        self.dcim_lcelementcapabilities = __DCIM_LCElementCapabilities__(self.__soaplib__)
        self.dcim_localrbaelementcapabilities = __DCIM_LocalRBAElementCapabilities__(self.__soaplib__)
        self.dcim_localuserelementcapabilities = __DCIM_LocalUserElementCapabilities__(self.__soaplib__)
        self.dcim_pmselementcapabilities = __DCIM_PMSElementCapabilities__(self.__soaplib__)
        self.dcim_selelementcapabilities = __DCIM_SELElementCapabilities__(self.__soaplib__)
        self.dcim_elementconformstoprofile = __DCIM_ElementConformsToProfile__(self.__soaplib__)
        self.dcim_lcelementconformstoprofile = __DCIM_LCElementConformsToProfile__(self.__soaplib__)
        self.dcim_osdelementconformstoprofile = __DCIM_OSDElementConformsToProfile__(self.__soaplib__)
        self.cim_processindication = __CIM_ProcessIndication__(self.__soaplib__)
        self.cim_alertindication = __CIM_AlertIndication__(self.__soaplib__)
        self.dcim_alertindication = __DCIM_AlertIndication__(self.__soaplib__)
        self.dcim_lifecyclejobalertindication = __DCIM_LifecycleJobAlertIndication__(self.__soaplib__)
        self.dcim_lifecyclejobcreatealertindication = __DCIM_LifecycleJobCreateAlertIndication__(self.__soaplib__)
        self.dcim_lifecyclejobdeletealertindication = __DCIM_LifecycleJobDeleteAlertIndication__(self.__soaplib__)
        self.dcim_lifecyclejobgarbagecollectionalertindication = __DCIM_LifecycleJobGarbageCollectionAlertIndication__(self.__soaplib__)
        self.dcim_lifecyclejobupdatealertindication = __DCIM_LifecycleJobUpdateAlertIndication__(self.__soaplib__)
        self.dcim_lclogmanagesrecord = __DCIM_LCLogManagesRecord__(self.__soaplib__)
        self.dcim_sellogmanagesrecord = __DCIM_SELLogManagesRecord__(self.__soaplib__)
        self.cim_biosattribute = __CIM_BIOSAttribute__(self.__soaplib__)
        self.cim_basemetricdefinition = __CIM_BaseMetricDefinition__(self.__soaplib__)
        self.cim_basemetricvalue = __CIM_BaseMetricValue__(self.__soaplib__)
        self.cim_capabilities = __CIM_Capabilities__(self.__soaplib__)
        self.cim_collection = __CIM_Collection__(self.__soaplib__)
        self.cim_identity = __CIM_Identity__(self.__soaplib__)
        self.cim_managedsystemelement = __CIM_ManagedSystemElement__(self.__soaplib__)
        self.cim_privilege = __CIM_Privilege__(self.__soaplib__)
        self.cim_recordforlog = __CIM_RecordForLog__(self.__soaplib__)
        self.cim_registeredspecification = __CIM_RegisteredSpecification__(self.__soaplib__)
        self.cim_settingdata = __CIM_SettingData__(self.__soaplib__)
        self.cim_statisticaldata = __CIM_StatisticalData__(self.__soaplib__)
        self.cim_view = __CIM_View__(self.__soaplib__)
        self.dcim_eventfilter = __DCIM_EventFilter__(self.__soaplib__)
        self.dcim_licensabledevice = __DCIM_LicensableDevice__(self.__soaplib__)
        self.dcim_license = __DCIM_License__(self.__soaplib__)
        self.cim_biosenumeration = __CIM_BIOSEnumeration__(self.__soaplib__)
        self.cim_biosinteger = __CIM_BIOSInteger__(self.__soaplib__)
        self.cim_biospassword = __CIM_BIOSPassword__(self.__soaplib__)
        self.cim_biosstring = __CIM_BIOSString__(self.__soaplib__)
        self.dcim_fcattribute = __DCIM_FCAttribute__(self.__soaplib__)
        self.dcim_lcattribute = __DCIM_LCAttribute__(self.__soaplib__)
        self.dcim_nicattribute = __DCIM_NICAttribute__(self.__soaplib__)
        self.dcim_raidattribute = __DCIM_RAIDAttribute__(self.__soaplib__)
        self.dcim_systemattribute = __DCIM_SystemAttribute__(self.__soaplib__)
        self.dcim_idraccardattribute = __DCIM_iDRACCardAttribute__(self.__soaplib__)
        self.dcim_biosenumeration = __DCIM_BIOSEnumeration__(self.__soaplib__)
        self.dcim_biosinteger = __DCIM_BIOSInteger__(self.__soaplib__)
        self.dcim_biospassword = __DCIM_BIOSPassword__(self.__soaplib__)
        self.dcim_biosstring = __DCIM_BIOSString__(self.__soaplib__)
        self.dcim_fcenumeration = __DCIM_FCEnumeration__(self.__soaplib__)
        self.dcim_fcinteger = __DCIM_FCInteger__(self.__soaplib__)
        self.dcim_fcstring = __DCIM_FCString__(self.__soaplib__)
        self.dcim_lcenumeration = __DCIM_LCEnumeration__(self.__soaplib__)
        self.dcim_lcstring = __DCIM_LCString__(self.__soaplib__)
        self.dcim_nicenumeration = __DCIM_NICEnumeration__(self.__soaplib__)
        self.dcim_nicinteger = __DCIM_NICInteger__(self.__soaplib__)
        self.dcim_nicstring = __DCIM_NICString__(self.__soaplib__)
        self.dcim_raidenumeration = __DCIM_RAIDEnumeration__(self.__soaplib__)
        self.dcim_raidinteger = __DCIM_RAIDInteger__(self.__soaplib__)
        self.dcim_raidstring = __DCIM_RAIDString__(self.__soaplib__)
        self.dcim_systemenumeration = __DCIM_SystemEnumeration__(self.__soaplib__)
        self.dcim_systeminteger = __DCIM_SystemInteger__(self.__soaplib__)
        self.dcim_systemstring = __DCIM_SystemString__(self.__soaplib__)
        self.dcim_idraccardenumeration = __DCIM_iDRACCardEnumeration__(self.__soaplib__)
        self.dcim_idraccardinteger = __DCIM_iDRACCardInteger__(self.__soaplib__)
        self.dcim_idraccardstring = __DCIM_iDRACCardString__(self.__soaplib__)
        self.cim_aggregationmetricdefinition = __CIM_AggregationMetricDefinition__(self.__soaplib__)
        self.dcim_basemetricdefinition = __DCIM_BaseMetricDefinition__(self.__soaplib__)
        self.dcim_aggregationmetricdefinition = __DCIM_AggregationMetricDefinition__(self.__soaplib__)
        self.cim_aggregationmetricvalue = __CIM_AggregationMetricValue__(self.__soaplib__)
        self.dcim_basemetricvalue = __DCIM_BaseMetricValue__(self.__soaplib__)
        self.dcim_aggregationmetricvalue = __DCIM_AggregationMetricValue__(self.__soaplib__)
        self.cim_enabledlogicalelementcapabilities = __CIM_EnabledLogicalElementCapabilities__(self.__soaplib__)
        self.cim_powermanagementcapabilities = __CIM_PowerManagementCapabilities__(self.__soaplib__)
        self.cim_privilegemanagementcapabilities = __CIM_PrivilegeManagementCapabilities__(self.__soaplib__)
        self.dcim_fccapabilities = __DCIM_FCCapabilities__(self.__soaplib__)
        self.dcim_niccapabilities = __DCIM_NICCapabilities__(self.__soaplib__)
        self.cim_accountmanagementcapabilities = __CIM_AccountManagementCapabilities__(self.__soaplib__)
        self.cim_metricservicecapabilities = __CIM_MetricServiceCapabilities__(self.__soaplib__)
        self.cim_recordlogcapabilities = __CIM_RecordLogCapabilities__(self.__soaplib__)
        self.dcim_csenabledlogicalelementcapabilities = __DCIM_CSEnabledLogicalElementCapabilities__(self.__soaplib__)
        self.dcim_enabledlogicalelementcapabilities = __DCIM_EnabledLogicalElementCapabilities__(self.__soaplib__)
        self.dcim_accountmanagementcapabilities = __DCIM_AccountManagementCapabilities__(self.__soaplib__)
        self.dcim_ipmiclpaccountmanagementcapabilities = __DCIM_IPMICLPAccountManagementCapabilities__(self.__soaplib__)
        self.dcim_localuseraccountmanagementcapabilities = __DCIM_LocalUserAccountManagementCapabilities__(self.__soaplib__)
        self.dcim_metricservicecapabilities = __DCIM_MetricServiceCapabilities__(self.__soaplib__)
        self.dcim_lcrecordlogcapabilities = __DCIM_LCRecordLogCapabilities__(self.__soaplib__)
        self.dcim_selrecordlogcapabilities = __DCIM_SELRecordLogCapabilities__(self.__soaplib__)
        self.dcim_cspowermanagementcapabilities = __DCIM_CSPowerManagementCapabilities__(self.__soaplib__)
        self.cim_rolebasedmanagementcapabilities = __CIM_RoleBasedManagementCapabilities__(self.__soaplib__)
        self.dcim_clprolebasedmanagementcapabilities = __DCIM_CLPRoleBasedManagementCapabilities__(self.__soaplib__)
        self.dcim_ipmirolebasedmanagementcapabilities = __DCIM_IPMIRoleBasedManagementCapabilities__(self.__soaplib__)
        self.dcim_localrolebasedmanagementcapabilities = __DCIM_LocalRoleBasedManagementCapabilities__(self.__soaplib__)
        self.cim_concretecollection = __CIM_ConcreteCollection__(self.__soaplib__)
        self.cim_role = __CIM_Role__(self.__soaplib__)
        self.cim_systemspecificcollection = __CIM_SystemSpecificCollection__(self.__soaplib__)
        self.dcim_admprofilesconcretecollection = __DCIM_ADMProfilesConcreteCollection__(self.__soaplib__)
        self.dcim_cscapabilitiesconcretecollection = __DCIM_CSCapabilitiesConcreteCollection__(self.__soaplib__)
        self.dcim_cscapacitiesconcretecollection = __DCIM_CSCapacitiesConcreteCollection__(self.__soaplib__)
        self.dcim_csconsolesconcretecollection = __DCIM_CSConsolesConcreteCollection__(self.__soaplib__)
        self.dcim_cslogsconcretecollection = __DCIM_CSLogsConcreteCollection__(self.__soaplib__)
        self.dcim_cssensorsconcretecollection = __DCIM_CSSensorsConcreteCollection__(self.__soaplib__)
        self.dcim_cssettingsconcretecollection = __DCIM_CSSettingsConcreteCollection__(self.__soaplib__)
        self.dcim_spcapabilitiesconcretecollection = __DCIM_SPCapabilitiesConcreteCollection__(self.__soaplib__)
        self.dcim_spcapacitiesconcretecollection = __DCIM_SPCapacitiesConcreteCollection__(self.__soaplib__)
        self.dcim_spconsolesconcretecollection = __DCIM_SPConsolesConcreteCollection__(self.__soaplib__)
        self.dcim_splogsconcretecollection = __DCIM_SPLogsConcreteCollection__(self.__soaplib__)
        self.dcim_spsensorsconcretecollection = __DCIM_SPSensorsConcreteCollection__(self.__soaplib__)
        self.dcim_spsettingsconcretecollection = __DCIM_SPSettingsConcreteCollection__(self.__soaplib__)
        self.dcim_clprole = __DCIM_CLPRole__(self.__soaplib__)
        self.dcim_ipmirole = __DCIM_IPMIRole__(self.__soaplib__)
        self.dcim_ipmisolrole = __DCIM_IPMISOLRole__(self.__soaplib__)
        self.dcim_role = __DCIM_Role__(self.__soaplib__)
        self.cim_redundancyset = __CIM_RedundancySet__(self.__soaplib__)
        self.dcim_powerredundancyset = __DCIM_PowerRedundancySet__(self.__soaplib__)
        self.dcim_identity = __DCIM_Identity__(self.__soaplib__)
        self.dcim_clpidentity = __DCIM_CLPIdentity__(self.__soaplib__)
        self.dcim_ipmiidentity = __DCIM_IPMIIdentity__(self.__soaplib__)
        self.dcim_localuseridentity = __DCIM_LocalUserIdentity__(self.__soaplib__)
        self.dcim_lanidentity = __DCIM_LANIdentity__(self.__soaplib__)
        self.dcim_serialidentity = __DCIM_SerialIdentity__(self.__soaplib__)
        self.cim_logicalelement = __CIM_LogicalElement__(self.__soaplib__)
        self.cim_physicalelement = __CIM_PhysicalElement__(self.__soaplib__)
        self.cim_enabledlogicalelement = __CIM_EnabledLogicalElement__(self.__soaplib__)
        self.cim_job = __CIM_Job__(self.__soaplib__)
        self.cim_softwareidentity = __CIM_SoftwareIdentity__(self.__soaplib__)
        self.cim_account = __CIM_Account__(self.__soaplib__)
        self.cim_log = __CIM_Log__(self.__soaplib__)
        self.cim_logicaldevice = __CIM_LogicalDevice__(self.__soaplib__)
        self.cim_service = __CIM_Service__(self.__soaplib__)
        self.cim_system = __CIM_System__(self.__soaplib__)
        self.dcim_account = __DCIM_Account__(self.__soaplib__)
        self.cim_recordlog = __CIM_RecordLog__(self.__soaplib__)
        self.dcim_lcrecordlog = __DCIM_LCRecordLog__(self.__soaplib__)
        self.dcim_selrecordlog = __DCIM_SELRecordLog__(self.__soaplib__)
        self.cim_logicalport = __CIM_LogicalPort__(self.__soaplib__)
        self.cim_powersupply = __CIM_PowerSupply__(self.__soaplib__)
        self.cim_sensor = __CIM_Sensor__(self.__soaplib__)
        self.cim_storageextent = __CIM_StorageExtent__(self.__soaplib__)
        self.cim_networkport = __CIM_NetworkPort__(self.__soaplib__)
        self.cim_ethernetport = __CIM_EthernetPort__(self.__soaplib__)
        self.dcim_ethernetport = __DCIM_EthernetPort__(self.__soaplib__)
        self.dcim_powersupply = __DCIM_PowerSupply__(self.__soaplib__)
        self.cim_numericsensor = __CIM_NumericSensor__(self.__soaplib__)
        self.dcim_presenceandstatussensor = __DCIM_PresenceAndStatusSensor__(self.__soaplib__)
        self.dcim_sensor = __DCIM_Sensor__(self.__soaplib__)
        self.dcim_enclosurefansensor = __DCIM_EnclosureFanSensor__(self.__soaplib__)
        self.dcim_enclosuretemperaturesensor = __DCIM_EnclosureTemperatureSensor__(self.__soaplib__)
        self.dcim_numericsensor = __DCIM_NumericSensor__(self.__soaplib__)
        self.dcim_psnumericsensor = __DCIM_PSNumericSensor__(self.__soaplib__)
        self.cim_opaquemanagementdata = __CIM_OpaqueManagementData__(self.__soaplib__)
        self.dcim_opaquemanagementdata = __DCIM_OpaqueManagementData__(self.__soaplib__)
        self.cim_biosservice = __CIM_BIOSService__(self.__soaplib__)
        self.cim_metricservice = __CIM_MetricService__(self.__soaplib__)
        self.cim_powermanagementservice = __CIM_PowerManagementService__(self.__soaplib__)
        self.cim_securityservice = __CIM_SecurityService__(self.__soaplib__)
        self.cim_softwareinstallationservice = __CIM_SoftwareInstallationService__(self.__soaplib__)
        self.cim_timeservice = __CIM_TimeService__(self.__soaplib__)
        self.dcim_efconfigurationservice = __DCIM_EFConfigurationService__(self.__soaplib__)
        self.dcim_jobservice = __DCIM_JobService__(self.__soaplib__)
        self.dcim_licensemanagementservice = __DCIM_LicenseManagementService__(self.__soaplib__)
        self.dcim_osdeploymentservice = __DCIM_OSDeploymentService__(self.__soaplib__)
        self.dcim_persistentstorageservice = __DCIM_PersistentStorageService__(self.__soaplib__)
        self.dcim_biosservice = __DCIM_BIOSService__(self.__soaplib__)
        self.dcim_fcservice = __DCIM_FCService__(self.__soaplib__)
        self.dcim_lcservice = __DCIM_LCService__(self.__soaplib__)
        self.dcim_nicservice = __DCIM_NICService__(self.__soaplib__)
        self.dcim_raidservice = __DCIM_RAIDService__(self.__soaplib__)
        self.dcim_systemmanagementservice = __DCIM_SystemManagementService__(self.__soaplib__)
        self.dcim_idraccardservice = __DCIM_iDRACCardService__(self.__soaplib__)
        self.dcim_metricservice = __DCIM_MetricService__(self.__soaplib__)
        self.dcim_cspowermanagementservice = __DCIM_CSPowerManagementService__(self.__soaplib__)
        self.cim_accountmanagementservice = __CIM_AccountManagementService__(self.__soaplib__)
        self.cim_authorizationservice = __CIM_AuthorizationService__(self.__soaplib__)
        self.dcim_accountmanagementservice = __DCIM_AccountManagementService__(self.__soaplib__)
        self.dcim_clpaccountmanagementservice = __DCIM_CLPAccountManagementService__(self.__soaplib__)
        self.dcim_ipmiaccountmanagementservice = __DCIM_IPMIAccountManagementService__(self.__soaplib__)
        self.dcim_localuseraccountmanagementservice = __DCIM_LocalUserAccountManagementService__(self.__soaplib__)
        self.cim_privilegemanagementservice = __CIM_PrivilegeManagementService__(self.__soaplib__)
        self.cim_rolebasedauthorizationservice = __CIM_RoleBasedAuthorizationService__(self.__soaplib__)
        self.dcim_clprolebasedauthorizationservice = __DCIM_CLPRoleBasedAuthorizationService__(self.__soaplib__)
        self.dcim_ipmirolebasedauthorizationservice = __DCIM_IPMIRoleBasedAuthorizationService__(self.__soaplib__)
        self.dcim_localrolebasedauthorizationservice = __DCIM_LocalRoleBasedAuthorizationService__(self.__soaplib__)
        self.dcim_softwareinstallationservice = __DCIM_SoftwareInstallationService__(self.__soaplib__)
        self.dcim_timeservice = __DCIM_TimeService__(self.__soaplib__)
        self.cim_computersystem = __CIM_ComputerSystem__(self.__soaplib__)
        self.dcim_computersystem = __DCIM_ComputerSystem__(self.__soaplib__)
        self.dcim_spcomputersystem = __DCIM_SPComputerSystem__(self.__soaplib__)
        self.cim_concretejob = __CIM_ConcreteJob__(self.__soaplib__)
        self.dcim_lifecyclejob = __DCIM_LifecycleJob__(self.__soaplib__)
        self.dcim_osdconcretejob = __DCIM_OSDConcreteJob__(self.__soaplib__)
        self.dcim_softwareidentity = __DCIM_SoftwareIdentity__(self.__soaplib__)
        self.cim_physicalconnector = __CIM_PhysicalConnector__(self.__soaplib__)
        self.cim_physicalpackage = __CIM_PhysicalPackage__(self.__soaplib__)
        self.cim_slot = __CIM_Slot__(self.__soaplib__)
        self.dcim_slot = __DCIM_Slot__(self.__soaplib__)
        self.cim_physicalframe = __CIM_PhysicalFrame__(self.__soaplib__)
        self.dcim_physicalpackage = __DCIM_PhysicalPackage__(self.__soaplib__)
        self.cim_chassis = __CIM_Chassis__(self.__soaplib__)
        self.dcim_chassis = __DCIM_Chassis__(self.__soaplib__)
        self.dcim_clpprivilege = __DCIM_CLPPrivilege__(self.__soaplib__)
        self.dcim_localroleprivilege = __DCIM_LocalRolePrivilege__(self.__soaplib__)
        self.cim_logentry = __CIM_LogEntry__(self.__soaplib__)
        self.dcim_lclogentry = __DCIM_LCLogEntry__(self.__soaplib__)
        self.dcim_sellogentry = __DCIM_SELLogEntry__(self.__soaplib__)
        self.cim_registeredprofile = __CIM_RegisteredProfile__(self.__soaplib__)
        self.dcim_lcregisteredprofile = __DCIM_LCRegisteredProfile__(self.__soaplib__)
        self.dcim_registeredprofile = __DCIM_RegisteredProfile__(self.__soaplib__)
        self.cim_bootconfigsetting = __CIM_BootConfigSetting__(self.__soaplib__)
        self.cim_bootsourcesetting = __CIM_BootSourceSetting__(self.__soaplib__)
        self.cim_ipassignmentsettingdata = __CIM_IPAssignmentSettingData__(self.__soaplib__)
        self.dcim_bootconfigsetting = __DCIM_BootConfigSetting__(self.__soaplib__)
        self.dcim_bootsourcesetting = __DCIM_BootSourceSetting__(self.__soaplib__)
        self.cim_dnssettingdata = __CIM_DNSSettingData__(self.__soaplib__)
        self.dcim_dnssettingdata = __DCIM_DNSSettingData__(self.__soaplib__)
        self.dcim_fcstatistics = __DCIM_FCStatistics__(self.__soaplib__)
        self.dcim_nicstatistics = __DCIM_NICStatistics__(self.__soaplib__)
        self.cim_physicalcomputersystemview = __CIM_PhysicalComputerSystemView__(self.__soaplib__)
        self.dcim_view = __DCIM_View__(self.__soaplib__)
        self.dcim_physicalcomputersystemview = __DCIM_PhysicalComputerSystemView__(self.__soaplib__)
        self.dcim_cpuview = __DCIM_CPUView__(self.__soaplib__)
        self.dcim_controllerbatteryview = __DCIM_ControllerBatteryView__(self.__soaplib__)
        self.dcim_controllerview = __DCIM_ControllerView__(self.__soaplib__)
        self.dcim_enclosureemmview = __DCIM_EnclosureEMMView__(self.__soaplib__)
        self.dcim_enclosurepsuview = __DCIM_EnclosurePSUView__(self.__soaplib__)
        self.dcim_enclosureview = __DCIM_EnclosureView__(self.__soaplib__)
        self.dcim_fcview = __DCIM_FCView__(self.__soaplib__)
        self.dcim_fanview = __DCIM_FanView__(self.__soaplib__)
        self.dcim_hostnetworkinterfaceview = __DCIM_HostNetworkInterfaceView__(self.__soaplib__)
        self.dcim_memoryview = __DCIM_MemoryView__(self.__soaplib__)
        self.dcim_nicview = __DCIM_NICView__(self.__soaplib__)
        self.dcim_pcideviceview = __DCIM_PCIDeviceView__(self.__soaplib__)
        self.dcim_pciessdbackplaneview = __DCIM_PCIeSSDBackPlaneView__(self.__soaplib__)
        self.dcim_pciessdextenderview = __DCIM_PCIeSSDExtenderView__(self.__soaplib__)
        self.dcim_physicaldiskview = __DCIM_PhysicalDiskView__(self.__soaplib__)
        self.dcim_powersupplyview = __DCIM_PowerSupplyView__(self.__soaplib__)
        self.dcim_systemquicksyncview = __DCIM_SystemQuickSyncView__(self.__soaplib__)
        self.dcim_systemview = __DCIM_SystemView__(self.__soaplib__)
        self.dcim_usbdeviceview = __DCIM_USBDeviceView__(self.__soaplib__)
        self.dcim_vflashview = __DCIM_VFlashView__(self.__soaplib__)
        self.dcim_videoview = __DCIM_VideoView__(self.__soaplib__)
        self.dcim_virtualdiskview = __DCIM_VirtualDiskView__(self.__soaplib__)
        self.dcim_idraccardview = __DCIM_iDRACCardView__(self.__soaplib__)
        self.dcim_pciessdview = __DCIM_PCIeSSDView__(self.__soaplib__)
        self.dcim_admprofilesmemberofcollection = __DCIM_ADMProfilesMemberOfCollection__(self.__soaplib__)
        self.dcim_clpprivilegememberofcollection = __DCIM_CLPPrivilegeMemberOfCollection__(self.__soaplib__)
        self.dcim_clprbaidentitymemberofcollection = __DCIM_CLPRBAIdentityMemberOfCollection__(self.__soaplib__)
        self.dcim_cscapabilitiesmemberofcollection = __DCIM_CSCapabilitiesMemberOfCollection__(self.__soaplib__)
        self.dcim_cslogsmemberofcollection = __DCIM_CSLogsMemberOfCollection__(self.__soaplib__)
        self.dcim_ipmirbaidentitymemberofcollection = __DCIM_IPMIRBAIdentityMemberOfCollection__(self.__soaplib__)
        self.dcim_ipmisolrbaidentitymemberofcollection = __DCIM_IPMISOLRBAIdentityMemberOfCollection__(self.__soaplib__)
        self.dcim_localprivilegememberofcollection = __DCIM_LocalPrivilegeMemberOfCollection__(self.__soaplib__)
        self.dcim_localrbaidentitymemberofcollection = __DCIM_LocalRBAIdentityMemberOfCollection__(self.__soaplib__)
        self.dcim_psmemberofcollection = __DCIM_PSMemberOfCollection__(self.__soaplib__)
        self.dcim_spcapabilitiesmemberofcollection = __DCIM_SPCapabilitiesMemberOfCollection__(self.__soaplib__)
        self.dcim_spsettingsmemberofcollection = __DCIM_SPSettingsMemberOfCollection__(self.__soaplib__)
        self.dcim_admprofilesowningcollectionelement = __DCIM_ADMProfilesOwningCollectionElement__(self.__soaplib__)
        self.dcim_csowningcollectionelement = __DCIM_CSOwningCollectionElement__(self.__soaplib__)
        self.dcim_psowningcollectionelement = __DCIM_PSOwningCollectionElement__(self.__soaplib__)
        self.dcim_rbaowningcollectionelement = __DCIM_RBAOwningCollectionElement__(self.__soaplib__)
        self.dcim_spowningcollectionelement = __DCIM_SPOwningCollectionElement__(self.__soaplib__)
        self.dcim_csrolelimitedtotarget = __DCIM_CSRoleLimitedToTarget__(self.__soaplib__)
        self.dcim_bmserviceaffectselement = __DCIM_BMServiceAffectsElement__(self.__soaplib__)
        self.dcim_clprbaserviceaffectselementrole = __DCIM_CLPRBAServiceAffectsElementRole__(self.__soaplib__)
        self.dcim_clpserviceaffectsidentity = __DCIM_CLPServiceAffectsIdentity__(self.__soaplib__)
        self.dcim_ipmirbaserviceaffectselementrole = __DCIM_IPMIRBAServiceAffectsElementRole__(self.__soaplib__)
        self.dcim_ipmiserviceaffectsidentity = __DCIM_IPMIServiceAffectsIdentity__(self.__soaplib__)
        self.dcim_localrbaserviceaffectselementrole = __DCIM_LocalRBAServiceAffectsElementRole__(self.__soaplib__)
        self.dcim_localuserserviceaffectsidentity = __DCIM_LocalUserServiceAffectsIdentity__(self.__soaplib__)
        self.cim_associatedpowermanagementservice = __CIM_AssociatedPowerManagementService__(self.__soaplib__)
        self.dcim_csassociatedpowermanagementservice = __DCIM_CSAssociatedPowerManagementService__(self.__soaplib__)
        self.__classesList__ = [self.cim_assignedidentity,self.cim_component,self.cim_dependency,self.cim_elementcapabilities,self.cim_elementconformstoprofile,self.cim_indication,self.cim_logmanagesrecord,self.cim_managedelement,self.cim_memberofcollection,self.cim_owningcollectionelement,self.cim_rolelimitedtotarget,self.cim_serviceaffectselement,self.cim_serviceavailabletoelement,self.dcim_assignedacctident,self.cim_systemcomponent,self.cim_accountonsystem,self.cim_systemdevice,self.dcim_systemcomponent,self.dcim_accountonsystem,self.dcim_spsystemdevice,self.dcim_systempsdevice,self.dcim_systemsensordevice,self.cim_associatedsensor,self.cim_concretedependency,self.cim_elementview,self.cim_hosteddependency,self.cim_metricdefforme,self.cim_metricforme,self.cim_metricinstance,self.cim_providesservicetoelement,self.cim_systempackaging,self.cim_useoflog,self.dcim_associatedsensor,self.dcim_localroleconcretedependency,self.dcim_elementview,self.cim_hostedcollection,self.cim_hostedservice,self.dcim_cshostedpowerredundancy,self.dcim_sphostedpowermanagementservice,self.dcim_sphostedsimpservice,self.dcim_sphostedservice,self.dcim_sphostedrbapservice,self.dcim_sphostedtimeservice,self.dcim_metricdefforme,self.dcim_metricforme,self.dcim_aggrmetricinstance,self.dcim_basemetricinstance,self.cim_serviceservicedependency,self.dcim_rbaserviceservicedependency,self.dcim_clpserviceservicedependency,self.dcim_ipmiserviceservicedependency,self.dcim_localserviceservicedependency,self.cim_computersystempackage,self.dcim_computersystempackage,self.dcim_lcuseoflog,self.dcim_seluseoflog,self.dcim_accountcapabilities,self.dcim_bmelementcapabilities,self.dcim_clprbaelementcapabilities,self.dcim_cselementcapabilities,self.dcim_ipmiclpelementcapabilities,self.dcim_ipmirbaelementcapabilities,self.dcim_lcelementcapabilities,self.dcim_localrbaelementcapabilities,self.dcim_localuserelementcapabilities,self.dcim_pmselementcapabilities,self.dcim_selelementcapabilities,self.dcim_elementconformstoprofile,self.dcim_lcelementconformstoprofile,self.dcim_osdelementconformstoprofile,self.cim_processindication,self.cim_alertindication,self.dcim_alertindication,self.dcim_lifecyclejobalertindication,self.dcim_lifecyclejobcreatealertindication,self.dcim_lifecyclejobdeletealertindication,self.dcim_lifecyclejobgarbagecollectionalertindication,self.dcim_lifecyclejobupdatealertindication,self.dcim_lclogmanagesrecord,self.dcim_sellogmanagesrecord,self.cim_biosattribute,self.cim_basemetricdefinition,self.cim_basemetricvalue,self.cim_capabilities,self.cim_collection,self.cim_identity,self.cim_managedsystemelement,self.cim_privilege,self.cim_recordforlog,self.cim_registeredspecification,self.cim_settingdata,self.cim_statisticaldata,self.cim_view,self.dcim_eventfilter,self.dcim_licensabledevice,self.dcim_license,self.cim_biosenumeration,self.cim_biosinteger,self.cim_biospassword,self.cim_biosstring,self.dcim_fcattribute,self.dcim_lcattribute,self.dcim_nicattribute,self.dcim_raidattribute,self.dcim_systemattribute,self.dcim_idraccardattribute,self.dcim_biosenumeration,self.dcim_biosinteger,self.dcim_biospassword,self.dcim_biosstring,self.dcim_fcenumeration,self.dcim_fcinteger,self.dcim_fcstring,self.dcim_lcenumeration,self.dcim_lcstring,self.dcim_nicenumeration,self.dcim_nicinteger,self.dcim_nicstring,self.dcim_raidenumeration,self.dcim_raidinteger,self.dcim_raidstring,self.dcim_systemenumeration,self.dcim_systeminteger,self.dcim_systemstring,self.dcim_idraccardenumeration,self.dcim_idraccardinteger,self.dcim_idraccardstring,self.cim_aggregationmetricdefinition,self.dcim_basemetricdefinition,self.dcim_aggregationmetricdefinition,self.cim_aggregationmetricvalue,self.dcim_basemetricvalue,self.dcim_aggregationmetricvalue,self.cim_enabledlogicalelementcapabilities,self.cim_powermanagementcapabilities,self.cim_privilegemanagementcapabilities,self.dcim_fccapabilities,self.dcim_niccapabilities,self.cim_accountmanagementcapabilities,self.cim_metricservicecapabilities,self.cim_recordlogcapabilities,self.dcim_csenabledlogicalelementcapabilities,self.dcim_enabledlogicalelementcapabilities,self.dcim_accountmanagementcapabilities,self.dcim_ipmiclpaccountmanagementcapabilities,self.dcim_localuseraccountmanagementcapabilities,self.dcim_metricservicecapabilities,self.dcim_lcrecordlogcapabilities,self.dcim_selrecordlogcapabilities,self.dcim_cspowermanagementcapabilities,self.cim_rolebasedmanagementcapabilities,self.dcim_clprolebasedmanagementcapabilities,self.dcim_ipmirolebasedmanagementcapabilities,self.dcim_localrolebasedmanagementcapabilities,self.cim_concretecollection,self.cim_role,self.cim_systemspecificcollection,self.dcim_admprofilesconcretecollection,self.dcim_cscapabilitiesconcretecollection,self.dcim_cscapacitiesconcretecollection,self.dcim_csconsolesconcretecollection,self.dcim_cslogsconcretecollection,self.dcim_cssensorsconcretecollection,self.dcim_cssettingsconcretecollection,self.dcim_spcapabilitiesconcretecollection,self.dcim_spcapacitiesconcretecollection,self.dcim_spconsolesconcretecollection,self.dcim_splogsconcretecollection,self.dcim_spsensorsconcretecollection,self.dcim_spsettingsconcretecollection,self.dcim_clprole,self.dcim_ipmirole,self.dcim_ipmisolrole,self.dcim_role,self.cim_redundancyset,self.dcim_powerredundancyset,self.dcim_identity,self.dcim_clpidentity,self.dcim_ipmiidentity,self.dcim_localuseridentity,self.dcim_lanidentity,self.dcim_serialidentity,self.cim_logicalelement,self.cim_physicalelement,self.cim_enabledlogicalelement,self.cim_job,self.cim_softwareidentity,self.cim_account,self.cim_log,self.cim_logicaldevice,self.cim_service,self.cim_system,self.dcim_account,self.cim_recordlog,self.dcim_lcrecordlog,self.dcim_selrecordlog,self.cim_logicalport,self.cim_powersupply,self.cim_sensor,self.cim_storageextent,self.cim_networkport,self.cim_ethernetport,self.dcim_ethernetport,self.dcim_powersupply,self.cim_numericsensor,self.dcim_presenceandstatussensor,self.dcim_sensor,self.dcim_enclosurefansensor,self.dcim_enclosuretemperaturesensor,self.dcim_numericsensor,self.dcim_psnumericsensor,self.cim_opaquemanagementdata,self.dcim_opaquemanagementdata,self.cim_biosservice,self.cim_metricservice,self.cim_powermanagementservice,self.cim_securityservice,self.cim_softwareinstallationservice,self.cim_timeservice,self.dcim_efconfigurationservice,self.dcim_jobservice,self.dcim_licensemanagementservice,self.dcim_osdeploymentservice,self.dcim_persistentstorageservice,self.dcim_biosservice,self.dcim_fcservice,self.dcim_lcservice,self.dcim_nicservice,self.dcim_raidservice,self.dcim_systemmanagementservice,self.dcim_idraccardservice,self.dcim_metricservice,self.dcim_cspowermanagementservice,self.cim_accountmanagementservice,self.cim_authorizationservice,self.dcim_accountmanagementservice,self.dcim_clpaccountmanagementservice,self.dcim_ipmiaccountmanagementservice,self.dcim_localuseraccountmanagementservice,self.cim_privilegemanagementservice,self.cim_rolebasedauthorizationservice,self.dcim_clprolebasedauthorizationservice,self.dcim_ipmirolebasedauthorizationservice,self.dcim_localrolebasedauthorizationservice,self.dcim_softwareinstallationservice,self.dcim_timeservice,self.cim_computersystem,self.dcim_computersystem,self.dcim_spcomputersystem,self.cim_concretejob,self.dcim_lifecyclejob,self.dcim_osdconcretejob,self.dcim_softwareidentity,self.cim_physicalconnector,self.cim_physicalpackage,self.cim_slot,self.dcim_slot,self.cim_physicalframe,self.dcim_physicalpackage,self.cim_chassis,self.dcim_chassis,self.dcim_clpprivilege,self.dcim_localroleprivilege,self.cim_logentry,self.dcim_lclogentry,self.dcim_sellogentry,self.cim_registeredprofile,self.dcim_lcregisteredprofile,self.dcim_registeredprofile,self.cim_bootconfigsetting,self.cim_bootsourcesetting,self.cim_ipassignmentsettingdata,self.dcim_bootconfigsetting,self.dcim_bootsourcesetting,self.cim_dnssettingdata,self.dcim_dnssettingdata,self.dcim_fcstatistics,self.dcim_nicstatistics,self.cim_physicalcomputersystemview,self.dcim_view,self.dcim_physicalcomputersystemview,self.dcim_cpuview,self.dcim_controllerbatteryview,self.dcim_controllerview,self.dcim_enclosureemmview,self.dcim_enclosurepsuview,self.dcim_enclosureview,self.dcim_fcview,self.dcim_fanview,self.dcim_hostnetworkinterfaceview,self.dcim_memoryview,self.dcim_nicview,self.dcim_pcideviceview,self.dcim_pciessdbackplaneview,self.dcim_pciessdextenderview,self.dcim_physicaldiskview,self.dcim_powersupplyview,self.dcim_systemquicksyncview,self.dcim_systemview,self.dcim_usbdeviceview,self.dcim_vflashview,self.dcim_videoview,self.dcim_virtualdiskview,self.dcim_idraccardview,self.dcim_pciessdview,self.dcim_admprofilesmemberofcollection,self.dcim_clpprivilegememberofcollection,self.dcim_clprbaidentitymemberofcollection,self.dcim_cscapabilitiesmemberofcollection,self.dcim_cslogsmemberofcollection,self.dcim_ipmirbaidentitymemberofcollection,self.dcim_ipmisolrbaidentitymemberofcollection,self.dcim_localprivilegememberofcollection,self.dcim_localrbaidentitymemberofcollection,self.dcim_psmemberofcollection,self.dcim_spcapabilitiesmemberofcollection,self.dcim_spsettingsmemberofcollection,self.dcim_admprofilesowningcollectionelement,self.dcim_csowningcollectionelement,self.dcim_psowningcollectionelement,self.dcim_rbaowningcollectionelement,self.dcim_spowningcollectionelement,self.dcim_csrolelimitedtotarget,self.dcim_bmserviceaffectselement,self.dcim_clprbaserviceaffectselementrole,self.dcim_clpserviceaffectsidentity,self.dcim_ipmirbaserviceaffectselementrole,self.dcim_ipmiserviceaffectsidentity,self.dcim_localrbaserviceaffectselementrole,self.dcim_localuserserviceaffectsidentity,self.cim_associatedpowermanagementservice,self.dcim_csassociatedpowermanagementservice]
    def classes(self):
        for classObj in self.__classesList__:
            yield classObj

    def getMethodName(self,method):
        '''Returns the Method name for the Method Object passed in as input'''
        return str(method).split()[2].replace('__','')
    def methods(self):
        '''Generator for all implemented methods'''
        for cls in self.classes():
            for method in cls.invokeMethods():
                yield method
    def findMethod(self,substr):
        methodList = []
        for method in self.methods():
            if self.getMethodName(method).lower().find(substr.lower()) >= 0:
                methodList.append(method)
        return methodList
    def getMethodResponseObject(self,data):
        return __InvokeResponse__(data)
    def getXMLInputTemplate(self,method):
        '''Returns the XML Input template for WSMan Invoke Methods'''
        args = inspect.getargspec(method).args
        toRemove = ['self','InputXmlFile']
        for param in toRemove:
            if param in args:
                args.remove(param)
        try:
            cls, meth = self.getMethodName(method).split('.')
        except:
            return None
        xmlStr = '<n:%s_INPUT xmlns:n="%s">' %(meth,method.im_self.getresourceuri())
        for arg in args:
            xmlStr += "\n<n:%s></n:%s>" %(arg,arg)
        xmlStr += "\n</n:%s_INPUT>" %(meth)
        return xmlStr
    def identify(self):
        '''Identifies the WSMan service running at the target'''
        return __ResultObject__(self.__soaplib__.identify())        
